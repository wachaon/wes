try {
    var WShell = WScript.CreateObject('WScript.Shell')

    var argv = ( function () {

        var args = WScript.Arguments

        var res = []
        for ( var i = 0; i < args.length; i++ ) {
            res.push( args( i ) )
        }

        var unnamed = []
        for ( var i = 0; i < args.Unnamed.length; i++ ) {
            unnamed.push( args.Unnamed( i ) )
        }

        function exists ( name ) { return args.Named.Exists( name ) }
        function getValue ( name ) { return args.Named( name ) }

        res.unnamed = unnamed
        res.exists = exists
        res.getValue = getValue

        return res

    } )()

    var console = ( function() {

        function log () {
            var res = normalize( arguments )
            WScript.StdErr.WriteLine( res )
            return res
        }

        function print () {
            var res = normalize( arguments )
            WScript.StdErr.Write( res )
            return res
        }

        function debug () {
            var debugging = argv.exists( 'debug' )
            if ( !debugging ) return void 0
            var res = normalize( arguments )
            WScript.StdErr.WriteLine( 'DEBUG: ' + res )
            return res
        }

        var none = ''
        var space = ' '
        var specifier = /(%[sdifjo])/
        var seq = /(\u001B\[)(\d{1,3};)*(\d{1,3}m)/g

        function normalize ( argList ) {
            var monotone = argv.exists( 'monotone' )
            var args = splitArgs( argList )
            var res = formatArgs( args )
            if ( monotone ) res = removeColor( res )
            else res = clearTail( res )
            return res
        }

        function splitArgs ( args ) { return Array.prototype.slice.call( args ) }

        function formatArgs ( args ) {
            if ( args == null || args.length > 2 ) return args[0]
            if ( !specifier.test( args[0] ) ) return args.join( space )
            var msg = args.shift()
            while ( args.length ) {
                var val = args.shift()
                var type = specifier.test( msg ) ? msg.match( specifier )[0] : null
                switch ( type ) {
                    case '%s':
                        msg = msg.replace( '%s', '' + val ); break
                    case '%d':
                        msg = msg.replace( '%d', val - 0 ); break
                    case '%f':
                        msg = msg.replace( '%f', val - 0 ); break
                    case '%i':
                        msg = msg.replace( '%i', parseInt( val ) ); break
                    case '%j':
                        msg = msg.replace( '%j', JSON.stringify( val ) ); break
                    case '%o':
                        msg = msg.replace( '%o', val ); break
                }
            }
            return msg
        }

        function removeColor ( arg ) {
            return arg.replace( seq, none )
        }

        function clearTail ( arg ) {
            if ( !seq.test( arg ) ) return arg
            return arg + ansi.clear
        }

        function color ( red, green, blue ) {
            var args = arguments
            if ( args.length === 1 && args[0].startsWith( '#' ) ) {
                red = parseInt( args[0].slice( 1, 3 ), 16 )
                green = parseInt( args[0].slice( 3, 5 ), 16 )
                blue = parseInt( args[0].slice( 5, 7 ), 16 )
            }
            return '\u001B[38;2;' + red + ';' + green + ';' + blue + 'm'
        }

        function bgColor( red, green, blue ) {
            var args = arguments
            if ( args.length === 1 && args[0].startsWith( '#' ) ) {
                red = parseInt( args[0].slice( 1, 3 ), 16 )
                green = parseInt( args[0].slice( 3, 5 ), 16 )
                blue = parseInt( args[0].slice( 5, 7 ), 16 )
            }
            return '\u001B[48;2;' + red + ';' + green + ';' + blue + 'm'
        }

        var ansi = {
            clear: '\u001B[0m',
            bold: '\u001B[1m',
            underscore: '\u001B[4m',
            blink: '\u001B[5m',
            reverse: '\u001B[7m',
            concealed: '\u001B[8m',

            black: '\u001B[30m',
            red: '\u001B[31m',
            green: '\u001B[32m',
            yellow: '\u001B[33m',
            blue: '\u001B[34m',
            magenta: '\u001B[35m',
            cyan: '\u001B[36m',
            silver: '\u001B[37m',

            gray: '\u001B[90m',
            brightRed: '\u001B[91m',
            brightGreen: '\u001B[92m',
            brightYellow: '\u001B[93m',
            brightBlue: '\u001B[94m',
            brightMagenta: '\u001B[95m',
            brightCyan: '\u001B[96m',
            white: '\u001B[97m',

            bgBlack: '\u001B[40m',
            bgRed: '\u001B[41m',
            bgGreen: '\u001B[42m',
            bgYellow: '\u001B[43m',
            bgBlue: '\u001B[44m',
            bgMagenta: '\u001B[45m',
            bgCyan: '\u001B[46m',
            bgSilver: '\u001B[47m',

            bgGray: '\u001B[100m',
            bgBrightRed: '\u001B[101m',
            bgBrightGreen: '\u001B[102m',
            bgBrightYellow: '\u001B[103m',
            bgBrightBlue: '\u001B[104m',
            bgBrightMagenta: '\u001B[105m',
            bgBrightCyan: '\u001B[106m',
            bgWhite: '\u001B[107m',

            color: color,
            bgColor: bgColor
        }

        return {
            log: log,
            print: print,
            debug: debug,
            ansi: ansi
        }

      } )()

    if ( !argv.exists( 'engine' ) ) {

        var host = WShell.ExpandEnvironmentStrings('%PROCESSOR_ARCHITECTURE%') !== 'x86'
            ? '{%}windir{%}\\SysWOW64\\cscript'
            : 'cscript'
        var nologo = '//nologo'
        var engin = '/engine:Chakra'
        var chakra = '//E:{{}1b7cd997-e5ff-4932-a7a6-2a9e636da385{}}'
        var monotone = argv.exists('monotone')
            ? ''
            : '| echo off'
        var enter = '{ENTER}'

        WShell.SendKeys([
            host,
            WScript.ScriptFullName,
            argv.join(' '),
            nologo,
            chakra,
            engin,
            monotone,
            enter
        ].join(' ') )

        WScript.Quit()

    } else {
        var history = []
        var stack = []
        var graph = ( {}
            ,{
                "argv": {
                    "source": "var argv = ( function () {\nconst args = WScript.Arguments\nlet res = ['wes']\nfor ( let i = 0; i < args.length; i++ ) {\nres.push( args( i ) )\n}\nlet unnamed = ['wes']\nfor ( let i = 0; i < args.Unnamed.length; i++ ) {\nunnamed.push( args.Unnamed( i ) )\n}\nfunction exists ( name ) { return args.Named.Exists( name ) }\nfunction getValue ( name ) { return args.Named( name ) }\nres.unnamed = unnamed\nres.exists = exists\nres.getValue = getValue\nreturn res\n} )()\nmodule.exports = argv",
                    "mapping": {},
                    "name": "wes/argv"
                },
                "buffer": {
                    "source": "class Buffer extends Uint8Array{\nconstructor( byte ) {\nsuper( Hex2Buffer( Byte2Hex( byte ) ) )\nthis.toByte = () => byte\n}\nstatic toHex ( buffer ) {\nreturn Buffer2Hex( buffer )\n}\n}\nconst Byte2Hex = ( byte ) => {\nlet elm = require('msxml').createElement('elm')\nelm.dataType = 'bin.hex'\nelm.nodeTypedValue = byte\nreturn elm.text\n}\nconst Hex2Buffer = ( hex ) => new Uint8Array( hex.match( /.{1,2}/g ).map( v => parseInt( v, 16 ) ) )\nconst Buffer2Hex = ( buffer ) => {\nlet res = []\nbuffer.forEach( v => res.push( v.toString( 16 ) ) )\nreturn res.join( '' )\n}\nmodule.exports = Buffer\n",
                    "mapping": {},
                    "name": "wes/buffer"
                },
                "chardet": {
                    "source": "var Match = function(det, rec, confidence, name, lang) {\nthis.confidence = confidence;\nthis.name = name || rec.name(det);\nthis.lang = lang;\n};\nclass ISO_2022 {\nmatch(det) {\nvar i, j;\nvar escN;\nvar hits = 0;\nvar misses = 0;\nvar shifts = 0;\nvar quality;\nvar text = det.fInputBytes;\nvar textLen = det.fInputLen;\nscanInput: for (i = 0; i < textLen; i++) {\nif (text[i] == 0x1b) {\ncheckEscapes: for (\nescN = 0;\nescN < this.escapeSequences.length;\nescN++\n) {\nvar seq = this.escapeSequences[escN];\nif (textLen - i < seq.length) continue checkEscapes;\nfor (j = 1; j < seq.length; j++)\nif (seq[j] != text[i + j]) continue checkEscapes;\nhits++;\ni += seq.length - 1;\ncontinue scanInput;\n}\nmisses++;\n}\nif (text[i] == 0x0e || text[i] == 0x0f) shifts++;\n}\nif (hits == 0) return null;\nquality = (100 * hits - 100 * misses) / (hits + misses);\nif (hits + shifts < 5) quality -= (5 - (hits + shifts)) * 10;\nreturn quality <= 0 ? null : new Match(det, this, quality);\n}\n}\nclass ISO_2022_JP extends ISO_2022 {\nconstructor() {\nsuper();\nthis.name = function() {\nreturn \"ISO-2022-JP\";\n};\nthis.escapeSequences = [\n[0x1b, 0x24, 0x28, 0x43],\n[0x1b, 0x24, 0x28, 0x44],\n[0x1b, 0x24, 0x40],\n[0x1b, 0x24, 0x41],\n[0x1b, 0x24, 0x42],\n[0x1b, 0x26, 0x40],\n[0x1b, 0x28, 0x42],\n[0x1b, 0x28, 0x48],\n[0x1b, 0x28, 0x49],\n[0x1b, 0x28, 0x4a],\n[0x1b, 0x2e, 0x41],\n[0x1b, 0x2e, 0x46]\n];\n}\n}\nclass ISO_2022_KR extends ISO_2022 {\nconstructor() {\nsuper();\nthis.name = function() {\nreturn \"ISO-2022-KR\";\n};\nthis.escapeSequences = [[0x1b, 0x24, 0x29, 0x43]];\n}\n}\nclass ISO_2022_CN extends ISO_2022 {\nconstructor() {\nsuper();\nthis.name = function() {\nreturn \"ISO-2022-CN\";\n};\nthis.escapeSequences = [\n[0x1b, 0x24, 0x29, 0x41],\n[0x1b, 0x24, 0x29, 0x47],\n[0x1b, 0x24, 0x2a, 0x48],\n[0x1b, 0x24, 0x29, 0x45],\n[0x1b, 0x24, 0x2b, 0x49],\n[0x1b, 0x24, 0x2b, 0x4a],\n[0x1b, 0x24, 0x2b, 0x4b],\n[0x1b, 0x24, 0x2b, 0x4c],\n[0x1b, 0x24, 0x2b, 0x4d],\n[0x1b, 0x4e],\n[0x1b, 0x4f]\n];\n}\n}\nfunction binarySearch(arr, searchValue) {\nfunction find(arr, searchValue, left, right) {\nif (right < left) return -1;\nvar mid = Math.floor((left + right) >>> 1);\nif (searchValue > arr[mid])\nreturn find(arr, searchValue, mid + 1, right);\nif (searchValue < arr[mid])\nreturn find(arr, searchValue, left, mid - 1);\nreturn mid;\n}\nreturn find(arr, searchValue, 0, arr.length - 1);\n}\nfunction IteratedChar() {\nthis.charValue = 0;\nthis.index = 0;\nthis.nextIndex = 0;\nthis.error = false;\nthis.done = false;\nthis.reset = function() {\nthis.charValue = 0;\nthis.index = -1;\nthis.nextIndex = 0;\nthis.error = false;\nthis.done = false;\n};\nthis.nextByte = function(det) {\nif (this.nextIndex >= det.fRawLength) {\nthis.done = true;\nreturn -1;\n}\nvar byteValue = det.fRawInput[this.nextIndex++] & 0x00ff;\nreturn byteValue;\n};\n}\nclass mbcs {\nmatch(det) {\nvar singleByteCharCount = 0,\ndoubleByteCharCount = 0,\ncommonCharCount = 0,\nbadCharCount = 0,\ntotalCharCount = 0,\nconfidence = 0;\nvar iter = new IteratedChar();\ndetectBlock: {\nfor (iter.reset(); this.nextChar(iter, det); ) {\ntotalCharCount++;\nif (iter.error) {\nbadCharCount++;\n} else {\nvar cv = iter.charValue & 0xffffffff;\nif (cv <= 0xff) {\nsingleByteCharCount++;\n} else {\ndoubleByteCharCount++;\nif (this.commonChars != null) {\nif (binarySearch(this.commonChars, cv) >= 0) {\ncommonCharCount++;\n}\n}\n}\n}\nif (\nbadCharCount >= 2 &&\nbadCharCount * 5 >= doubleByteCharCount\n) {\nbreak detectBlock;\n}\n}\nif (doubleByteCharCount <= 10 && badCharCount == 0) {\nif (doubleByteCharCount == 0 && totalCharCount < 10) {\nconfidence = 0;\n} else {\nconfidence = 10;\n}\nbreak detectBlock;\n}\nif (doubleByteCharCount < 20 * badCharCount) {\nconfidence = 0;\nbreak detectBlock;\n}\nif (this.commonChars == null) {\nconfidence = 30 + doubleByteCharCount - 20 * badCharCount;\nif (confidence > 100) {\nconfidence = 100;\n}\n} else {\nvar maxVal = Math.log(parseFloat(doubleByteCharCount) / 4);\nvar scaleFactor = 90.0 / maxVal;\nconfidence = Math.floor(\nMath.log(commonCharCount + 1) * scaleFactor + 10\n);\nconfidence = Math.min(confidence, 100);\n}\n}\nreturn confidence == 0 ? null : new Match(det, this, confidence);\n}\nnextChar(iter, det) {}\n}\nclass sjis extends mbcs {\nconstructor() {\nsuper();\nthis.name = function() {\nreturn \"Shift-JIS\";\n};\nthis.language = function() {\nreturn \"ja\";\n};\nthis.commonChars = [\n0x8140,\n0x8141,\n0x8142,\n0x8145,\n0x815b,\n0x8169,\n0x816a,\n0x8175,\n0x8176,\n0x82a0,\n0x82a2,\n0x82a4,\n0x82a9,\n0x82aa,\n0x82ab,\n0x82ad,\n0x82af,\n0x82b1,\n0x82b3,\n0x82b5,\n0x82b7,\n0x82bd,\n0x82be,\n0x82c1,\n0x82c4,\n0x82c5,\n0x82c6,\n0x82c8,\n0x82c9,\n0x82cc,\n0x82cd,\n0x82dc,\n0x82e0,\n0x82e7,\n0x82e8,\n0x82e9,\n0x82ea,\n0x82f0,\n0x82f1,\n0x8341,\n0x8343,\n0x834e,\n0x834f,\n0x8358,\n0x835e,\n0x8362,\n0x8367,\n0x8375,\n0x8376,\n0x8389,\n0x838a,\n0x838b,\n0x838d,\n0x8393,\n0x8e96,\n0x93fa,\n0x95aa\n];\nthis.nextChar = function(iter, det) {\niter.index = iter.nextIndex;\niter.error = false;\nvar firstByte;\nfirstByte = iter.charValue = iter.nextByte(det);\nif (firstByte < 0) return false;\nif (firstByte <= 0x7f || (firstByte > 0xa0 && firstByte <= 0xdf))\nreturn true;\nvar secondByte = iter.nextByte(det);\nif (secondByte < 0) return false;\niter.charValue = (firstByte << 8) | secondByte;\nif (\n!(\n(secondByte >= 0x40 && secondByte <= 0x7f) ||\n(secondByte >= 0x80 && secondByte <= 0xff)\n)\n) {\niter.error = true;\n}\nreturn true;\n};\n}\n}\nclass big5 extends mbcs {\nconstructor() {\nsuper();\nthis.name = function() {\nreturn \"Big5\";\n};\nthis.language = function() {\nreturn \"zh\";\n};\nthis.commonChars = [\n0xa140,\n0xa141,\n0xa142,\n0xa143,\n0xa147,\n0xa149,\n0xa175,\n0xa176,\n0xa440,\n0xa446,\n0xa447,\n0xa448,\n0xa451,\n0xa454,\n0xa457,\n0xa464,\n0xa46a,\n0xa46c,\n0xa477,\n0xa4a3,\n0xa4a4,\n0xa4a7,\n0xa4c1,\n0xa4ce,\n0xa4d1,\n0xa4df,\n0xa4e8,\n0xa4fd,\n0xa540,\n0xa548,\n0xa558,\n0xa569,\n0xa5cd,\n0xa5e7,\n0xa657,\n0xa661,\n0xa662,\n0xa668,\n0xa670,\n0xa6a8,\n0xa6b3,\n0xa6b9,\n0xa6d3,\n0xa6db,\n0xa6e6,\n0xa6f2,\n0xa740,\n0xa751,\n0xa759,\n0xa7da,\n0xa8a3,\n0xa8a5,\n0xa8ad,\n0xa8d1,\n0xa8d3,\n0xa8e4,\n0xa8fc,\n0xa9c0,\n0xa9d2,\n0xa9f3,\n0xaa6b,\n0xaaba,\n0xaabe,\n0xaacc,\n0xaafc,\n0xac47,\n0xac4f,\n0xacb0,\n0xacd2,\n0xad59,\n0xaec9,\n0xafe0,\n0xb0ea,\n0xb16f,\n0xb2b3,\n0xb2c4,\n0xb36f,\n0xb44c,\n0xb44e,\n0xb54c,\n0xb5a5,\n0xb5bd,\n0xb5d0,\n0xb5d8,\n0xb671,\n0xb7ed,\n0xb867,\n0xb944,\n0xbad8,\n0xbb44,\n0xbba1,\n0xbdd1,\n0xc2c4,\n0xc3b9,\n0xc440,\n0xc45f\n];\nthis.nextChar = function(iter, det) {\niter.index = iter.nextIndex;\niter.error = false;\nvar firstByte = (iter.charValue = iter.nextByte(det));\nif (firstByte < 0) return false;\nif (firstByte <= 0x7f || firstByte == 0xff) return true;\nvar secondByte = iter.nextByte(det);\nif (secondByte < 0) return false;\niter.charValue = (iter.charValue << 8) | secondByte;\nif (secondByte < 0x40 || secondByte == 0x7f || secondByte == 0xff)\niter.error = true;\nreturn true;\n};\n}\n}\nfunction eucNextChar(iter, det) {\niter.index = iter.nextIndex;\niter.error = false;\nvar firstByte = 0;\nvar secondByte = 0;\nvar thirdByte = 0;\nbuildChar: {\nfirstByte = iter.charValue = iter.nextByte(det);\nif (firstByte < 0) {\niter.done = true;\nbreak buildChar;\n}\nif (firstByte <= 0x8d) {\nbreak buildChar;\n}\nsecondByte = iter.nextByte(det);\niter.charValue = (iter.charValue << 8) | secondByte;\nif (firstByte >= 0xa1 && firstByte <= 0xfe) {\nif (secondByte < 0xa1) {\niter.error = true;\n}\nbreak buildChar;\n}\nif (firstByte == 0x8e) {\nif (secondByte < 0xa1) {\niter.error = true;\n}\nbreak buildChar;\n}\nif (firstByte == 0x8f) {\nthirdByte = iter.nextByte(det);\niter.charValue = (iter.charValue << 8) | thirdByte;\nif (thirdByte < 0xa1) {\niter.error = true;\n}\n}\n}\nreturn iter.done == false;\n}\nclass euc_jp extends mbcs {\nconstructor() {\nsuper();\nthis.name = function() {\nreturn \"EUC-JP\";\n};\nthis.language = function() {\nreturn \"ja\";\n};\nthis.commonChars = [\n0xa1a1,\n0xa1a2,\n0xa1a3,\n0xa1a6,\n0xa1bc,\n0xa1ca,\n0xa1cb,\n0xa1d6,\n0xa1d7,\n0xa4a2,\n0xa4a4,\n0xa4a6,\n0xa4a8,\n0xa4aa,\n0xa4ab,\n0xa4ac,\n0xa4ad,\n0xa4af,\n0xa4b1,\n0xa4b3,\n0xa4b5,\n0xa4b7,\n0xa4b9,\n0xa4bb,\n0xa4bd,\n0xa4bf,\n0xa4c0,\n0xa4c1,\n0xa4c3,\n0xa4c4,\n0xa4c6,\n0xa4c7,\n0xa4c8,\n0xa4c9,\n0xa4ca,\n0xa4cb,\n0xa4ce,\n0xa4cf,\n0xa4d0,\n0xa4de,\n0xa4df,\n0xa4e1,\n0xa4e2,\n0xa4e4,\n0xa4e8,\n0xa4e9,\n0xa4ea,\n0xa4eb,\n0xa4ec,\n0xa4ef,\n0xa4f2,\n0xa4f3,\n0xa5a2,\n0xa5a3,\n0xa5a4,\n0xa5a6,\n0xa5a7,\n0xa5aa,\n0xa5ad,\n0xa5af,\n0xa5b0,\n0xa5b3,\n0xa5b5,\n0xa5b7,\n0xa5b8,\n0xa5b9,\n0xa5bf,\n0xa5c3,\n0xa5c6,\n0xa5c7,\n0xa5c8,\n0xa5c9,\n0xa5cb,\n0xa5d0,\n0xa5d5,\n0xa5d6,\n0xa5d7,\n0xa5de,\n0xa5e0,\n0xa5e1,\n0xa5e5,\n0xa5e9,\n0xa5ea,\n0xa5eb,\n0xa5ec,\n0xa5ed,\n0xa5f3,\n0xb8a9,\n0xb9d4,\n0xbaee,\n0xbbc8,\n0xbef0,\n0xbfb7,\n0xc4ea,\n0xc6fc,\n0xc7bd,\n0xcab8,\n0xcaf3,\n0xcbdc,\n0xcdd1\n];\nthis.nextChar = eucNextChar;\n}\n}\nclass euc_kr extends mbcs {\nconstructor() {\nsuper();\nthis.name = function() {\nreturn \"EUC-KR\";\n};\nthis.language = function() {\nreturn \"ko\";\n};\nthis.commonChars = [\n0xb0a1,\n0xb0b3,\n0xb0c5,\n0xb0cd,\n0xb0d4,\n0xb0e6,\n0xb0ed,\n0xb0f8,\n0xb0fa,\n0xb0fc,\n0xb1b8,\n0xb1b9,\n0xb1c7,\n0xb1d7,\n0xb1e2,\n0xb3aa,\n0xb3bb,\n0xb4c2,\n0xb4cf,\n0xb4d9,\n0xb4eb,\n0xb5a5,\n0xb5b5,\n0xb5bf,\n0xb5c7,\n0xb5e9,\n0xb6f3,\n0xb7af,\n0xb7c2,\n0xb7ce,\n0xb8a6,\n0xb8ae,\n0xb8b6,\n0xb8b8,\n0xb8bb,\n0xb8e9,\n0xb9ab,\n0xb9ae,\n0xb9cc,\n0xb9ce,\n0xb9fd,\n0xbab8,\n0xbace,\n0xbad0,\n0xbaf1,\n0xbbe7,\n0xbbf3,\n0xbbfd,\n0xbcad,\n0xbcba,\n0xbcd2,\n0xbcf6,\n0xbdba,\n0xbdc0,\n0xbdc3,\n0xbdc5,\n0xbec6,\n0xbec8,\n0xbedf,\n0xbeee,\n0xbef8,\n0xbefa,\n0xbfa1,\n0xbfa9,\n0xbfc0,\n0xbfe4,\n0xbfeb,\n0xbfec,\n0xbff8,\n0xc0a7,\n0xc0af,\n0xc0b8,\n0xc0ba,\n0xc0bb,\n0xc0bd,\n0xc0c7,\n0xc0cc,\n0xc0ce,\n0xc0cf,\n0xc0d6,\n0xc0da,\n0xc0e5,\n0xc0fb,\n0xc0fc,\n0xc1a4,\n0xc1a6,\n0xc1b6,\n0xc1d6,\n0xc1df,\n0xc1f6,\n0xc1f8,\n0xc4a1,\n0xc5cd,\n0xc6ae,\n0xc7cf,\n0xc7d1,\n0xc7d2,\n0xc7d8,\n0xc7e5,\n0xc8ad\n];\nthis.nextChar = eucNextChar;\n}\n}\nclass gb_18030 extends mbcs {\nconstructor() {\nsuper();\nthis.name = function() {\nreturn \"GB18030\";\n};\nthis.language = function() {\nreturn \"zh\";\n};\nthis.nextChar = function(iter, det) {\niter.index = iter.nextIndex;\niter.error = false;\nvar firstByte = 0;\nvar secondByte = 0;\nvar thirdByte = 0;\nvar fourthByte = 0;\nbuildChar: {\nfirstByte = iter.charValue = iter.nextByte(det);\nif (firstByte < 0) {\niter.done = true;\nbreak buildChar;\n}\nif (firstByte <= 0x80) {\nbreak buildChar;\n}\nsecondByte = iter.nextByte(det);\niter.charValue = (iter.charValue << 8) | secondByte;\nif (firstByte >= 0x81 && firstByte <= 0xfe) {\nif (\n(secondByte >= 0x40 && secondByte <= 0x7e) ||\n(secondByte >= 80 && secondByte <= 0xfe)\n) {\nbreak buildChar;\n}\nif (secondByte >= 0x30 && secondByte <= 0x39) {\nthirdByte = iter.nextByte(det);\nif (thirdByte >= 0x81 && thirdByte <= 0xfe) {\nfourthByte = iter.nextByte(det);\nif (fourthByte >= 0x30 && fourthByte <= 0x39) {\niter.charValue =\n(iter.charValue << 16) |\n(thirdByte << 8) |\nfourthByte;\nbreak buildChar;\n}\n}\n}\niter.error = true;\nbreak buildChar;\n}\n}\nreturn iter.done == false;\n};\nthis.commonChars = [\n0xa1a1,\n0xa1a2,\n0xa1a3,\n0xa1a4,\n0xa1b0,\n0xa1b1,\n0xa1f1,\n0xa1f3,\n0xa3a1,\n0xa3ac,\n0xa3ba,\n0xb1a8,\n0xb1b8,\n0xb1be,\n0xb2bb,\n0xb3c9,\n0xb3f6,\n0xb4f3,\n0xb5bd,\n0xb5c4,\n0xb5e3,\n0xb6af,\n0xb6d4,\n0xb6e0,\n0xb7a2,\n0xb7a8,\n0xb7bd,\n0xb7d6,\n0xb7dd,\n0xb8b4,\n0xb8df,\n0xb8f6,\n0xb9ab,\n0xb9c9,\n0xb9d8,\n0xb9fa,\n0xb9fd,\n0xbacd,\n0xbba7,\n0xbbd6,\n0xbbe1,\n0xbbfa,\n0xbcbc,\n0xbcdb,\n0xbcfe,\n0xbdcc,\n0xbecd,\n0xbedd,\n0xbfb4,\n0xbfc6,\n0xbfc9,\n0xc0b4,\n0xc0ed,\n0xc1cb,\n0xc2db,\n0xc3c7,\n0xc4dc,\n0xc4ea,\n0xc5cc,\n0xc6f7,\n0xc7f8,\n0xc8ab,\n0xc8cb,\n0xc8d5,\n0xc8e7,\n0xc9cf,\n0xc9fa,\n0xcab1,\n0xcab5,\n0xcac7,\n0xcad0,\n0xcad6,\n0xcaf5,\n0xcafd,\n0xccec,\n0xcdf8,\n0xceaa,\n0xcec4,\n0xced2,\n0xcee5,\n0xcfb5,\n0xcfc2,\n0xcfd6,\n0xd0c2,\n0xd0c5,\n0xd0d0,\n0xd0d4,\n0xd1a7,\n0xd2aa,\n0xd2b2,\n0xd2b5,\n0xd2bb,\n0xd2d4,\n0xd3c3,\n0xd3d0,\n0xd3fd,\n0xd4c2,\n0xd4da,\n0xd5e2,\n0xd6d0\n];\n}\n}\nfunction NGramParser(theNgramList, theByteMap) {\nvar N_GRAM_MASK = 0xffffff;\nthis.byteIndex = 0;\nthis.ngram = 0;\nthis.ngramList = theNgramList;\nthis.byteMap = theByteMap;\nthis.ngramCount = 0;\nthis.hitCount = 0;\nthis.spaceChar;\nthis.search = function(table, value) {\nvar index = 0;\nif (table[index + 32] <= value) index += 32;\nif (table[index + 16] <= value) index += 16;\nif (table[index + 8] <= value) index += 8;\nif (table[index + 4] <= value) index += 4;\nif (table[index + 2] <= value) index += 2;\nif (table[index + 1] <= value) index += 1;\nif (table[index] > value) index -= 1;\nif (index < 0 || table[index] != value) return -1;\nreturn index;\n};\nthis.lookup = function(thisNgram) {\nthis.ngramCount += 1;\nif (this.search(this.ngramList, thisNgram) >= 0) {\nthis.hitCount += 1;\n}\n};\nthis.addByte = function(b) {\nthis.ngram = ((this.ngram << 8) + (b & 0xff)) & N_GRAM_MASK;\nthis.lookup(this.ngram);\n};\nthis.nextByte = function(det) {\nif (this.byteIndex >= det.fInputLen) return -1;\nreturn det.fInputBytes[this.byteIndex++] & 0xff;\n};\nthis.parse = function(det, spaceCh) {\nvar b,\nignoreSpace = false;\nthis.spaceChar = spaceCh;\nwhile ((b = this.nextByte(det)) >= 0) {\nvar mb = this.byteMap[b];\nif (mb != 0) {\nif (!(mb == this.spaceChar && ignoreSpace)) {\nthis.addByte(mb);\n}\nignoreSpace = mb == this.spaceChar;\n}\n}\nthis.addByte(this.spaceChar);\nvar rawPercent = this.hitCount / this.ngramCount;\nif (rawPercent > 0.33) return 98;\nreturn Math.floor(rawPercent * 300.0);\n};\n}\nfunction NGramsPlusLang(la, ng) {\nthis.fLang = la;\nthis.fNGrams = ng;\n}\nclass sbcs {\nconstructor() {\nthis.spaceChar = 0x20;\n}\nngrams() {}\nbyteMap() {}\nmatch(det) {\nvar ngrams = this.ngrams();\nvar multiple =\nArray.isArray(ngrams) && ngrams[0] instanceof NGramsPlusLang;\nif (!multiple) {\nvar parser = new NGramParser(ngrams, this.byteMap());\nvar confidence = parser.parse(det, this.spaceChar);\nreturn confidence <= 0 ? null : new Match(det, this, confidence);\n}\nvar bestConfidenceSoFar = -1;\nvar lang = null;\nfor (var i = ngrams.length - 1; i >= 0; i--) {\nvar ngl = ngrams[i];\nvar parser = new NGramParser(ngl.fNGrams, this.byteMap());\nvar confidence = parser.parse(det, this.spaceChar);\nif (confidence > bestConfidenceSoFar) {\nbestConfidenceSoFar = confidence;\nlang = ngl.fLang;\n}\n}\nvar name = this.name(det);\nreturn bestConfidenceSoFar <= 0\n? null\n: new Match(det, this, bestConfidenceSoFar, name, lang);\n}\n}\nclass ISO_8859_1 extends sbcs {\nconstructor() {\nsuper();\nthis.byteMap = function() {\nreturn [\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x00,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x61,\n0x62,\n0x63,\n0x64,\n0x65,\n0x66,\n0x67,\n0x68,\n0x69,\n0x6a,\n0x6b,\n0x6c,\n0x6d,\n0x6e,\n0x6f,\n0x70,\n0x71,\n0x72,\n0x73,\n0x74,\n0x75,\n0x76,\n0x77,\n0x78,\n0x79,\n0x7a,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x61,\n0x62,\n0x63,\n0x64,\n0x65,\n0x66,\n0x67,\n0x68,\n0x69,\n0x6a,\n0x6b,\n0x6c,\n0x6d,\n0x6e,\n0x6f,\n0x70,\n0x71,\n0x72,\n0x73,\n0x74,\n0x75,\n0x76,\n0x77,\n0x78,\n0x79,\n0x7a,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0xaa,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0xb5,\n0x20,\n0x20,\n0x20,\n0x20,\n0xba,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0xe0,\n0xe1,\n0xe2,\n0xe3,\n0xe4,\n0xe5,\n0xe6,\n0xe7,\n0xe8,\n0xe9,\n0xea,\n0xeb,\n0xec,\n0xed,\n0xee,\n0xef,\n0xf0,\n0xf1,\n0xf2,\n0xf3,\n0xf4,\n0xf5,\n0xf6,\n0x20,\n0xf8,\n0xf9,\n0xfa,\n0xfb,\n0xfc,\n0xfd,\n0xfe,\n0xdf,\n0xe0,\n0xe1,\n0xe2,\n0xe3,\n0xe4,\n0xe5,\n0xe6,\n0xe7,\n0xe8,\n0xe9,\n0xea,\n0xeb,\n0xec,\n0xed,\n0xee,\n0xef,\n0xf0,\n0xf1,\n0xf2,\n0xf3,\n0xf4,\n0xf5,\n0xf6,\n0x20,\n0xf8,\n0xf9,\n0xfa,\n0xfb,\n0xfc,\n0xfd,\n0xfe,\n0xff\n];\n};\nthis.ngrams = function() {\nreturn [\nnew NGramsPlusLang(\"da\", [\n0x206166,\n0x206174,\n0x206465,\n0x20656e,\n0x206572,\n0x20666f,\n0x206861,\n0x206920,\n0x206d65,\n0x206f67,\n0x2070e5,\n0x207369,\n0x207374,\n0x207469,\n0x207669,\n0x616620,\n0x616e20,\n0x616e64,\n0x617220,\n0x617420,\n0x646520,\n0x64656e,\n0x646572,\n0x646574,\n0x652073,\n0x656420,\n0x656465,\n0x656e20,\n0x656e64,\n0x657220,\n0x657265,\n0x657320,\n0x657420,\n0x666f72,\n0x676520,\n0x67656e,\n0x676572,\n0x696765,\n0x696c20,\n0x696e67,\n0x6b6520,\n0x6b6b65,\n0x6c6572,\n0x6c6967,\n0x6c6c65,\n0x6d6564,\n0x6e6465,\n0x6e6520,\n0x6e6720,\n0x6e6765,\n0x6f6720,\n0x6f6d20,\n0x6f7220,\n0x70e520,\n0x722064,\n0x722065,\n0x722073,\n0x726520,\n0x737465,\n0x742073,\n0x746520,\n0x746572,\n0x74696c,\n0x766572\n]),\nnew NGramsPlusLang(\"de\", [\n0x20616e,\n0x206175,\n0x206265,\n0x206461,\n0x206465,\n0x206469,\n0x206569,\n0x206765,\n0x206861,\n0x20696e,\n0x206d69,\n0x207363,\n0x207365,\n0x20756e,\n0x207665,\n0x20766f,\n0x207765,\n0x207a75,\n0x626572,\n0x636820,\n0x636865,\n0x636874,\n0x646173,\n0x64656e,\n0x646572,\n0x646965,\n0x652064,\n0x652073,\n0x65696e,\n0x656974,\n0x656e20,\n0x657220,\n0x657320,\n0x67656e,\n0x68656e,\n0x687420,\n0x696368,\n0x696520,\n0x696e20,\n0x696e65,\n0x697420,\n0x6c6963,\n0x6c6c65,\n0x6e2061,\n0x6e2064,\n0x6e2073,\n0x6e6420,\n0x6e6465,\n0x6e6520,\n0x6e6720,\n0x6e6765,\n0x6e7465,\n0x722064,\n0x726465,\n0x726569,\n0x736368,\n0x737465,\n0x742064,\n0x746520,\n0x74656e,\n0x746572,\n0x756e64,\n0x756e67,\n0x766572\n]),\nnew NGramsPlusLang(\"en\", [\n0x206120,\n0x20616e,\n0x206265,\n0x20636f,\n0x20666f,\n0x206861,\n0x206865,\n0x20696e,\n0x206d61,\n0x206f66,\n0x207072,\n0x207265,\n0x207361,\n0x207374,\n0x207468,\n0x20746f,\n0x207768,\n0x616964,\n0x616c20,\n0x616e20,\n0x616e64,\n0x617320,\n0x617420,\n0x617465,\n0x617469,\n0x642061,\n0x642074,\n0x652061,\n0x652073,\n0x652074,\n0x656420,\n0x656e74,\n0x657220,\n0x657320,\n0x666f72,\n0x686174,\n0x686520,\n0x686572,\n0x696420,\n0x696e20,\n0x696e67,\n0x696f6e,\n0x697320,\n0x6e2061,\n0x6e2074,\n0x6e6420,\n0x6e6720,\n0x6e7420,\n0x6f6620,\n0x6f6e20,\n0x6f7220,\n0x726520,\n0x727320,\n0x732061,\n0x732074,\n0x736169,\n0x737420,\n0x742074,\n0x746572,\n0x746861,\n0x746865,\n0x74696f,\n0x746f20,\n0x747320\n]),\nnew NGramsPlusLang(\"es\", [\n0x206120,\n0x206361,\n0x20636f,\n0x206465,\n0x20656c,\n0x20656e,\n0x206573,\n0x20696e,\n0x206c61,\n0x206c6f,\n0x207061,\n0x20706f,\n0x207072,\n0x207175,\n0x207265,\n0x207365,\n0x20756e,\n0x207920,\n0x612063,\n0x612064,\n0x612065,\n0x61206c,\n0x612070,\n0x616369,\n0x61646f,\n0x616c20,\n0x617220,\n0x617320,\n0x6369f3,\n0x636f6e,\n0x646520,\n0x64656c,\n0x646f20,\n0x652064,\n0x652065,\n0x65206c,\n0x656c20,\n0x656e20,\n0x656e74,\n0x657320,\n0x657374,\n0x69656e,\n0x69f36e,\n0x6c6120,\n0x6c6f73,\n0x6e2065,\n0x6e7465,\n0x6f2064,\n0x6f2065,\n0x6f6e20,\n0x6f7220,\n0x6f7320,\n0x706172,\n0x717565,\n0x726120,\n0x726573,\n0x732064,\n0x732065,\n0x732070,\n0x736520,\n0x746520,\n0x746f20,\n0x756520,\n0xf36e20\n]),\nnew NGramsPlusLang(\"fr\", [\n0x206175,\n0x20636f,\n0x206461,\n0x206465,\n0x206475,\n0x20656e,\n0x206574,\n0x206c61,\n0x206c65,\n0x207061,\n0x20706f,\n0x207072,\n0x207175,\n0x207365,\n0x20736f,\n0x20756e,\n0x20e020,\n0x616e74,\n0x617469,\n0x636520,\n0x636f6e,\n0x646520,\n0x646573,\n0x647520,\n0x652061,\n0x652063,\n0x652064,\n0x652065,\n0x65206c,\n0x652070,\n0x652073,\n0x656e20,\n0x656e74,\n0x657220,\n0x657320,\n0x657420,\n0x657572,\n0x696f6e,\n0x697320,\n0x697420,\n0x6c6120,\n0x6c6520,\n0x6c6573,\n0x6d656e,\n0x6e2064,\n0x6e6520,\n0x6e7320,\n0x6e7420,\n0x6f6e20,\n0x6f6e74,\n0x6f7572,\n0x717565,\n0x72206c,\n0x726520,\n0x732061,\n0x732064,\n0x732065,\n0x73206c,\n0x732070,\n0x742064,\n0x746520,\n0x74696f,\n0x756520,\n0x757220\n]),\nnew NGramsPlusLang(\"it\", [\n0x20616c,\n0x206368,\n0x20636f,\n0x206465,\n0x206469,\n0x206520,\n0x20696c,\n0x20696e,\n0x206c61,\n0x207065,\n0x207072,\n0x20756e,\n0x612063,\n0x612064,\n0x612070,\n0x612073,\n0x61746f,\n0x636865,\n0x636f6e,\n0x64656c,\n0x646920,\n0x652061,\n0x652063,\n0x652064,\n0x652069,\n0x65206c,\n0x652070,\n0x652073,\n0x656c20,\n0x656c6c,\n0x656e74,\n0x657220,\n0x686520,\n0x692061,\n0x692063,\n0x692064,\n0x692073,\n0x696120,\n0x696c20,\n0x696e20,\n0x696f6e,\n0x6c6120,\n0x6c6520,\n0x6c6920,\n0x6c6c61,\n0x6e6520,\n0x6e6920,\n0x6e6f20,\n0x6e7465,\n0x6f2061,\n0x6f2064,\n0x6f2069,\n0x6f2073,\n0x6f6e20,\n0x6f6e65,\n0x706572,\n0x726120,\n0x726520,\n0x736920,\n0x746120,\n0x746520,\n0x746920,\n0x746f20,\n0x7a696f\n]),\nnew NGramsPlusLang(\"nl\", [\n0x20616c,\n0x206265,\n0x206461,\n0x206465,\n0x206469,\n0x206565,\n0x20656e,\n0x206765,\n0x206865,\n0x20696e,\n0x206d61,\n0x206d65,\n0x206f70,\n0x207465,\n0x207661,\n0x207665,\n0x20766f,\n0x207765,\n0x207a69,\n0x61616e,\n0x616172,\n0x616e20,\n0x616e64,\n0x617220,\n0x617420,\n0x636874,\n0x646520,\n0x64656e,\n0x646572,\n0x652062,\n0x652076,\n0x65656e,\n0x656572,\n0x656e20,\n0x657220,\n0x657273,\n0x657420,\n0x67656e,\n0x686574,\n0x696520,\n0x696e20,\n0x696e67,\n0x697320,\n0x6e2062,\n0x6e2064,\n0x6e2065,\n0x6e2068,\n0x6e206f,\n0x6e2076,\n0x6e6465,\n0x6e6720,\n0x6f6e64,\n0x6f6f72,\n0x6f7020,\n0x6f7220,\n0x736368,\n0x737465,\n0x742064,\n0x746520,\n0x74656e,\n0x746572,\n0x76616e,\n0x766572,\n0x766f6f\n]),\nnew NGramsPlusLang(\"no\", [\n0x206174,\n0x206176,\n0x206465,\n0x20656e,\n0x206572,\n0x20666f,\n0x206861,\n0x206920,\n0x206d65,\n0x206f67,\n0x2070e5,\n0x207365,\n0x20736b,\n0x20736f,\n0x207374,\n0x207469,\n0x207669,\n0x20e520,\n0x616e64,\n0x617220,\n0x617420,\n0x646520,\n0x64656e,\n0x646574,\n0x652073,\n0x656420,\n0x656e20,\n0x656e65,\n0x657220,\n0x657265,\n0x657420,\n0x657474,\n0x666f72,\n0x67656e,\n0x696b6b,\n0x696c20,\n0x696e67,\n0x6b6520,\n0x6b6b65,\n0x6c6520,\n0x6c6c65,\n0x6d6564,\n0x6d656e,\n0x6e2073,\n0x6e6520,\n0x6e6720,\n0x6e6765,\n0x6e6e65,\n0x6f6720,\n0x6f6d20,\n0x6f7220,\n0x70e520,\n0x722073,\n0x726520,\n0x736f6d,\n0x737465,\n0x742073,\n0x746520,\n0x74656e,\n0x746572,\n0x74696c,\n0x747420,\n0x747465,\n0x766572\n]),\nnew NGramsPlusLang(\"pt\", [\n0x206120,\n0x20636f,\n0x206461,\n0x206465,\n0x20646f,\n0x206520,\n0x206573,\n0x206d61,\n0x206e6f,\n0x206f20,\n0x207061,\n0x20706f,\n0x207072,\n0x207175,\n0x207265,\n0x207365,\n0x20756d,\n0x612061,\n0x612063,\n0x612064,\n0x612070,\n0x616465,\n0x61646f,\n0x616c20,\n0x617220,\n0x617261,\n0x617320,\n0x636f6d,\n0x636f6e,\n0x646120,\n0x646520,\n0x646f20,\n0x646f73,\n0x652061,\n0x652064,\n0x656d20,\n0x656e74,\n0x657320,\n0x657374,\n0x696120,\n0x696361,\n0x6d656e,\n0x6e7465,\n0x6e746f,\n0x6f2061,\n0x6f2063,\n0x6f2064,\n0x6f2065,\n0x6f2070,\n0x6f7320,\n0x706172,\n0x717565,\n0x726120,\n0x726573,\n0x732061,\n0x732064,\n0x732065,\n0x732070,\n0x737461,\n0x746520,\n0x746f20,\n0x756520,\n0xe36f20,\n0xe7e36f\n]),\nnew NGramsPlusLang(\"sv\", [\n0x206174,\n0x206176,\n0x206465,\n0x20656e,\n0x2066f6,\n0x206861,\n0x206920,\n0x20696e,\n0x206b6f,\n0x206d65,\n0x206f63,\n0x2070e5,\n0x20736b,\n0x20736f,\n0x207374,\n0x207469,\n0x207661,\n0x207669,\n0x20e472,\n0x616465,\n0x616e20,\n0x616e64,\n0x617220,\n0x617474,\n0x636820,\n0x646520,\n0x64656e,\n0x646572,\n0x646574,\n0x656420,\n0x656e20,\n0x657220,\n0x657420,\n0x66f672,\n0x67656e,\n0x696c6c,\n0x696e67,\n0x6b6120,\n0x6c6c20,\n0x6d6564,\n0x6e2073,\n0x6e6120,\n0x6e6465,\n0x6e6720,\n0x6e6765,\n0x6e696e,\n0x6f6368,\n0x6f6d20,\n0x6f6e20,\n0x70e520,\n0x722061,\n0x722073,\n0x726120,\n0x736b61,\n0x736f6d,\n0x742073,\n0x746120,\n0x746520,\n0x746572,\n0x74696c,\n0x747420,\n0x766172,\n0xe47220,\n0xf67220\n])\n];\n};\nthis.name = function(det) {\nreturn det && det.fC1Bytes ? \"windows-1252\" : \"ISO-8859-1\";\n};\n}\n}\nclass ISO_8859_2 extends sbcs {\nconstructor() {\nsuper();\nthis.byteMap = function() {\nreturn [\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x00,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x61,\n0x62,\n0x63,\n0x64,\n0x65,\n0x66,\n0x67,\n0x68,\n0x69,\n0x6a,\n0x6b,\n0x6c,\n0x6d,\n0x6e,\n0x6f,\n0x70,\n0x71,\n0x72,\n0x73,\n0x74,\n0x75,\n0x76,\n0x77,\n0x78,\n0x79,\n0x7a,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x61,\n0x62,\n0x63,\n0x64,\n0x65,\n0x66,\n0x67,\n0x68,\n0x69,\n0x6a,\n0x6b,\n0x6c,\n0x6d,\n0x6e,\n0x6f,\n0x70,\n0x71,\n0x72,\n0x73,\n0x74,\n0x75,\n0x76,\n0x77,\n0x78,\n0x79,\n0x7a,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0xb1,\n0x20,\n0xb3,\n0x20,\n0xb5,\n0xb6,\n0x20,\n0x20,\n0xb9,\n0xba,\n0xbb,\n0xbc,\n0x20,\n0xbe,\n0xbf,\n0x20,\n0xb1,\n0x20,\n0xb3,\n0x20,\n0xb5,\n0xb6,\n0xb7,\n0x20,\n0xb9,\n0xba,\n0xbb,\n0xbc,\n0x20,\n0xbe,\n0xbf,\n0xe0,\n0xe1,\n0xe2,\n0xe3,\n0xe4,\n0xe5,\n0xe6,\n0xe7,\n0xe8,\n0xe9,\n0xea,\n0xeb,\n0xec,\n0xed,\n0xee,\n0xef,\n0xf0,\n0xf1,\n0xf2,\n0xf3,\n0xf4,\n0xf5,\n0xf6,\n0x20,\n0xf8,\n0xf9,\n0xfa,\n0xfb,\n0xfc,\n0xfd,\n0xfe,\n0xdf,\n0xe0,\n0xe1,\n0xe2,\n0xe3,\n0xe4,\n0xe5,\n0xe6,\n0xe7,\n0xe8,\n0xe9,\n0xea,\n0xeb,\n0xec,\n0xed,\n0xee,\n0xef,\n0xf0,\n0xf1,\n0xf2,\n0xf3,\n0xf4,\n0xf5,\n0xf6,\n0x20,\n0xf8,\n0xf9,\n0xfa,\n0xfb,\n0xfc,\n0xfd,\n0xfe,\n0x20\n];\n};\nthis.ngrams = function() {\nreturn [\nnew NGramsPlusLang(\"cs\", [\n0x206120,\n0x206279,\n0x20646f,\n0x206a65,\n0x206e61,\n0x206e65,\n0x206f20,\n0x206f64,\n0x20706f,\n0x207072,\n0x2070f8,\n0x20726f,\n0x207365,\n0x20736f,\n0x207374,\n0x20746f,\n0x207620,\n0x207679,\n0x207a61,\n0x612070,\n0x636520,\n0x636820,\n0x652070,\n0x652073,\n0x652076,\n0x656d20,\n0x656eed,\n0x686f20,\n0x686f64,\n0x697374,\n0x6a6520,\n0x6b7465,\n0x6c6520,\n0x6c6920,\n0x6e6120,\n0x6ee920,\n0x6eec20,\n0x6eed20,\n0x6f2070,\n0x6f646e,\n0x6f6a69,\n0x6f7374,\n0x6f7520,\n0x6f7661,\n0x706f64,\n0x706f6a,\n0x70726f,\n0x70f865,\n0x736520,\n0x736f75,\n0x737461,\n0x737469,\n0x73746e,\n0x746572,\n0x746eed,\n0x746f20,\n0x752070,\n0xbe6520,\n0xe16eed,\n0xe9686f,\n0xed2070,\n0xed2073,\n0xed6d20,\n0xf86564\n]),\nnew NGramsPlusLang(\"hu\", [\n0x206120,\n0x20617a,\n0x206265,\n0x206567,\n0x20656c,\n0x206665,\n0x206861,\n0x20686f,\n0x206973,\n0x206b65,\n0x206b69,\n0x206bf6,\n0x206c65,\n0x206d61,\n0x206d65,\n0x206d69,\n0x206e65,\n0x20737a,\n0x207465,\n0x20e973,\n0x612061,\n0x61206b,\n0x61206d,\n0x612073,\n0x616b20,\n0x616e20,\n0x617a20,\n0x62616e,\n0x62656e,\n0x656779,\n0x656b20,\n0x656c20,\n0x656c65,\n0x656d20,\n0x656e20,\n0x657265,\n0x657420,\n0x657465,\n0x657474,\n0x677920,\n0x686f67,\n0x696e74,\n0x697320,\n0x6b2061,\n0x6bf67a,\n0x6d6567,\n0x6d696e,\n0x6e2061,\n0x6e616b,\n0x6e656b,\n0x6e656d,\n0x6e7420,\n0x6f6779,\n0x732061,\n0x737a65,\n0x737a74,\n0x737ae1,\n0x73e967,\n0x742061,\n0x747420,\n0x74e173,\n0x7a6572,\n0xe16e20,\n0xe97320\n]),\nnew NGramsPlusLang(\"pl\", [\n0x20637a,\n0x20646f,\n0x206920,\n0x206a65,\n0x206b6f,\n0x206d61,\n0x206d69,\n0x206e61,\n0x206e69,\n0x206f64,\n0x20706f,\n0x207072,\n0x207369,\n0x207720,\n0x207769,\n0x207779,\n0x207a20,\n0x207a61,\n0x612070,\n0x612077,\n0x616e69,\n0x636820,\n0x637a65,\n0x637a79,\n0x646f20,\n0x647a69,\n0x652070,\n0x652073,\n0x652077,\n0x65207a,\n0x65676f,\n0x656a20,\n0x656d20,\n0x656e69,\n0x676f20,\n0x696120,\n0x696520,\n0x69656a,\n0x6b6120,\n0x6b6920,\n0x6b6965,\n0x6d6965,\n0x6e6120,\n0x6e6961,\n0x6e6965,\n0x6f2070,\n0x6f7761,\n0x6f7769,\n0x706f6c,\n0x707261,\n0x70726f,\n0x70727a,\n0x727a65,\n0x727a79,\n0x7369ea,\n0x736b69,\n0x737461,\n0x776965,\n0x796368,\n0x796d20,\n0x7a6520,\n0x7a6965,\n0x7a7920,\n0xf37720\n]),\nnew NGramsPlusLang(\"ro\", [\n0x206120,\n0x206163,\n0x206361,\n0x206365,\n0x20636f,\n0x206375,\n0x206465,\n0x206469,\n0x206c61,\n0x206d61,\n0x207065,\n0x207072,\n0x207365,\n0x2073e3,\n0x20756e,\n0x20ba69,\n0x20ee6e,\n0x612063,\n0x612064,\n0x617265,\n0x617420,\n0x617465,\n0x617520,\n0x636172,\n0x636f6e,\n0x637520,\n0x63e320,\n0x646520,\n0x652061,\n0x652063,\n0x652064,\n0x652070,\n0x652073,\n0x656120,\n0x656920,\n0x656c65,\n0x656e74,\n0x657374,\n0x692061,\n0x692063,\n0x692064,\n0x692070,\n0x696520,\n0x696920,\n0x696e20,\n0x6c6120,\n0x6c6520,\n0x6c6f72,\n0x6c7569,\n0x6e6520,\n0x6e7472,\n0x6f7220,\n0x70656e,\n0x726520,\n0x726561,\n0x727520,\n0x73e320,\n0x746520,\n0x747275,\n0x74e320,\n0x756920,\n0x756c20,\n0xba6920,\n0xee6e20\n])\n];\n};\nthis.name = function(det) {\nreturn det && det.fC1Bytes ? \"windows-1250\" : \"ISO-8859-2\";\n};\n}\n}\nclass ISO_8859_5 extends sbcs {\nconstructor() {\nsuper();\nthis.byteMap = function() {\nreturn [\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x00,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x61,\n0x62,\n0x63,\n0x64,\n0x65,\n0x66,\n0x67,\n0x68,\n0x69,\n0x6a,\n0x6b,\n0x6c,\n0x6d,\n0x6e,\n0x6f,\n0x70,\n0x71,\n0x72,\n0x73,\n0x74,\n0x75,\n0x76,\n0x77,\n0x78,\n0x79,\n0x7a,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x61,\n0x62,\n0x63,\n0x64,\n0x65,\n0x66,\n0x67,\n0x68,\n0x69,\n0x6a,\n0x6b,\n0x6c,\n0x6d,\n0x6e,\n0x6f,\n0x70,\n0x71,\n0x72,\n0x73,\n0x74,\n0x75,\n0x76,\n0x77,\n0x78,\n0x79,\n0x7a,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0xf1,\n0xf2,\n0xf3,\n0xf4,\n0xf5,\n0xf6,\n0xf7,\n0xf8,\n0xf9,\n0xfa,\n0xfb,\n0xfc,\n0x20,\n0xfe,\n0xff,\n0xd0,\n0xd1,\n0xd2,\n0xd3,\n0xd4,\n0xd5,\n0xd6,\n0xd7,\n0xd8,\n0xd9,\n0xda,\n0xdb,\n0xdc,\n0xdd,\n0xde,\n0xdf,\n0xe0,\n0xe1,\n0xe2,\n0xe3,\n0xe4,\n0xe5,\n0xe6,\n0xe7,\n0xe8,\n0xe9,\n0xea,\n0xeb,\n0xec,\n0xed,\n0xee,\n0xef,\n0xd0,\n0xd1,\n0xd2,\n0xd3,\n0xd4,\n0xd5,\n0xd6,\n0xd7,\n0xd8,\n0xd9,\n0xda,\n0xdb,\n0xdc,\n0xdd,\n0xde,\n0xdf,\n0xe0,\n0xe1,\n0xe2,\n0xe3,\n0xe4,\n0xe5,\n0xe6,\n0xe7,\n0xe8,\n0xe9,\n0xea,\n0xeb,\n0xec,\n0xed,\n0xee,\n0xef,\n0x20,\n0xf1,\n0xf2,\n0xf3,\n0xf4,\n0xf5,\n0xf6,\n0xf7,\n0xf8,\n0xf9,\n0xfa,\n0xfb,\n0xfc,\n0x20,\n0xfe,\n0xff\n];\n};\nthis.ngrams = function() {\nreturn [\n0x20d220,\n0x20d2de,\n0x20d4de,\n0x20d7d0,\n0x20d820,\n0x20dad0,\n0x20dade,\n0x20ddd0,\n0x20ddd5,\n0x20ded1,\n0x20dfde,\n0x20dfe0,\n0x20e0d0,\n0x20e1de,\n0x20e1e2,\n0x20e2de,\n0x20e7e2,\n0x20ede2,\n0xd0ddd8,\n0xd0e2ec,\n0xd3de20,\n0xd5dbec,\n0xd5ddd8,\n0xd5e1e2,\n0xd5e220,\n0xd820df,\n0xd8d520,\n0xd8d820,\n0xd8ef20,\n0xdbd5dd,\n0xdbd820,\n0xdbecdd,\n0xddd020,\n0xddd520,\n0xddd8d5,\n0xddd8ef,\n0xddde20,\n0xddded2,\n0xde20d2,\n0xde20df,\n0xde20e1,\n0xded220,\n0xded2d0,\n0xded3de,\n0xded920,\n0xdedbec,\n0xdedc20,\n0xdee1e2,\n0xdfdedb,\n0xdfe0d5,\n0xdfe0d8,\n0xdfe0de,\n0xe0d0d2,\n0xe0d5d4,\n0xe1e2d0,\n0xe1e2d2,\n0xe1e2d8,\n0xe1ef20,\n0xe2d5db,\n0xe2de20,\n0xe2dee0,\n0xe2ec20,\n0xe7e2de,\n0xebe520\n];\n};\nthis.name = function(det) {\nreturn \"ISO-8859-5\";\n};\nthis.language = function() {\nreturn \"ru\";\n};\n}\n}\nclass ISO_8859_6 extends sbcs {\nconstructor() {\nsuper();\nthis.byteMap = function() {\nreturn [\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x00,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x61,\n0x62,\n0x63,\n0x64,\n0x65,\n0x66,\n0x67,\n0x68,\n0x69,\n0x6a,\n0x6b,\n0x6c,\n0x6d,\n0x6e,\n0x6f,\n0x70,\n0x71,\n0x72,\n0x73,\n0x74,\n0x75,\n0x76,\n0x77,\n0x78,\n0x79,\n0x7a,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x61,\n0x62,\n0x63,\n0x64,\n0x65,\n0x66,\n0x67,\n0x68,\n0x69,\n0x6a,\n0x6b,\n0x6c,\n0x6d,\n0x6e,\n0x6f,\n0x70,\n0x71,\n0x72,\n0x73,\n0x74,\n0x75,\n0x76,\n0x77,\n0x78,\n0x79,\n0x7a,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0xc1,\n0xc2,\n0xc3,\n0xc4,\n0xc5,\n0xc6,\n0xc7,\n0xc8,\n0xc9,\n0xca,\n0xcb,\n0xcc,\n0xcd,\n0xce,\n0xcf,\n0xd0,\n0xd1,\n0xd2,\n0xd3,\n0xd4,\n0xd5,\n0xd6,\n0xd7,\n0xd8,\n0xd9,\n0xda,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0xe0,\n0xe1,\n0xe2,\n0xe3,\n0xe4,\n0xe5,\n0xe6,\n0xe7,\n0xe8,\n0xe9,\n0xea,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20\n];\n};\nthis.ngrams = function() {\nreturn [\n0x20c7e4,\n0x20c7e6,\n0x20c8c7,\n0x20d9e4,\n0x20e1ea,\n0x20e4e4,\n0x20e5e6,\n0x20e8c7,\n0xc720c7,\n0xc7c120,\n0xc7ca20,\n0xc7d120,\n0xc7e420,\n0xc7e4c3,\n0xc7e4c7,\n0xc7e4c8,\n0xc7e4ca,\n0xc7e4cc,\n0xc7e4cd,\n0xc7e4cf,\n0xc7e4d3,\n0xc7e4d9,\n0xc7e4e2,\n0xc7e4e5,\n0xc7e4e8,\n0xc7e4ea,\n0xc7e520,\n0xc7e620,\n0xc7e6ca,\n0xc820c7,\n0xc920c7,\n0xc920e1,\n0xc920e4,\n0xc920e5,\n0xc920e8,\n0xca20c7,\n0xcf20c7,\n0xcfc920,\n0xd120c7,\n0xd1c920,\n0xd320c7,\n0xd920c7,\n0xd9e4e9,\n0xe1ea20,\n0xe420c7,\n0xe4c920,\n0xe4e920,\n0xe4ea20,\n0xe520c7,\n0xe5c720,\n0xe5c920,\n0xe5e620,\n0xe620c7,\n0xe720c7,\n0xe7c720,\n0xe8c7e4,\n0xe8e620,\n0xe920c7,\n0xea20c7,\n0xea20e5,\n0xea20e8,\n0xeac920,\n0xead120,\n0xeae620\n];\n};\nthis.name = function(det) {\nreturn \"ISO-8859-6\";\n};\nthis.language = function() {\nreturn \"ar\";\n};\n}\n}\nclass ISO_8859_7 extends sbcs {\nconstructor() {\nsuper();\nthis.byteMap = function() {\nreturn [\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x00,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x61,\n0x62,\n0x63,\n0x64,\n0x65,\n0x66,\n0x67,\n0x68,\n0x69,\n0x6a,\n0x6b,\n0x6c,\n0x6d,\n0x6e,\n0x6f,\n0x70,\n0x71,\n0x72,\n0x73,\n0x74,\n0x75,\n0x76,\n0x77,\n0x78,\n0x79,\n0x7a,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x61,\n0x62,\n0x63,\n0x64,\n0x65,\n0x66,\n0x67,\n0x68,\n0x69,\n0x6a,\n0x6b,\n0x6c,\n0x6d,\n0x6e,\n0x6f,\n0x70,\n0x71,\n0x72,\n0x73,\n0x74,\n0x75,\n0x76,\n0x77,\n0x78,\n0x79,\n0x7a,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0xa1,\n0xa2,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0xdc,\n0x20,\n0xdd,\n0xde,\n0xdf,\n0x20,\n0xfc,\n0x20,\n0xfd,\n0xfe,\n0xc0,\n0xe1,\n0xe2,\n0xe3,\n0xe4,\n0xe5,\n0xe6,\n0xe7,\n0xe8,\n0xe9,\n0xea,\n0xeb,\n0xec,\n0xed,\n0xee,\n0xef,\n0xf0,\n0xf1,\n0x20,\n0xf3,\n0xf4,\n0xf5,\n0xf6,\n0xf7,\n0xf8,\n0xf9,\n0xfa,\n0xfb,\n0xdc,\n0xdd,\n0xde,\n0xdf,\n0xe0,\n0xe1,\n0xe2,\n0xe3,\n0xe4,\n0xe5,\n0xe6,\n0xe7,\n0xe8,\n0xe9,\n0xea,\n0xeb,\n0xec,\n0xed,\n0xee,\n0xef,\n0xf0,\n0xf1,\n0xf2,\n0xf3,\n0xf4,\n0xf5,\n0xf6,\n0xf7,\n0xf8,\n0xf9,\n0xfa,\n0xfb,\n0xfc,\n0xfd,\n0xfe,\n0x20\n];\n};\nthis.ngrams = function() {\nreturn [\n0x20e1ed,\n0x20e1f0,\n0x20e3e9,\n0x20e4e9,\n0x20e5f0,\n0x20e720,\n0x20eae1,\n0x20ece5,\n0x20ede1,\n0x20ef20,\n0x20f0e1,\n0x20f0ef,\n0x20f0f1,\n0x20f3f4,\n0x20f3f5,\n0x20f4e7,\n0x20f4ef,\n0xdfe120,\n0xe120e1,\n0xe120f4,\n0xe1e920,\n0xe1ed20,\n0xe1f0fc,\n0xe1f220,\n0xe3e9e1,\n0xe5e920,\n0xe5f220,\n0xe720f4,\n0xe7ed20,\n0xe7f220,\n0xe920f4,\n0xe9e120,\n0xe9eade,\n0xe9f220,\n0xeae1e9,\n0xeae1f4,\n0xece520,\n0xed20e1,\n0xed20e5,\n0xed20f0,\n0xede120,\n0xeff220,\n0xeff520,\n0xf0eff5,\n0xf0f1ef,\n0xf0fc20,\n0xf220e1,\n0xf220e5,\n0xf220ea,\n0xf220f0,\n0xf220f4,\n0xf3e520,\n0xf3e720,\n0xf3f4ef,\n0xf4e120,\n0xf4e1e9,\n0xf4e7ed,\n0xf4e7f2,\n0xf4e9ea,\n0xf4ef20,\n0xf4eff5,\n0xf4f9ed,\n0xf9ed20,\n0xfeed20\n];\n};\nthis.name = function(det) {\nreturn det && det.fC1Bytes ? \"windows-1253\" : \"ISO-8859-7\";\n};\nthis.language = function() {\nreturn \"el\";\n};\n}\n}\nclass ISO_8859_8 extends sbcs {\nconstructor() {\nsuper();\nthis.byteMap = function() {\nreturn [\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x00,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x61,\n0x62,\n0x63,\n0x64,\n0x65,\n0x66,\n0x67,\n0x68,\n0x69,\n0x6a,\n0x6b,\n0x6c,\n0x6d,\n0x6e,\n0x6f,\n0x70,\n0x71,\n0x72,\n0x73,\n0x74,\n0x75,\n0x76,\n0x77,\n0x78,\n0x79,\n0x7a,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x61,\n0x62,\n0x63,\n0x64,\n0x65,\n0x66,\n0x67,\n0x68,\n0x69,\n0x6a,\n0x6b,\n0x6c,\n0x6d,\n0x6e,\n0x6f,\n0x70,\n0x71,\n0x72,\n0x73,\n0x74,\n0x75,\n0x76,\n0x77,\n0x78,\n0x79,\n0x7a,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0xb5,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0xe0,\n0xe1,\n0xe2,\n0xe3,\n0xe4,\n0xe5,\n0xe6,\n0xe7,\n0xe8,\n0xe9,\n0xea,\n0xeb,\n0xec,\n0xed,\n0xee,\n0xef,\n0xf0,\n0xf1,\n0xf2,\n0xf3,\n0xf4,\n0xf5,\n0xf6,\n0xf7,\n0xf8,\n0xf9,\n0xfa,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20\n];\n};\nthis.ngrams = function() {\nreturn [\nnew NGramsPlusLang(\"he\", [\n0x20e0e5,\n0x20e0e7,\n0x20e0e9,\n0x20e0fa,\n0x20e1e9,\n0x20e1ee,\n0x20e4e0,\n0x20e4e5,\n0x20e4e9,\n0x20e4ee,\n0x20e4f2,\n0x20e4f9,\n0x20e4fa,\n0x20ece0,\n0x20ece4,\n0x20eee0,\n0x20f2ec,\n0x20f9ec,\n0xe0fa20,\n0xe420e0,\n0xe420e1,\n0xe420e4,\n0xe420ec,\n0xe420ee,\n0xe420f9,\n0xe4e5e0,\n0xe5e020,\n0xe5ed20,\n0xe5ef20,\n0xe5f820,\n0xe5fa20,\n0xe920e4,\n0xe9e420,\n0xe9e5fa,\n0xe9e9ed,\n0xe9ed20,\n0xe9ef20,\n0xe9f820,\n0xe9fa20,\n0xec20e0,\n0xec20e4,\n0xece020,\n0xece420,\n0xed20e0,\n0xed20e1,\n0xed20e4,\n0xed20ec,\n0xed20ee,\n0xed20f9,\n0xeee420,\n0xef20e4,\n0xf0e420,\n0xf0e920,\n0xf0e9ed,\n0xf2ec20,\n0xf820e4,\n0xf8e9ed,\n0xf9ec20,\n0xfa20e0,\n0xfa20e1,\n0xfa20e4,\n0xfa20ec,\n0xfa20ee,\n0xfa20f9\n]),\nnew NGramsPlusLang(\"he\", [\n0x20e0e5,\n0x20e0ec,\n0x20e4e9,\n0x20e4ec,\n0x20e4ee,\n0x20e4f0,\n0x20e9f0,\n0x20ecf2,\n0x20ecf9,\n0x20ede5,\n0x20ede9,\n0x20efe5,\n0x20efe9,\n0x20f8e5,\n0x20f8e9,\n0x20fae0,\n0x20fae5,\n0x20fae9,\n0xe020e4,\n0xe020ec,\n0xe020ed,\n0xe020fa,\n0xe0e420,\n0xe0e5e4,\n0xe0ec20,\n0xe0ee20,\n0xe120e4,\n0xe120ed,\n0xe120fa,\n0xe420e4,\n0xe420e9,\n0xe420ec,\n0xe420ed,\n0xe420ef,\n0xe420f8,\n0xe420fa,\n0xe4ec20,\n0xe5e020,\n0xe5e420,\n0xe7e020,\n0xe9e020,\n0xe9e120,\n0xe9e420,\n0xec20e4,\n0xec20ed,\n0xec20fa,\n0xecf220,\n0xecf920,\n0xede9e9,\n0xede9f0,\n0xede9f8,\n0xee20e4,\n0xee20ed,\n0xee20fa,\n0xeee120,\n0xeee420,\n0xf2e420,\n0xf920e4,\n0xf920ed,\n0xf920fa,\n0xf9e420,\n0xfae020,\n0xfae420,\n0xfae5e9\n])\n];\n};\nthis.name = function(det) {\nreturn det && det.fC1Bytes ? \"windows-1255\" : \"ISO-8859-8\";\n};\nthis.language = function() {\nreturn \"he\";\n};\n}\n}\nclass ISO_8859_9 extends sbcs {\nconstructor() {\nsuper();\nthis.byteMap = function() {\nreturn [\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x00,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x61,\n0x62,\n0x63,\n0x64,\n0x65,\n0x66,\n0x67,\n0x68,\n0x69,\n0x6a,\n0x6b,\n0x6c,\n0x6d,\n0x6e,\n0x6f,\n0x70,\n0x71,\n0x72,\n0x73,\n0x74,\n0x75,\n0x76,\n0x77,\n0x78,\n0x79,\n0x7a,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x61,\n0x62,\n0x63,\n0x64,\n0x65,\n0x66,\n0x67,\n0x68,\n0x69,\n0x6a,\n0x6b,\n0x6c,\n0x6d,\n0x6e,\n0x6f,\n0x70,\n0x71,\n0x72,\n0x73,\n0x74,\n0x75,\n0x76,\n0x77,\n0x78,\n0x79,\n0x7a,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0xaa,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0xb5,\n0x20,\n0x20,\n0x20,\n0x20,\n0xba,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0xe0,\n0xe1,\n0xe2,\n0xe3,\n0xe4,\n0xe5,\n0xe6,\n0xe7,\n0xe8,\n0xe9,\n0xea,\n0xeb,\n0xec,\n0xed,\n0xee,\n0xef,\n0xf0,\n0xf1,\n0xf2,\n0xf3,\n0xf4,\n0xf5,\n0xf6,\n0x20,\n0xf8,\n0xf9,\n0xfa,\n0xfb,\n0xfc,\n0x69,\n0xfe,\n0xdf,\n0xe0,\n0xe1,\n0xe2,\n0xe3,\n0xe4,\n0xe5,\n0xe6,\n0xe7,\n0xe8,\n0xe9,\n0xea,\n0xeb,\n0xec,\n0xed,\n0xee,\n0xef,\n0xf0,\n0xf1,\n0xf2,\n0xf3,\n0xf4,\n0xf5,\n0xf6,\n0x20,\n0xf8,\n0xf9,\n0xfa,\n0xfb,\n0xfc,\n0xfd,\n0xfe,\n0xff\n];\n};\nthis.ngrams = function() {\nreturn [\n0x206261,\n0x206269,\n0x206275,\n0x206461,\n0x206465,\n0x206765,\n0x206861,\n0x20696c,\n0x206b61,\n0x206b6f,\n0x206d61,\n0x206f6c,\n0x207361,\n0x207461,\n0x207665,\n0x207961,\n0x612062,\n0x616b20,\n0x616c61,\n0x616d61,\n0x616e20,\n0x616efd,\n0x617220,\n0x617261,\n0x6172fd,\n0x6173fd,\n0x617961,\n0x626972,\n0x646120,\n0x646520,\n0x646920,\n0x652062,\n0x65206b,\n0x656469,\n0x656e20,\n0x657220,\n0x657269,\n0x657369,\n0x696c65,\n0x696e20,\n0x696e69,\n0x697220,\n0x6c616e,\n0x6c6172,\n0x6c6520,\n0x6c6572,\n0x6e2061,\n0x6e2062,\n0x6e206b,\n0x6e6461,\n0x6e6465,\n0x6e6520,\n0x6e6920,\n0x6e696e,\n0x6efd20,\n0x72696e,\n0x72fd6e,\n0x766520,\n0x796120,\n0x796f72,\n0xfd6e20,\n0xfd6e64,\n0xfd6efd,\n0xfdf0fd\n];\n};\nthis.name = function(det) {\nreturn det && det.fC1Bytes ? \"windows-1254\" : \"ISO-8859-9\";\n};\nthis.language = function() {\nreturn \"tr\";\n};\n}\n}\nclass windows_1251 extends sbcs {\nconstructor() {\nsuper();\nthis.byteMap = function() {\nreturn [\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x00,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x61,\n0x62,\n0x63,\n0x64,\n0x65,\n0x66,\n0x67,\n0x68,\n0x69,\n0x6a,\n0x6b,\n0x6c,\n0x6d,\n0x6e,\n0x6f,\n0x70,\n0x71,\n0x72,\n0x73,\n0x74,\n0x75,\n0x76,\n0x77,\n0x78,\n0x79,\n0x7a,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x61,\n0x62,\n0x63,\n0x64,\n0x65,\n0x66,\n0x67,\n0x68,\n0x69,\n0x6a,\n0x6b,\n0x6c,\n0x6d,\n0x6e,\n0x6f,\n0x70,\n0x71,\n0x72,\n0x73,\n0x74,\n0x75,\n0x76,\n0x77,\n0x78,\n0x79,\n0x7a,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x90,\n0x83,\n0x20,\n0x83,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x9a,\n0x20,\n0x9c,\n0x9d,\n0x9e,\n0x9f,\n0x90,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x9a,\n0x20,\n0x9c,\n0x9d,\n0x9e,\n0x9f,\n0x20,\n0xa2,\n0xa2,\n0xbc,\n0x20,\n0xb4,\n0x20,\n0x20,\n0xb8,\n0x20,\n0xba,\n0x20,\n0x20,\n0x20,\n0x20,\n0xbf,\n0x20,\n0x20,\n0xb3,\n0xb3,\n0xb4,\n0xb5,\n0x20,\n0x20,\n0xb8,\n0x20,\n0xba,\n0x20,\n0xbc,\n0xbe,\n0xbe,\n0xbf,\n0xe0,\n0xe1,\n0xe2,\n0xe3,\n0xe4,\n0xe5,\n0xe6,\n0xe7,\n0xe8,\n0xe9,\n0xea,\n0xeb,\n0xec,\n0xed,\n0xee,\n0xef,\n0xf0,\n0xf1,\n0xf2,\n0xf3,\n0xf4,\n0xf5,\n0xf6,\n0xf7,\n0xf8,\n0xf9,\n0xfa,\n0xfb,\n0xfc,\n0xfd,\n0xfe,\n0xff,\n0xe0,\n0xe1,\n0xe2,\n0xe3,\n0xe4,\n0xe5,\n0xe6,\n0xe7,\n0xe8,\n0xe9,\n0xea,\n0xeb,\n0xec,\n0xed,\n0xee,\n0xef,\n0xf0,\n0xf1,\n0xf2,\n0xf3,\n0xf4,\n0xf5,\n0xf6,\n0xf7,\n0xf8,\n0xf9,\n0xfa,\n0xfb,\n0xfc,\n0xfd,\n0xfe,\n0xff\n];\n};\nthis.ngrams = function() {\nreturn [\n0x20e220,\n0x20e2ee,\n0x20e4ee,\n0x20e7e0,\n0x20e820,\n0x20eae0,\n0x20eaee,\n0x20ede0,\n0x20ede5,\n0x20eee1,\n0x20efee,\n0x20eff0,\n0x20f0e0,\n0x20f1ee,\n0x20f1f2,\n0x20f2ee,\n0x20f7f2,\n0x20fdf2,\n0xe0ede8,\n0xe0f2fc,\n0xe3ee20,\n0xe5ebfc,\n0xe5ede8,\n0xe5f1f2,\n0xe5f220,\n0xe820ef,\n0xe8e520,\n0xe8e820,\n0xe8ff20,\n0xebe5ed,\n0xebe820,\n0xebfced,\n0xede020,\n0xede520,\n0xede8e5,\n0xede8ff,\n0xedee20,\n0xedeee2,\n0xee20e2,\n0xee20ef,\n0xee20f1,\n0xeee220,\n0xeee2e0,\n0xeee3ee,\n0xeee920,\n0xeeebfc,\n0xeeec20,\n0xeef1f2,\n0xefeeeb,\n0xeff0e5,\n0xeff0e8,\n0xeff0ee,\n0xf0e0e2,\n0xf0e5e4,\n0xf1f2e0,\n0xf1f2e2,\n0xf1f2e8,\n0xf1ff20,\n0xf2e5eb,\n0xf2ee20,\n0xf2eef0,\n0xf2fc20,\n0xf7f2ee,\n0xfbf520\n];\n};\nthis.name = function(det) {\nreturn \"windows-1251\";\n};\nthis.language = function() {\nreturn \"ru\";\n};\n}\n}\nclass windows_1256 extends sbcs {\nconstructor() {\nsuper();\nthis.byteMap = function() {\nreturn [\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x00,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x61,\n0x62,\n0x63,\n0x64,\n0x65,\n0x66,\n0x67,\n0x68,\n0x69,\n0x6a,\n0x6b,\n0x6c,\n0x6d,\n0x6e,\n0x6f,\n0x70,\n0x71,\n0x72,\n0x73,\n0x74,\n0x75,\n0x76,\n0x77,\n0x78,\n0x79,\n0x7a,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x61,\n0x62,\n0x63,\n0x64,\n0x65,\n0x66,\n0x67,\n0x68,\n0x69,\n0x6a,\n0x6b,\n0x6c,\n0x6d,\n0x6e,\n0x6f,\n0x70,\n0x71,\n0x72,\n0x73,\n0x74,\n0x75,\n0x76,\n0x77,\n0x78,\n0x79,\n0x7a,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x81,\n0x20,\n0x83,\n0x20,\n0x20,\n0x20,\n0x20,\n0x88,\n0x20,\n0x8a,\n0x20,\n0x9c,\n0x8d,\n0x8e,\n0x8f,\n0x90,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x98,\n0x20,\n0x9a,\n0x20,\n0x9c,\n0x20,\n0x20,\n0x9f,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0xaa,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0xb5,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0xc0,\n0xc1,\n0xc2,\n0xc3,\n0xc4,\n0xc5,\n0xc6,\n0xc7,\n0xc8,\n0xc9,\n0xca,\n0xcb,\n0xcc,\n0xcd,\n0xce,\n0xcf,\n0xd0,\n0xd1,\n0xd2,\n0xd3,\n0xd4,\n0xd5,\n0xd6,\n0x20,\n0xd8,\n0xd9,\n0xda,\n0xdb,\n0xdc,\n0xdd,\n0xde,\n0xdf,\n0xe0,\n0xe1,\n0xe2,\n0xe3,\n0xe4,\n0xe5,\n0xe6,\n0xe7,\n0xe8,\n0xe9,\n0xea,\n0xeb,\n0xec,\n0xed,\n0xee,\n0xef,\n0x20,\n0x20,\n0x20,\n0x20,\n0xf4,\n0x20,\n0x20,\n0x20,\n0x20,\n0xf9,\n0x20,\n0xfb,\n0xfc,\n0x20,\n0x20,\n0xff\n];\n};\nthis.ngrams = function() {\nreturn [\n0x20c7e1,\n0x20c7e4,\n0x20c8c7,\n0x20dae1,\n0x20dded,\n0x20e1e1,\n0x20e3e4,\n0x20e6c7,\n0xc720c7,\n0xc7c120,\n0xc7ca20,\n0xc7d120,\n0xc7e120,\n0xc7e1c3,\n0xc7e1c7,\n0xc7e1c8,\n0xc7e1ca,\n0xc7e1cc,\n0xc7e1cd,\n0xc7e1cf,\n0xc7e1d3,\n0xc7e1da,\n0xc7e1de,\n0xc7e1e3,\n0xc7e1e6,\n0xc7e1ed,\n0xc7e320,\n0xc7e420,\n0xc7e4ca,\n0xc820c7,\n0xc920c7,\n0xc920dd,\n0xc920e1,\n0xc920e3,\n0xc920e6,\n0xca20c7,\n0xcf20c7,\n0xcfc920,\n0xd120c7,\n0xd1c920,\n0xd320c7,\n0xda20c7,\n0xdae1ec,\n0xdded20,\n0xe120c7,\n0xe1c920,\n0xe1ec20,\n0xe1ed20,\n0xe320c7,\n0xe3c720,\n0xe3c920,\n0xe3e420,\n0xe420c7,\n0xe520c7,\n0xe5c720,\n0xe6c7e1,\n0xe6e420,\n0xec20c7,\n0xed20c7,\n0xed20e3,\n0xed20e6,\n0xedc920,\n0xedd120,\n0xede420\n];\n};\nthis.name = function(det) {\nreturn \"windows-1256\";\n};\nthis.language = function() {\nreturn \"ar\";\n};\n}\n}\nclass KOI8_R extends sbcs {\nconstructor() {\nsuper();\nthis.byteMap = function() {\nreturn [\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x00,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x61,\n0x62,\n0x63,\n0x64,\n0x65,\n0x66,\n0x67,\n0x68,\n0x69,\n0x6a,\n0x6b,\n0x6c,\n0x6d,\n0x6e,\n0x6f,\n0x70,\n0x71,\n0x72,\n0x73,\n0x74,\n0x75,\n0x76,\n0x77,\n0x78,\n0x79,\n0x7a,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x61,\n0x62,\n0x63,\n0x64,\n0x65,\n0x66,\n0x67,\n0x68,\n0x69,\n0x6a,\n0x6b,\n0x6c,\n0x6d,\n0x6e,\n0x6f,\n0x70,\n0x71,\n0x72,\n0x73,\n0x74,\n0x75,\n0x76,\n0x77,\n0x78,\n0x79,\n0x7a,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0xa3,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0xa3,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0x20,\n0xc0,\n0xc1,\n0xc2,\n0xc3,\n0xc4,\n0xc5,\n0xc6,\n0xc7,\n0xc8,\n0xc9,\n0xca,\n0xcb,\n0xcc,\n0xcd,\n0xce,\n0xcf,\n0xd0,\n0xd1,\n0xd2,\n0xd3,\n0xd4,\n0xd5,\n0xd6,\n0xd7,\n0xd8,\n0xd9,\n0xda,\n0xdb,\n0xdc,\n0xdd,\n0xde,\n0xdf,\n0xc0,\n0xc1,\n0xc2,\n0xc3,\n0xc4,\n0xc5,\n0xc6,\n0xc7,\n0xc8,\n0xc9,\n0xca,\n0xcb,\n0xcc,\n0xcd,\n0xce,\n0xcf,\n0xd0,\n0xd1,\n0xd2,\n0xd3,\n0xd4,\n0xd5,\n0xd6,\n0xd7,\n0xd8,\n0xd9,\n0xda,\n0xdb,\n0xdc,\n0xdd,\n0xde,\n0xdf\n];\n};\nthis.ngrams = function() {\nreturn [\n0x20c4cf,\n0x20c920,\n0x20cbc1,\n0x20cbcf,\n0x20cec1,\n0x20cec5,\n0x20cfc2,\n0x20d0cf,\n0x20d0d2,\n0x20d2c1,\n0x20d3cf,\n0x20d3d4,\n0x20d4cf,\n0x20d720,\n0x20d7cf,\n0x20dac1,\n0x20dcd4,\n0x20ded4,\n0xc1cec9,\n0xc1d4d8,\n0xc5ccd8,\n0xc5cec9,\n0xc5d3d4,\n0xc5d420,\n0xc7cf20,\n0xc920d0,\n0xc9c520,\n0xc9c920,\n0xc9d120,\n0xccc5ce,\n0xccc920,\n0xccd8ce,\n0xcec120,\n0xcec520,\n0xcec9c5,\n0xcec9d1,\n0xcecf20,\n0xcecfd7,\n0xcf20d0,\n0xcf20d3,\n0xcf20d7,\n0xcfc7cf,\n0xcfca20,\n0xcfccd8,\n0xcfcd20,\n0xcfd3d4,\n0xcfd720,\n0xcfd7c1,\n0xd0cfcc,\n0xd0d2c5,\n0xd0d2c9,\n0xd0d2cf,\n0xd2c1d7,\n0xd2c5c4,\n0xd3d120,\n0xd3d4c1,\n0xd3d4c9,\n0xd3d4d7,\n0xd4c5cc,\n0xd4cf20,\n0xd4cfd2,\n0xd4d820,\n0xd9c820,\n0xded4cf\n];\n};\nthis.name = function(det) {\nreturn \"KOI8-R\";\n};\nthis.language = function() {\nreturn \"ru\";\n};\n}\n}\n(\"use strict\");\nclass UTF_16BE {\nname() {\nreturn \"UTF-16BE\";\n}\nmatch(det) {\nvar input = det.fRawInput;\nif (\ninput.length >= 2 &&\n((input[0] & 0xff) == 0xfe && (input[1] & 0xff) == 0xff)\n) {\nreturn new Match(det, this, 100);\n}\nreturn null;\n}\n}\nclass UTF_16LE {\nname() {\nreturn \"UTF-16LE\";\n}\nmatch(det) {\nvar input = det.fRawInput;\nif (\ninput.length >= 2 &&\n((input[0] & 0xff) == 0xff && (input[1] & 0xff) == 0xfe)\n) {\nif (input.length >= 4 && input[2] == 0x00 && input[3] == 0x00) {\nreturn null;\n}\nreturn new Match(det, this, 100);\n}\nreturn null;\n}\n}\nclass UTF_32 {\nmatch(det) {\nvar input = det.fRawInput,\nlimit = (det.fRawLength / 4) * 4,\nnumValid = 0,\nnumInvalid = 0,\nhasBOM = false,\nconfidence = 0;\nif (limit == 0) {\nreturn null;\n}\nif (this.getChar(input, 0) == 0x0000feff) {\nhasBOM = true;\n}\nfor (var i = 0; i < limit; i += 4) {\nvar ch = this.getChar(input, i);\nif (ch < 0 || ch >= 0x10ffff || (ch >= 0xd800 && ch <= 0xdfff)) {\nnumInvalid += 1;\n} else {\nnumValid += 1;\n}\n}\nif (hasBOM && numInvalid == 0) {\nconfidence = 100;\n} else if (hasBOM && numValid > numInvalid * 10) {\nconfidence = 80;\n} else if (numValid > 3 && numInvalid == 0) {\nconfidence = 100;\n} else if (numValid > 0 && numInvalid == 0) {\nconfidence = 80;\n} else if (numValid > numInvalid * 10) {\nconfidence = 25;\n}\nreturn confidence == 0 ? null : new Match(det, this, confidence);\n}\n}\nclass UTF_32BE extends UTF_32 {\nconstructor() {\nsuper();\nthis.name = function() {\nreturn \"UTF-32BE\";\n};\nthis.getChar = function(input, index) {\nreturn (\n((input[index + 0] & 0xff) << 24) |\n((input[index + 1] & 0xff) << 16) |\n((input[index + 2] & 0xff) << 8) |\n(input[index + 3] & 0xff)\n);\n};\n}\n}\nclass UTF_32LE extends UTF_32 {\nconstructor() {\nsuper();\nthis.name = function() {\nreturn \"UTF-32LE\";\n};\nthis.getChar = function(input, index) {\nreturn (\n((input[index + 3] & 0xff) << 24) |\n((input[index + 2] & 0xff) << 16) |\n((input[index + 1] & 0xff) << 8) |\n(input[index + 0] & 0xff)\n);\n};\n}\n}\nclass UTF_8 {\nname() {\nreturn \"UTF-8\";\n}\nmatch(det) {\nvar hasBOM = false,\nnumValid = 0,\nnumInvalid = 0,\ninput = det.fRawInput,\ntrailBytes = 0,\nconfidence;\nif (\ndet.fRawLength >= 3 &&\n(input[0] & 0xff) == 0xef &&\n(input[1] & 0xff) == 0xbb &&\n(input[2] & 0xff) == 0xbf\n) {\nhasBOM = true;\n}\nfor (var i = 0; i < det.fRawLength; i++) {\nvar b = input[i];\nif ((b & 0x80) == 0) continue;\nif ((b & 0x0e0) == 0x0c0) {\ntrailBytes = 1;\n} else if ((b & 0x0f0) == 0x0e0) {\ntrailBytes = 2;\n} else if ((b & 0x0f8) == 0xf0) {\ntrailBytes = 3;\n} else {\nnumInvalid++;\nif (numInvalid > 5) break;\ntrailBytes = 0;\n}\nfor (;;) {\ni++;\nif (i >= det.fRawLength) break;\nif ((input[i] & 0xc0) != 0x080) {\nnumInvalid++;\nbreak;\n}\nif (--trailBytes == 0) {\nnumValid++;\nbreak;\n}\n}\n}\nconfidence = 0;\nif (hasBOM && numInvalid == 0) confidence = 100;\nelse if (hasBOM && numValid > numInvalid * 10) confidence = 80;\nelse if (numValid > 3 && numInvalid == 0) confidence = 100;\nelse if (numValid > 0 && numInvalid == 0) confidence = 80;\nelse if (numValid == 0 && numInvalid == 0) confidence = 10;\nelse if (numValid > numInvalid * 10) confidence = 25;\nelse return null;\nreturn new Match(det, this, confidence);\n}\n}\nvar fs = (() => {\nconst AD_TYPE_BINARY = 1\nconst readByteFile = ( path ) => {\nconst ADODB = require( 'ADODB.stream' )\nlet byte = ''\ntry {\nADODB.Type = AD_TYPE_BINARY\nADODB.Open()\nADODB.LoadFromFile( path )\nbyte = ADODB.Read()\n} catch ( error ) {\nconsole.log( `error readByteFile ${ error } ${ path }` )\n} finally {\nADODB.Close()\n}\nreturn byte\n}\nconst readFileSync = path => {\nconst byte = readByteFile( path );\nconst Buffer = require( \"buffer\" );\nreturn new Buffer( byte );\n};\nreturn { readFileSync };\n})();\nvar recognisers = [\nnew UTF_8(),\nnew UTF_16BE(),\nnew UTF_16LE(),\nnew UTF_32BE(),\nnew UTF_32LE(),\nnew sjis(),\nnew big5(),\nnew euc_jp(),\nnew euc_kr(),\nnew gb_18030(),\nnew ISO_2022_JP(),\nnew ISO_2022_KR(),\nnew ISO_2022_CN(),\nnew ISO_8859_1(),\nnew ISO_8859_2(),\nnew ISO_8859_5(),\nnew ISO_8859_6(),\nnew ISO_8859_7(),\nnew ISO_8859_8(),\nnew ISO_8859_9(),\nnew windows_1251(),\nnew windows_1256(),\nnew KOI8_R()\n];\nfunction detect(buffer, opts) {\nvar fByteStats = [];\nfor (var i = 0; i < 256; i++) fByteStats[i] = 0;\nfor (var i = buffer.length - 1; i >= 0; i--)\nfByteStats[buffer[i] & 0x00ff]++;\nvar fC1Bytes = false;\nfor (var i = 0x80; i <= 0x9f; i += 1) {\nif (fByteStats[i] != 0) {\nfC1Bytes = true;\nbreak;\n}\n}\nvar context = {\nfByteStats: fByteStats,\nfC1Bytes: fC1Bytes,\nfRawInput: buffer,\nfRawLength: buffer.length,\nfInputBytes: buffer,\nfInputLen: buffer.length\n};\nvar matches = recognisers\n.map(function(rec) {\nreturn rec.match(context);\n})\n.filter(function(match) {\nreturn !!match;\n})\n.sort(function(a, b) {\nreturn b.confidence - a.confidence;\n});\nif (opts && opts.returnAllMatches === true) {\nreturn matches;\n} else {\nreturn matches.length > 0 ? matches[0].name : null;\n}\n}\nfunction detectFile(filepath, opts, cb) {\nif (typeof opts === \"function\") {\ncb = opts;\nopts = undefined;\n}\nvar fd;\nvar handler = function(err, buffer) {\nif (fd) {\nfs.closeSync(fd);\n}\nif (err) return cb(err, null);\ncb(null, detect(buffer, opts));\n};\nif (opts && opts.sampleSize) {\n(fd = fs.openSync(filepath, \"r\")),\n(sample = Buffer.allocUnsafe(opts.sampleSize));\nfs.read(fd, sample, 0, opts.sampleSize, null, function(err) {\nhandler(err, sample);\n});\nreturn;\n}\nfs.readFile(filepath, handler);\n}\nfunction detectFileSync(filepath, opts) {\nif (opts && opts.sampleSize) {\nvar fd = fs.openSync(filepath, \"r\"),\nsample = Buffer.allocUnsafe(opts.sampleSize);\nfs.readSync(fd, sample, 0, opts.sampleSize);\nfs.closeSync(fd);\nreturn detect(sample, opts);\n}\nreturn detect(fs.readFileSync(filepath), opts);\n}\nfunction detectAll(buffer, opts) {\nif (typeof opts !== \"object\") {\nopts = {};\n}\nopts.returnAllMatches = true;\nreturn detect(buffer, opts);\n}\nfunction detectFileAll(filepath, opts, cb) {\nif (typeof opts === \"function\") {\ncb = opts;\nopts = undefined;\n}\nif (typeof opts !== \"object\") {\nopts = {};\n}\nopts.returnAllMatches = true;\ndetectFile(filepath, opts, cb);\n}\nfunction detectFileAllSync(filepath, opts) {\nif (typeof opts !== \"object\") {\nopts = {};\n}\nopts.returnAllMatches = true;\nreturn detectFileSync(filepath, opts);\n}\nmodule.exports = { detectFileSync };\n",
                    "mapping": {},
                    "name": "wes/chardet"
                },
                "day": {
                    "source": "class Day extends Date {\n[Symbol.toPrimitive] ( hint ) {\nif ( hint === 'number' ) return this.getTime()\nelse {\nlet year = this.getFullYear()\nlet month = ( \"0\" + ( this.getMonth() + 1 ) ).slice( -2 )\nlet date = ( \"0\" + ( this.getDate() ) ).slice( -2 )\nlet hours = ( \"0\" + ( this.getHours() ) ).slice( -2 )\nlet minutes = ( \"0\" + ( this.getMinutes() ) ).slice( -2 )\nlet seconds = ( \"0\" + ( this.getSeconds() ) ).slice( -2 )\nlet milliseconds = ( \"00\" + ( this.getMilliseconds() ) ).slice( -3 )\nreturn `${ year }/${ month }/${ date } ${ hours }:${ minutes }:${ seconds }.${ milliseconds }`\n}\n}\n}\nmodule.exports = Day",
                    "mapping": {},
                    "name": "wes/day"
                },
                "debug": {
                    "source": "const { named } = require( 'argv' )\nconst dump = require( 'dump' )\nconst debug = ( expression ) => {\nif ( 'debug' in named ) {\nconsole.log( `debug( ${ dump( expression ) } )` )\n}\nreturn expression\n}\nmodule.exports = debug",
                    "mapping": {},
                    "name": "wes/debug"
                },
                "dump": {
                    "source": "const dump = ( variable, color = true ) => {\nlet {\nbrightBlue: number,\nblue: boolean,\nbrightCyan: func,\nbrightYellow: string,\nbrightGreen: date,\nbrightRed: circle,\nyellow: regexp,\ngray: nul,\nsilver: uint8array,\nclear\n} = color ? console.ansi : {\nbrightBlue: '',\nblue,\nbrightCyan: '',\nbrightYellow: '',\nbrightGreen: '',\nbrightRed: '',\nbrightMagenta: '',\ngray: '',\nsilver: '',\nclear: ''\n}\nconst Day = require( 'day' )\nconst { LF, NONE, unindent } = require( 'text' )\nconst TAB = '    '\nlet level = 0\nlet Circle = new Map\nconst print = ( target, key ) => {\nif ( typeof target === 'function' ) return fn( target ) + clear\nif ( typeof target === 'string' ) return str( target )\nif ( typeof target === 'number' ) return number + target + clear\nif ( typeof target === 'boolean' ) return boolean + target + clear\nif ( target instanceof RegExp ) return regexp + target.toString() + clear\nif ( target instanceof Date ) return date + `new Date( '${ new Day( target ) }' )` + clear\nif ( target instanceof Uint8Array ) {\nlet res = []\ntarget.forEach( v => res.push( ( '00' + v.toString( 16 ) ).slice( -2 ) ) )\nreturn uint8array + '<Buffer ' + res.join( ' ' ) + ' >'\n}\nif ( target == null ) return nul + target + clear\nif ( Array.isArray( target ) ) {\nif ( Circle.has( target ) ) {\nlet res = circle + '<Circle::' +  Circle.get( target ) + '>' + clear\nreturn res\n}\nkey = key == null ? 'this' : key\nCircle.set( target, key )\nreturn arr( target, key )\n}\nif ( Object.prototype.toString.call( target ) === '[object Object]' ) {\nif ( Circle.has( target ) ) {\nlet res = circle + '<Circle::' + Circle.get( target ) + '>' + clear\nreturn res\n}\nkey = key == null ? 'this' : key\nCircle.set( target, key )\nreturn obj( target, key )\n}\n}\nconst fn = ( code ) => {\nlet source = unindent( code.toString() ).split( LF )\n.map( ( v, i ) => i === 0 ? v : TAB.repeat( level ) + v )\n.join( LF )\nreturn func + source + clear\n}\nconst str = ( text ) => {\nif ( color ) return string + `\\`${ text.replace( /`/g, '\\\\`' ) }\\`` + clear\nreturn string + `\"${ text.replace( /\\n/g, '\\\\n' ).replace( /\"/g, '\\\\\"' ) }\"` + clear\n}\nconst arr = ( list, key ) => {\nlevel++\nlet res = list.map( ( v, i ) => {\nlet r = TAB.repeat( level ) + print( v, key + `[${ i }]` )\nreturn r\n} )\nlevel--\nlet result =  0 < res.length ? LF + res.join( ',' + LF  ) + LF + TAB.repeat( level ) : NONE\nreturn '[' + result + ']'\n}\nconst obj = ( keys, key ) => {\nconst list = Object.keys( keys )\nlevel++\nlet res = list.map( v => {\nlet r = TAB.repeat( level ) + v + ': ' + print( keys[v], key + `[\"${ v }\"]` )\nreturn r\n} )\nlevel--\nlet result = res.length ? LF + res.join( ',' + LF  ) + LF  + TAB.repeat( level ) : NONE\nreturn '{' + result + '}'\n}\nreturn print( variable )\n}\nmodule.exports = dump\n",
                    "mapping": {},
                    "name": "wes/dump"
                },
                "enumerator": {
                    "source": "const { JScript } = require('sc')\nconst { TypeName } = require('VBScript')\nJScript.AddCode(`\nfunction enumerator ( collection ) {\nreturn new Enumerator( collection )\n}`)\nconst toArray = ( col ) => {\nlet res = []\nlet Enum = JScript.Run( 'enumerator', col )\nfor (; !Enum.atEnd(); Enum.moveNext()) {\nres.push( Enum.item() )\n}\nEnum.moveFirst()\nreturn res\n}\nconst Enumerator = new Proxy( () => {},{\nconstruct( target, args ) {\nconst res = []\nconst e = JScript.Run( 'enumerator', args[0] )\nfor ( ; !e.atEnd(); e.moveNext() ) {\nres.push( e.item() )\n}\nreturn res\n}\n} )\nclass Enumerators extends Array {\nconstructor( collection ) {\nlet res = []\nif (TypeName( collection ) === 'Long') {\nres = collection\n} else {\nres = toArray( collection )\n}\nsuper( ...res )\nlet i = 0\nObject.defineProperties( this, {\nmoveNext: { value() { i++ } },\natEnd: { value() { return !( i < this.length ) } },\nmoveFirst: { value() { return ( i = 0 ) } },\nitem: { value(num) { return num != null ? this[ num ] : this[ i ] } }\n} )\n}\nmap( callback ) {\nvar T, A, k\nif ( this == null ) {\nthrow new TypeError( 'this is null or not defined' )\n}\nvar O = Object( this )\nvar len = O.length >>> 0\nif ( typeof callback !== 'function' ) {\nthrow new TypeError(callback + ' is not a function' )\n}\nif ( arguments.length > 1) {\nT = arguments[1]\n}\nA = new Array(len)\nk = 0\nwhile (k < len) {\nvar kValue, mappedValue\nif ( k in O ) {\nkValue = O[k]\nmappedValue = callback.call(T, kValue, k, O)\nA[k] = mappedValue\n}\nk++\n}\nreturn A\n}\nfilter( func, thisArg ) {\n'use strict'\nif (\n!(\n( typeof func === 'Function' || typeof func === 'function' ) &&\nthis\n)\n)\nthrow new TypeError()\nvar len = this.length >>> 0,\nres = new Array( len ),\nt = this,\nc = 0,\ni = -1\nif ( thisArg === undefined ) {\nwhile ( ++i !== len ) {\nif (i in this) {\nif ( func( t[ i ], i, t ) ) {\nres[ c++ ] = t[ i ]\n}\n}\n}\n} else {\nwhile ( ++i !== len ) {\nif ( i in this ) {\nif ( func.call( thisArg, t[ i ], i, t ) ) {\nres[ c++ ] = t[ i ]\n}\n}\n}\n}\nres.length = c\nreturn res\n}\n}\nEnumerator.Enumerator = Enumerators\nmodule.exports = Enumerator",
                    "mapping": {},
                    "name": "wes/enumerator"
                },
                "event": {
                    "source": "class Event {\nconstructor() {\nthis.state = {}\n}\non(handler, fn) {\nlet state = this.state\nif (state[handler] == null) state[handler] = [fn]\nelse state[handler].push(fn)\nreturn fn\n}\nemit(handler, ...args) {\nlet state = this.state\nif (state[handler] == null) console.log(`handler: ${handler} not State`)\nelse state[handler].forEach((v) => v(...args))\n}\noff(handler, fn) {\nlet state = this.state\nif (state[handler] == null) console.log(`handler: ${handler} not State`)\nelse if (fn == null) state[handler] = null\nelse state[handler] = state[handler].filter((v) => v !== fn)\n}\nonce(handler, fn) {\nlet state = this.state\nconst _once = (...args) => {\nfn(...args)\nthis.off(handler, _once)\n}\nif (state[handler] == null) state[handler] = [_once]\nelse state[handler].push(_once)\nreturn _once\n}\n}\nmodule.exports = Event",
                    "mapping": {},
                    "name": "wes/event"
                },
                "filesystem": {
                    "source": "const ADODB = require('ADODB.Stream')\nconst chardet = require( 'chardet' )\nconst Buffer = require( 'buffer' )\nconst { Type } = require( 'VBScript' )\nconst VB_BYTE = 'vbByte[]'\nconst AD_TYPE_BINARY = 1\nconst AD_TYPE_TEXT = 2\nconst AD_SAVE_CREAE_OVER_WRITE = 2\nconst UTF_8 = 'UTF-8'\nconst UTF_8BOM = 'UTF-8BOM'\nconst UTF_8N = 'UTF-8N'\nconst readFileSync = ( filespec, options ) => {\nif ( options == null ) return new Buffer( readByteFile( filespec ) )\nreturn readTextFileSync( filespec, options )\n}\nconst readTextFileSync = ( filespec, options ) => {\nlet encoding = options != null ? options : chardet.detectFileSync( filespec )\nlet byte = readByteFile( filespec )\nlet buffer = new Buffer( byte )\nif ( encoding.toUpperCase() === UTF_8 && \nbuffer[0] === 0xef && buffer[1] === 0xfb && buffer[2] === 0xbb ) {\nbuffer = splitUtf8Bom( byte )\n}\nreturn Byte2Text( byte, encoding )\n}\nconst writeFileSync = ( filespec, data, options ) => {\nif ( data instanceof Buffer ) data = data.toByte()\nif ( Type( data ) === VB_BYTE ) {\ntry {\nADODB.Open()        \nADODB.Position = 0\nADODB.SetEOS()\nADODB.Type = AD_TYPE_BINARY\nADODB.Write( data )\nADODB.SaveToFile( filespec, AD_SAVE_CREAE_OVER_WRITE )\nADODB.Close()\nreturn `succeeded in writing '${ filespec }'`\n} catch ( error ) {\nconsole.log( `failed to writing '${ filespec }'\\n${ error }`)\n}\n}\nreturn writeTextFileSync( filespec, data, options )\n}\nconst writeTextFileSync = ( filespec, text, enc ) => {\nlet spliBbom = false\ntry {\nADODB.Open()\nADODB.Position = 0\nADODB.SetEOS()\nADODB.Type = AD_TYPE_TEXT\nif ( enc != null ) {\nconst _enc = enc.toUpperCase()\nif ( _enc.startsWith( UTF_8 ) ) ADODB.CharSet = UTF_8\nelse ADODB.CharSet = enc\nif ( _enc === UTF_8BOM ) bom = false\nelse if ( _enc === UTF_8N ) bom = true\nelse bom = false\n}\nADODB.WriteText( text )\nif ( spliBbom ) {\nADODB.Position = 0\nADODB.Type = AD_TYPE_BINARY\nADODB.Position = 3\nlet bytes = ADODB.Read()\nADODB.Position = 0\nADODB.SetEOS()\nADODB.Write( bytes )\n}\nADODB.SaveToFile( filespec, AD_SAVE_CREAE_OVER_WRITE )\n} catch ( error ) {\nreturn console.log( `failed to writing '${ filespec }'\\n${ error }`)\n} finally {\nADODB.Close()\n}\nreturn `succeeded in writing '${ filespec }'`\n}\n// util\nconst readByteFile = ( path ) => {\nlet byte = ''\ntry {\nADODB.Type = AD_TYPE_BINARY\nADODB.Open()\nADODB.LoadFromFile( path )\nbyte = ADODB.Read()\n} catch ( error ) {\nconsole.log( `error readByteFile ${ error } ${ path }` )\n} finally {\nADODB.Close()\n}\nreturn byte\n}\nconst Byte2Hex = ( byte ) => {\nlet elm = require('Msxml2.DOMDocument').createElement('elm')\nelm.dataType = 'bin.hex'\nelm.nodeTypedValue = byte\nreturn elm.text\n}\nconst Hex2Byte = ( hex ) => {\nlet elm = require('Msxml2.DOMDocument').createElement('elm')\nelm.dataType = 'bin.hex'\nelm.text = hex\nreturn elm.nodeTypedValue\n}\nconst splitUtf8Bom = ( byte ) => {\nreturn Hex2Byte( Byte2Hex( byte ).replace(/^efbbbf/, '') )\n}\nconst Byte2Text = ( byte, enc ) => {\ntry {\nADODB.Open()\nADODB.Type = AD_TYPE_BINARY\nADODB.Write( byte )\nADODB.Position = 0\nADODB.Type = AD_TYPE_TEXT\nADODB.Charset = enc\nreturn ADODB.ReadText()\n} catch (error) {\nconsole.log( `error Byte2Text ${ error }` )\n} finally {\nADODB.Close()\n}\n}\nmodule.exports = {\nreadFileSync,\nreadTextFileSync,\nwriteFileSync,\nwriteTextFileSync,\nreadByteFile,\nBuffer\n}",
                    "mapping": {},
                    "name": "wes/filesystem"
                },
                "io": {
                    "source": "const UTF8Encoding = require('System.Text.UTF8Encoding')\nconst ADODB = require('ADODB.Stream')\nconst DOMDocument = require('Msxml2.DOMDocument')\nconst SHIFT_JIS = 'Shift-JIS'\nconst UTF_8 = 'UTF-8'\nconst UTF_8BOM = 'UTF-8BOM'\nconst UTF_8N = 'UTF-8N'\nconst AD_TYPE_BINARY = 1\nconst AD_TYPE_TEXT = 2\nconst AD_SAVE_CREAE_OVER_WRITE = 2\nconst binary2UTF8 = ( binary ) => {\nreturn UTF8Encoding.GetString( binary )\n}\nconst binary2SJIS = ( binary ) => {\nlet source = ''\ntry {\nADODB.Open()\nADODB.Type = AD_TYPE_BINARY\nADODB.Write(binary)\nADODB.Position = 0\nADODB.Type = AD_TYPE_TEXT\nADODB.Charset = SHIFT_JIS\nsource = ADODB.ReadText()\n} catch (error) {\nconsole.log( `error binary2SJIS ${ error }` )\n} finally {\nADODB.Close()\n}\nreturn source\n}\nconst binary2Hex = ( binary ) => {\nlet hex = require('Msxml2.DOMDocument').createElement('hex')\nhex.dataType = 'bin.hex'\nhex.nodeTypedValue = binary\nreturn hex.text\n}\nconst Hex2binary = ( text ) => {\nlet hex = require('Msxml2.DOMDocument').createElement('hex')\nhex.dataType = 'bin.hex'\nhex.text = text\nreturn hex.nodeTypedValue\n}\nconst UTF82bynary = ( text ) => require( 'System.Text.UTF8Encoding' ).GetBytes_4( text )\nconst SJIS2binary = ( text ) => {\nconst stream = require( 'ADODB.Stream' )\nstream.Open()\nstream.Type = AD_TYPE_TEXT\nstream.Charset = SHIFT_JIS\nstream.WriteText( text )\nstream.Position = 0\nstream.Type = AD_TYPE_BINARY\nconst res = stream.Read()\nstream.Close()\nreturn res\n}\nconst ReadBinaryFile = ( path ) => {\nlet source = ''\ntry {\nADODB.Type = AD_TYPE_BINARY\nADODB.Open()\nADODB.LoadFromFile( path )\nsource = ADODB.Read()\n} catch ( error ) {\nconsole.log( `error ReadBinaryFile ${ error } ${ path }` )\n} finally {\nADODB.Close()\n}\nreturn source\n}\nconst autoGuessEncode = ( binary ) => {\nlet hex = binary2Hex( binary )\nif ( /^efbbbf.+/.test(hex) ) return UTF_8BOM\nlet hexes = []\nfor ( let i = 0; i < hex.length; i++ ) {\nhexes.push( Number( `0x${ hex[i] }${ hex[i + 1] }` ) )\ni++\n}\nlet len = hexes.length\nif ( len < 2 ) return UTF_8N\nlet sjis = 0\nlet utf8 = 0\nfor ( let i = 0; i < len - 2; i++ ) {\nconst hex1 = hexes[i]\nconst hex2 = hexes[i + 1]\nconst hex3 = hexes[i + 2]\nif (\n( ( 0x81 <= hex1 && hex1 <= 0x9f ) || ( 0xe0 <= hex1 && hex1 <= 0xfc ) ) &&\n( (0x40 <= hex2 && hex2 <= 0x7e ) || ( 0x80 <= hex2 && hex2 <= 0xfc ) )\n) sjis += 2\nif (0xc0 <= hex1 && hex1 <= 0xdf && (0x80 <= hex2 && hex2 <= 0xbf)) utf8 += 2\nelse if (\n0xe0 <= hex1 &&\nhex1 <= 0xef &&\n(0x80 <= hex2 && hex2 <= 0xbf) &&\n(0x80 <= hex3 && hex3 <= 0xbf)\n) {\nutf8 += 3\ni += 2\n}\ni++\n}\nreturn sjis > utf8 ? SHIFT_JIS : UTF_8N\n}\nconst read = ( filespec, enc ) => {\nlet binary = ReadBinaryFile( filespec )\nlet encode = enc || autoGuessEncode( binary )\nif (encode.toLowerCase() === SHIFT_JIS.toLowerCase()) return binary2SJIS( binary )\nif (encode.toLowerCase() === UTF_8BOM.toLowerCase() || encode.toLowerCase() === UTF_8.toLowerCase() ) {\nreturn binary2UTF8( Hex2binary( binary2Hex( binary ).replace(/^efbbbf/, '') ) )\n}\nreturn binary2UTF8(binary)\n}\nconst write = ( filespec, text, enc ) => {\nconst ADODB = require('ADODB.Stream')\ntry {\nADODB.Type = AD_TYPE_TEXT\nif ( enc == null ) ADODB.CharSet = enc = SHIFT_JIS\nelse if ( enc.toLowerCase() === UTF_8N.toLowerCase() ) ADODB.CharSet = UTF_8\nelse ADODB.CharSet = enc\nADODB.Open()\nADODB.WriteText( text )\nif ( enc.toLowerCase() === UTF_8N.toLowerCase() ) {\nADODB.Position = 0\nADODB.Type = AD_TYPE_BINARY\nADODB.Position = 3\nlet bytes = ADODB.Read()\nADODB.Position = 0\nADODB.SetEOS()\nADODB.Write( bytes )\n}\nADODB.SaveToFile( filespec, AD_SAVE_CREAE_OVER_WRITE )\n} catch ( error ) {\nreturn console.log( `failed to writing '${ filespec }'\\n${ error }`)\n} finally {\nADODB.Close()\n}\nreturn `succeeded in writing '${ filespec }'`\n}\nconst win32Sep = '\\\\'\nconst posixSep = '/'\nconst split = ( path ) => toPosixSep( path ).split( posixSep )\nconst toWin32Sep = ( path ) => path.split( posixSep ).join( win32Sep )\nconst toPosixSep = ( path ) => path.split( win32Sep ).join( posixSep )\nconst absolute = ( path ) => toPosixSep( FSO.GetAbsolutePathName( toWin32Sep( path ) ) )\nconst join = ( ...paths ) => absolute( toWin32Sep( paths.reduce( ( acc, curr ) => `${ acc }${ win32Sep }${ curr }` ) ) )\nconst dirname = ( path ) => absolute( FSO.GetParentFolderName( toWin32Sep( path ) ) )\nconst fileExists = ( path ) => FSO.FileExists( toWin32Sep( path ) )\nmodule.exports = {\nreadFileSync: read,\nwriteFileSync: write,\nautoGuessEncode,\nwin32Sep,\nposixSep,\ntoWin32Sep,\ntoPosixSep,\nabsolute,\nsplit,\njoin,\ndirname,\nfileExists,\nReadBinaryFile,\nbinary2UTF8,\nbinary2SJIS,\nbinary2Hex,\nHex2binary,\nUTF82bynary,\nSJIS2binary\n}\n",
                    "mapping": {},
                    "name": "wes/io"
                },
                "JScript": {
                    "source": "const { JScript } = require('sc')\nconst { TypeName } = require('VBScript')\nJScript.AddCode(`\nfunction enumerator ( collection ) {\nreturn new Enumerator( collection )\n}`)\nconst toArray = ( col ) => {\nlet res = []\nlet Enum = JScript.Run( 'enumerator', col )\nfor (; !Enum.atEnd(); Enum.moveNext()) {\nres.push( Enum.item() )\n}\nEnum.moveFirst()\nreturn res\n}\nclass Enumerator {\nconstructor( collection ) {\nlet res = []\nif (TypeName( collection ) === 'Long') {\nres = collection\n} else {\nres = toArray( collection )\n}\nreturn res\n}\n}\nmodule.exports = {\nEnumerator\n}",
                    "mapping": {},
                    "name": "wes/JScript"
                },
                "log": {
                    "source": "const dump = require( 'dump' )\nconst { green, clear } = console.ansi\nconst log = ( code ) => {\nlet res = dump( code() )\nconsole.log( 'log( ' + dump( code ) + ' )' + green + ' // => ' + clear + res )\n}\nmodule.exports = log",
                    "mapping": {},
                    "name": "wes/log"
                },
                "minitest": {
                    "source": "const { LF, TAB, REG_CRLF, SPACE } = require('text')\nlet depth = 0\nlet indent = ''\nlet rate = 4\nlet n = LF\nconst checkMark = '\\u2714'\nconst {\nbrightRed: red,\nbrightGreen: green,\nbrightYellow: yellow,\nbrightMagenta: pink,\ngray\n} = console.ansi\nconst describe = (title, fn) => {\ndepth++\nindent = SPACE.repeat(depth * rate)\nconsole.log(LF + indent + title)\nfn()\ndepth--\n}\nconst it = (message, fn) => {\ndepth++\nindent = SPACE.repeat(depth * rate)\nconst printCode = (code) => {\nlet source = code\n.toString()\n.split(TAB)\n.join('    ')\n.split(REG_CRLF)\nif (source.length < 2)\nreturn `${SPACE.repeat(indent + rate)}${source[0]}`\nsource[0] = `${source[source.length - 1].match(/^\\s+/)[0]}${source[0]}`\nconst sp = source.map((v) => v.match(/^\\s+/)[0].length)\nconst min = Math.min.apply(null, sp)\nreturn source\n.map((v) => {\nreturn `${SPACE.repeat((depth + 1) * rate)}${v.replace(\nSPACE.repeat(min),\n''\n)}`\n})\n.join('\\n')\n}\ntry {\nfn()\nconsole.log(`${indent}${gray}${message} ${green}${checkMark}`)\n} catch (e) {\nconsole.log(\n`${indent}${pink}${message}\\n${yellow}${printCode(\nfn\n)} ${red}// => ${e.message}${n}`\n)\n} finally {\ndepth--\n}\n}\nconst assert = (assertion) => {\nreturn assert.ok(assertion)\n}\nassert.ok = (assertion) => {\nlet res = typeof assertion === 'function' ? assertion() : assertion\nif (!res) throw new Error(res)\n}\nassert.ng = (assertion) => {\nlet res = typeof assertion === 'function' ? assertion() : assertion\nif (res) throw new Error(res)\n}\nmodule.exports = {\ndescribe,\nit,\nassert\n}\n",
                    "mapping": {},
                    "name": "wes/minitest"
                },
                "msxml": {
                    "source": "const msxmlId = [\n'MSXML2.DOMDocument.6.0',\n'MSXML2.DOMDocument.3.0',\n'Msxml2.DOMDocument',\n'Msxml.DOMDocument',\n'Microsoft.XMLDOM'\n]\nlet MSXML = null\nfor ( let i = 0; i < msxmlId.length; i++ ) {\ntry {\nMSXML = WScript.CreateObject( msxmlId[ i ] )\nbreak\n} catch ( e ) {\ncontinue\n}\n}\nif ( MSXML == null ) WScript.CreateObject( msxmlId[ 0 ] )\n//console.logPush( `${ console.ansi.gray }Get ${ require( 'VBScript' ).TypeName( MSXML ) }`)\nmodule.exports = MSXML\n",
                    "mapping": {},
                    "name": "wes/msxml"
                },
                "pathname": {
                    "source": "const win32Sep = '\\\\'\nconst posixSep = '/'\nconst split = ( path ) => toPosixSep( path ).split( posixSep )\nconst toWin32Sep = ( path ) => path.split( posixSep ).join( win32Sep )\nconst toPosixSep = ( path ) => path.split( win32Sep ).join( posixSep )\nconst absolute = ( path ) => toPosixSep( FSO.GetAbsolutePathName( toWin32Sep( path ) ) )\nconst join = ( ...paths ) => absolute( toWin32Sep( paths.reduce( ( acc, curr ) => `${ acc }${ win32Sep }${ curr }` ) ) )\nconst dirname = ( path ) => absolute( FSO.GetParentFolderName( toWin32Sep( path ) ) )\nconst extname = ( path ) => {\nlet temp = split( path )\nlet res = temp[ temp.length - 1 ].split( '.' )\nif ( res.length > 1 ) return '.' + res[ res.length - 1 ]\nreturn '' \n}\nconst relative = ( from, to ) => {\nlet _from = split( absolute( from ) )\nlet _to = split( absolute( to ) )\nif ( _from[0] !== _to[0] ) return toPosixSep( to )\nwhile ( _from[0] === _to[0] ) {\n_from.shift()\n_to.shift()\n}\n_from = _from.fill( '..' )\nreturn _from.concat( _to ).join( posixSep )\n}\nconst basename = ( path, ext ) => {\nconst temp = split( path )\nconst res = temp[ temp.length - 1 ]\nif ( ext != null && ext[0] === '.' && res.slice( -ext.length ) === ext) {\nreturn res.slice( 0, res.length - ext.length )\n} else {\nreturn res\n}\n}\nconst normalize = ( path ) => {\nlet temp = split( toPosixSep( path ).replace( /\\/+/g, posixSep ) )\nlet res = []\nlet parent = 0\nfor ( let i = temp.length - 1; i > -1 ; i-- ) {\nlet item = temp[i]\nif ( item === '.' ) continue\nelse if ( item === '..' ) parent++\nelse if ( parent ) parent--\nelse res.unshift( item )\n}\nif ( parent > 0 ) res.unshift( ( new Array( parent ) ).fill( '..' ) )\nif ( /^[a-z]:$/.test( res[0] ) ) res[0] = res[0].toUpperCase()\nreturn res.join( posixSep )\n}\nconst isAbsolute = ( path ) => absolute( path ) === normalize( path )\nmodule.exports = {\nwin32Sep,\nposixSep,\nsplit,\ntoWin32Sep,\ntoPosixSep,\nabsolute,\njoin,\ndirname,\nextname,\nrelative,\nbasename,\nnormalize,\nisAbsolute\n}\n",
                    "mapping": {},
                    "name": "wes/pathname"
                },
                "pipe": {
                    "source": "const { named } = require( 'argv' )\nconst dump = require( 'dump' )\nclass Pipe {\nconstructor(){\nlet reslut = ( value ) => {\nconst val = value instanceof Pipe ? value.dist() : value\nconst _pipe = ( v, f ) => new Pipe()( f( v ) )\nlet res = {\ndist() {\nreturn val\n},\nlog( fn ) {\nif ( typeof fn !== 'function' ) console.log( dump( val ) )\nelse fn( val )\nreturn new Pipe()( val )\n},\ndebug( fn ) {\nif ( 'debug' in named ) {\nif ( fn == null ) console.log( dump( val ) )\nelse console.log( fn( val ) )\n}\nreturn new Pipe()( val )\n},\npipe( ...args ) {\nargs.unshift( new Pipe()( val ) )\nreturn args.reduce( ( acc, curr ) => {\nreturn _pipe( acc.dist(), curr )\n} )\n}\n}\nreturn res\n}\nreturn reslut\n}\n}\nmodule.exports = new Pipe",
                    "mapping": {},
                    "name": "wes/pipe"
                },
                "sc": {
                    "source": "const ScriptControl = ( language ) => {\nconst sc = require( 'ScriptControl' )\nsc.Language = language\nreturn {\nAddCode( code ) {\nsc.AddCode( code )\n},\nRun( name, ...args ) {\nreturn sc.run( name, ...args )\n}\n}\n}\nmodule.exports = {\nJScript: ScriptControl( 'JScript' ),\nVBScript: ScriptControl( 'VBScript' )\n}\n",
                    "mapping": {},
                    "name": "wes/sc"
                },
                "text": {
                    "source": "const LF = '\\n'\nconst CR = '\\r'\nconst CRLF = CR + LF\nconst SPACE = ' '\nconst TAB = '\\t'\nconst NONE = ''\nconst REG_LINE_SEP = /\\r?\\n/g\nconst REG_LF = /\\n/g\nconst REG_CR = /\\r/g\nconst REG_CRLF = /\\r\\n/g\nconst REG_SPACE = /\\s/g\nconst REG_SPACES = /\\s+/g\nconst REG_BLANK_LINE = /^\\s+$/\nconst REG_TAB = /\\t/g\nconst REG_TABS = /\\t+/g\nconst INDNT = /^\\s+/\nconst trimStarts = (string) => {\nreturn string.replace(/^([\\s\\r\\n]+\\n)/, NONE)\n}\nconst trimEnds = (string) => {\nreturn string.replace(/(\\n[\\s\\r\\n]+)$/, NONE)\n}\nconst trim = (string) => {\nreturn trimStarts(trimEnds(string))\n}\nconst splitLines = (string, mod, start, end) => {\nconst sep = REG_CRLF.test(string) ? CRLF : LF\nreturn string\n.split(REG_LINE_SEP)\n.filter(\n(value, i) =>\n(start < i % mod && i % mod < end) || REG_BLANK_LINE.test(value)\n)\n.join(sep)\n}\nconst unindent = ( text ) => {\nconst lineBreak = text.includes( CRLF ) ? CRLF : LF\nlet line = text.split( REG_LINE_SEP )\nconst lastLineSpace = line[ line.length - 1 ].match( INDNT )\nif ( lastLineSpace == null ) return text\nreturn line.map( v => {\nreturn v.replace( lastLineSpace, '' )\n} ).join( lineBreak ).replace( /^\\s+/, '')\n}\nmodule.exports = {\nLF,\nCR,\nCRLF,\nSPACE,\nTAB,\nNONE,\nREG_LINE_SEP,\nREG_LF,\nREG_CR,\nREG_CRLF,\nREG_SPACE,\nREG_SPACES,\nREG_BLANK_LINE,\nREG_TAB,\nREG_TABS,\ntrimStarts,\ntrimEnds,\ntrim,\nsplitLines,\nunindent\n}",
                    "mapping": {},
                    "name": "wes/text"
                },
                "validation": {
                    "source": "const isValid = ( target, name, fn, throwError ) => {\nif ( fn( target ) ) return target\nif ( throwError ) throw new Error ( `${ target } is not ${ name }` )\nreturn false\n}\nconst isString = ( string, throwError ) => {\nlet fn = ( target ) => typeof target === 'string'\nreturn isValid( string, 'String', fn, throwError )\n}\nconst isNumber = ( number, throwError ) => {\nlet fn = ( target ) =>  typeof target === 'number'\nreturn isValid( number, 'Number', fn, throwError )\n}\nconst isFunction = ( func, throwError ) => {\nlet fn = ( target ) => typeof target === 'function'\nreturn isValid( func, 'Function', fn, throwError )\n}\nconst isArray = ( array, throwError ) => {\nlet fn = ( target ) => Array.isArray( target )\nreturn isValid( array, 'Array', fn, throwError )\n}\nconst isDate = ( date, throwError ) => {\nlet fn = ( target ) => target instanceof Date\nreturn isValid( date, 'Date', fn, throwError )\n}\nconst isRegExp = ( regexp, throwError ) => {\nlet fn = ( target ) => regexp instanceof RegExp\nreturn isValid( regexp, 'RegExp', fn, throwError )\n}\nconst isObject = ( object, throwError ) => {\nlet fn = ( target ) => target != null && Object.prototype.toString.call( target ) === '[object Object]'\nreturn isValid( object, 'Object', fn, throwError )\n}\nconst isClass = ( Class, classConstructor, throwError ) => {\nlet fn = ( target ) => target instanceof classConstructor\nreturn isValid( Class, classConstructor.name, fn, throwError )\n}\nmodule.exports = {\nisValid,\nisString,\nisNumber,\nisFunction,\nisArray,\nisDate,\nisRegExp,\nisObject,\nisClass\n}",
                    "mapping": {},
                    "name": "wes/validation"
                },
                "VBScript": {
                    "source": "const { VBScript } = require( 'sc' )\nVBScript.AddCode(`\nFunction getTypeName( obj )\ngetTypeName = TypeName( obj )\nEnd Function\n`)\nVBScript.AddCode(`\nFunction getVarType( obj )\ngetVarType = VarType( obj )\nEnd Function\n`)\nconst TypeName = ( object ) => VBScript.Run( 'getTypeName', object )\nconst VarType = ( object ) => VBScript.Run( 'getVarType', object )\nconst Type = ( object ) => {\nlet constant = [\n'vbEmpty', // 0\n'vbNull', // 1\n'vbInteger', // 2\n'vbLong', // 3\n'vbSingle', // 4\n'vbDouble', // 5\n'vbCurrency', // 6\n'vbDate', // 7\n'vbString', // 8\n'vbObject', // 9\n'vbError', // 10\n'vbBoolean', // 11\n'vbVariant', // 12\n'vbDataObject', // 13\n]\nconstant[17] = 'vbByte'\nconstant[8192] = 'vbArray'\nlet num = VarType( object )\nreturn  num > 8192 ? `${ constant[ num - 8192 ] }[]` : constant[ num ]\n}\nmodule.exports = {\nTypeName,\nVarType,\nType\n}\n",
                    "mapping": {},
                    "name": "wes/VBScript"
                },
                "version": {
                    "source": "const io = require( 'io' )\nconst packageJSON = JSON.parse( io.readFileSync( 'package.json' ) )\nmodule.exports = packageJSON.version",
                    "mapping": {},
                    "name": "wes/version"
                }
            }
        )
        function require(id) {
            if ( graph[id] != null ) {
                if ( !id.startsWith('{') ) stack.push( [null, null] )
                var code = graph[id].code
                var source = graph[id].source
                var mapping = graph[id].mapping
                function localRequire( name ) {
                    var res = mapping[name]
                    if ( res == null )
                        return require( name )
                    else
                        return require( res )
                }
                localRequire.stack = stack
                localRequire.graph = graph
                var module = {
                    exports: {}
                }
                var global = global || {}
                var process = {
                    env: {
                        NODE_DEBUG: 'semver'
                    },
                    argv: ['wes'].concat( argv ),
                    versions: { node: '4.0.0' },
                    platform: 'win32'
                }
                var fn =
                    typeof code === 'function'
                        ? code
                        : new Function(
                              'require',
                              'module',
                              'exports',
                              'console',
                              '__filename',
                              '__dirname',
                              'global',
                              'process',
                              '"use strict"\n' + source
                          )
                fn(
                    localRequire,
                    module,
                    module.exports,
                    console,
                    graph[id].name || graph[id],
                    ( stack[stack.length - 1][0] + '' ).replace( /\/[^\/]+$/, '' ),
                    global,
                    process
                )
                graph[id].code = fn
                stack.pop()
                return module.exports
            }
            try {
                return WScript.CreateObject( id )
            } catch ( e ) {}
            var io = require( 'io' )
            var curr = ( function() {
                var res
                if ( stack.length ) {
                    if ( ( res = stack[stack.length - 1] ) ) {
                        if ( res[0] ) {
                            return io.dirname( res[0] )
                        }
                    }
                }
                return io.toPosixSep( WShell.CurrentDirectory )
            })()
            var points = []
            if ( id.startsWith( io.posixSep ) ) curr = FSO.GetDriveName( curr )
            if (
                id.startsWith( io.posixSep ) ||
                id.startsWith( '.' + io.posixSep ) ||
                id.startsWith( '..' + io.posixSep )
            ) {
                points.push( io.join( curr, id ) )
            } else {
                points.push( io.join( curr, id ) )
                var hierarchy = io.split( curr )
                while ( hierarchy.length ) {
                    points.push(
                        io.absolute(
                            hierarchy.join( io.posixSep ) +
                                io.posixSep +
                                'node_modules' +
                                io.posixSep +
                                id
                        )
                    )
                    hierarchy.pop()
                }
            }
            var entry = null
            points.some( function( value ) {
                var res = null
                var pack = null
                if ( ( ( res = value), io.fileExists( res ) ) ) return ( entry = res )
                if ( ( ( res = value + '.js'), io.fileExists(res) ) )
                    return ( entry = res )
                if ( ( ( res = value + '.json' ), io.fileExists( res ) ) )
                    return (entry = res)
                if ( ( ( res = value + '/index.js' ), io.fileExists( res ) ) )
                    return ( entry = res )
                if (
                    ( ( pack = value + '/pack.json' ),
                    io.fileExists(pack) )
                ) {
                    var temp = JSON.parse(
                        io.readFileSync( pack )
                    ).main
                    if ( temp != null ) {
                        if ( ( ( res = io.join( value, temp ) ), io.fileExists( res ) ) )
                            return ( entry = res )
                        else if (
                            ( ( res = io.join( value, temp + '.js' ) ),
                            io.fileExists( res ) )
                        )
                            return ( entry = res )
                    }
                }
            })
            if ( entry == null)
                throw new Error(
                    "module not found\ncaller: '" +
                        curr +
                        "' => require '" +
                        id +
                        "'"
                )
            var loaded = history.find( function( val ) {
                return val[0] === entry
            } )
            if ( !!loaded ) {
                graph[ stack[stack.length - 1][1]].mapping[id] = loaded[1]
                stack.push( [entry, loaded[1]] )
                return require( loaded[1] )
            }
            var uuid = genUUID()
            graph[ stack[stack.length - 1][1]].mapping[id] = uuid
            stack.push( [entry, uuid] )
            graph[uuid] = {
                source: entry.endsWith( '.json' ) ?
                    "module.exports = " + io
                        .readFileSync( entry )
                        .replace( /\r/g, '' ) :
                    io
                        .readFileSync( entry )
                        .replace( /\r/g, '' )
                        .replace( /^#![^\n]+$/m, '' ),
                name: entry.match( /([^\/]+)$/ )[0] + '',
                mapping: {}
            }
            history.push( [entry, uuid] )
            return require( uuid )
        }
        var FSO = require('Scripting.FileSystemObject')
        var genUUID = function() {
            var typelib = require( 'Scriptlet.Typelib' )
            return typelib.GUID.replace( /[^\}]+$/, '' )
        }
        var Guid = genUUID()
        if ( !stack.length ) {
            stack.push( [null, Guid] )
            graph[Guid] = {
                code: function() {
                    return require( argv[0] )
                },
                mapping: {}
            }
        }
        require( Guid )
    }
} catch ( error ) {
    var errorStack = error.stack
    if (console) console.log( errorStack )
    else WScript.StdErr.WriteLine( errorStack )
}