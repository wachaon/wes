try {
    var WShell = WScript.CreateObject('WScript.Shell')
    var wes = {
        filestack: [WScript.ScriptFullName.split('\\').join('/')]
    }
    var argv = (function () {
        var module = { exports: {} }
        ;(function () {
            //main
            var Arguments = WScript.Arguments
            var argv = [WScript.FullName, WScript.ScriptFullName]
            var unnamed = []
            var named = {}

            var key = null
            for (var i = 0; i < Arguments.length; i++) {
                var arg = unescape(Arguments.Item(i))
                argv.push(arg)
                if (!arg.indexOf('--') && arg.length > 2) key = setLongNamed(arg, key)
                else if (!arg.indexOf('-')) key = setShortNamed(arg, key)
                else key = setUnNamed(arg, key)
            }
            if (key) named[key] = true

            // methods
            function get(name) {
                if (name in named) return named[name]
                else false
            }

            function has(name, expect) {
                var value = null
                if (name in named) {
                    value = named[name]
                    if (arguments.length > 1) return value === expect
                    return true
                }
                return false
            }

            function security() {
                return has('safe')
                    ? security.safe
                    : has('usual')
                    ? security.usual
                    : has('unsafe')
                    ? security.unsafe
                    : has('dangerous')
                    ? security.dangerous
                    : 0
            }

            ;(security.safe = -1), (security.usual = 0), (security.unsafe = 1), (security.dangerous = 2)

            function allow(borderline) {
                return borderline <= security()
            }

            function stringify(args) {
                var params = args != null ? args : { unnamed: unnamed, named: named }
                var res = []
                var short = []
                for (var name in params.named) {
                    var target = params.named[name]
                    if (name.length === 1) {
                        if (target === true) short.push(name)
                        else res.push('-' + key + ' ' + inner(escape(String(target))))
                    } else {
                        if (target === true) res.push('--' + escape(name))
                        else res.push('--' + key + '=' + inner(escape(String(target))))
                    }
                }

                if (short.length) res.unshift('-' + short.join(''))
                if (params.unnamed.length) res.unshift(params.unnamed.join(' '))
                // console.log('-----------\n' + inspect(res))
                return res.join(' ')
            }

            // bind
            argv.unnamed = unnamed
            argv.named = named
            argv.get = get
            argv.has = has
            argv.security = security
            argv.allow = allow
            argv.stringify = stringify

            module.exports = argv

            // util
            function setLongNamed(arg, name) {
                var rNamed = /^\-\-([^=]+)=?([^=]+)?$/
                if (name != null) named[name] = true
                var _named = rNamed.exec(arg)
                name = _named[1]
                var value = _named[2] || null
                if (value) {
                    named[name] = typecast(inner(value))
                    name = null
                }
                return name
            }

            function setShortNamed(arg, name) {
                var args = arg.substring(1).split('')
                for (var j = 0; j < args.length; j++) {
                    if (name != null) named[name] = true
                    name = args[j]
                }
                return name
            }

            function setUnNamed(arg, name) {
                var _arg = typecast(arg)
                if (name != null) named[name] = _arg
                else unnamed.push(_arg)
                return null
            }

            function typecast(arg) {
                var rBoolean = /true|false/i
                if (rBoolean.test(arg)) {
                    if (arg.toLowerCase() === 'true') return true
                    else return false
                }
                if (!isNaN(arg)) return Number(arg)
                return arg
            }

            function inner(value) {
                if (!value.indexOf('"') && value.indexOf('"') === value.length - 1)
                    return value.substring(1, value.lenght - 1)
                return value
            }
        })()
        return module.exports
    })()

    var console = (function () {
        var module = { exports: {} }
        ;(function () {
            var NONE = ''
            var SPACE = ' '
            var rSPECIFIER = /(%[sdfoj])/i
            var rSEQ = /\u001B\[[\d;]+m/g

            function color(red, green, blue) {
                var args = Array.prototype.slice.call(arguments)
                if (args.length === 1 && args[0].startsWith('#')) {
                    red = parseInt(args[0].slice(1, 3), 16)
                    green = parseInt(args[0].slice(3, 5), 16)
                    blue = parseInt(args[0].slice(5, 7), 16)
                }
                return '\u001B[38;2;' + red + ';' + green + ';' + blue + 'm'
            }

            function bgColor(red, green, blue) {
                var args = Array.prototype.slice.call(arguments)
                if (args.length === 1 && args[0].startsWith('#')) {
                    red = parseInt(args[0].slice(1, 3), 16)
                    green = parseInt(args[0].slice(3, 5), 16)
                    blue = parseInt(args[0].slice(5, 7), 16)
                }
                return '\u001B[48;2;' + red + ';' + green + ';' + blue + 'm'
            }

            var ansi = {
                clear: '\u001B[0m',
                bold: '\u001B[1m',
                underscore: '\u001B[4m',
                blink: '\u001B[5m',
                reverse: '\u001B[7m',
                concealed: '\u001B[8m',

                black: '\u001B[30m',
                red: '\u001B[31m',
                green: '\u001B[32m',
                yellow: '\u001B[33m',
                blue: '\u001B[34m',
                magenta: '\u001B[35m',
                cyan: '\u001B[36m',
                silver: '\u001B[37m',

                gray: '\u001B[90m',
                brightRed: '\u001B[91m',
                brightGreen: '\u001B[92m',
                brightYellow: '\u001B[93m',
                brightBlue: '\u001B[94m',
                brightMagenta: '\u001B[95m',
                brightCyan: '\u001B[96m',
                white: '\u001B[97m',

                bgBlack: '\u001B[40m',
                bgRed: '\u001B[41m',
                bgGreen: '\u001B[42m',
                bgYellow: '\u001B[43m',
                bgBlue: '\u001B[44m',
                bgMagenta: '\u001B[45m',
                bgCyan: '\u001B[46m',
                bgSilver: '\u001B[47m',

                bgGray: '\u001B[100m',
                bgBrightRed: '\u001B[101m',
                bgBrightGreen: '\u001B[102m',
                bgBrightYellow: '\u001B[103m',
                bgBrightBlue: '\u001B[104m',
                bgBrightMagenta: '\u001B[105m',
                bgBrightCyan: '\u001B[106m',
                bgWhite: '\u001B[107m',

                color: color,
                bgColor: bgColor
            }

            function normalize(arg) {
                var args = Array.prototype.slice.call(arg)
                if (args.length === 0) return
                var message = args.shift()
                if (args.length === 0) return message
                while (rSPECIFIER.test(message) && args.length > 0) {
                    var val = args.shift()
                    message = message.replace(rSPECIFIER, function ($1) {
                        if ($1 === '%s' || $1 === '%S') return String(val)
                        if ($1 === '%d' || $1 === '%D') return parseInt(val, 10)
                        if ($1 === '%f' || $1 === '%F') return Number(val)
                        if ($1 === '%o') return req('inspect')(val)
                        if ($1 === '%O') return req('inspect')(val, { indent: true, colors: true })
                        if ($1 === '%j') {
                            try {
                                return JSON.stringify(val)
                            } catch (error) {
                                return val
                            }
                        }
                        if ($1 === '%J') {
                            try {
                                return JSON.stringify(val, null, 2)
                            } catch (error) {
                                return val
                            }
                        }
                        return $1
                    })
                }
                if (argv.length > 0) message += args.join(SPACE)
                return message
            }

            function log() {
                var message = normalize(arguments)
                var monotoneMessage = removeColor(message)
                if (argv.has('monotone')) WScript.StdOut.WriteLine(monotoneMessage)
                else WScript.StdErr.WriteLine(message + ansi.clear)
                return monotoneMessage
            }

            function print() {
                var message = normalize(arguments)
                var monotoneMessage = removeColor(message)
                if (argv.has('monotone')) WScript.StdOut.Write(monotoneMessage)
                else WScript.StdErr.Write(message + ansi.clear)
                return monotoneMessage
            }

            function debug() {
                var isDebugOption = argv.has('debug')
                if (!isDebugOption) return
                var message = normalize(arguments)
                var monotoneMessage = removeColor(message)
                if (argv.has('monotone')) WScript.StdOut.WriteLine('DEBUG: ' + monotoneMessage)
                else WScript.StdErr.WriteLine('\u001B[91m\u001B[7mDEBUG:\u001B[0m ' + message + ansi.clear)
                return monotoneMessage
            }

            function removeColor(message) {
                if (typeof message === 'string') return message.replace(rSEQ, NONE)
                return message
            }

            module.exports = {
                log: log,
                print: print,
                debug: debug,
                normalize: normalize,
                ansi: ansi
            }
        })()
        return module.exports
    })()

    if (!argv.has('engine', 'Chakra')) {
        var cpu =
            WShell.ExpandEnvironmentStrings('%PROCESSOR_ARCHITECTURE%') !== 'x86'
                ? '{%}windir{%}\\SysWOW64\\cscript'
                : 'cscript'
        var nologo = '//nologo'
        var engin = '--engine=Chakra'
        var chakra = '//E:{{}1b7cd997-e5ff-4932-a7a6-2a9e636da385{}}'
        var monotone = argv.has('monotone') ? '' : '| echo off'
        var enter = '{ENTER}'

        var parameters = []
        for (var i = 0; i < WScript.Arguments.length; i++) {
            parameters.push(escape(WScript.Arguments(i)).replace(/%/g, '{%}'))
        }

        WShell.SendKeys(
            [cpu, WScript.ScriptFullName, parameters.join(' '), nologo, chakra, engin, monotone, enter].join(' ')
        )

        WScript.Quit()
    } else {
        console.log('') // Send a line

        var Modules = {
            "argv": {
                "source": "//main\nvar Arguments = WScript.Arguments\nvar argv = [WScript.FullName, WScript.ScriptFullName]\nvar unnamed = []\nvar named = {}\n\nvar key = null\nfor (var i = 0; i < Arguments.length; i++) {\n    var arg = unescape(Arguments.Item(i))\n    argv.push(arg)\n    if (!arg.indexOf('--') && arg.length > 2) key = setLongNamed(arg, key)\n    else if (!arg.indexOf('-')) key = setShortNamed(arg, key)\n    else key = setUnNamed(arg, key)\n}\nif (key) named[key] = truez\n\n// methods\nfunction get(name) {\n    if (name in named) return named[name]\n    else false\n}\n\nfunction has(name, expect) {\n    var value = null\n    if (name in named) {\n        value = named[name]\n        if (arguments.length > 1) return value === expect\n        return true\n    }\n    return false\n}\n\nfunction security() {\n    return has('safe')\n        ? security.safe\n        : has('usual')\n        ? security.usual\n        : has('unsafe')\n        ? security.unsafe\n        : has('dangerous')\n        ? security.dangerous\n        : 0\n}\n\n;(security.safe = -1), (security.usual = 0), (security.unsafe = 1), (security.dangerous = 2)\n\nfunction allow(borderline) {\n    return borderline <= security()\n}\n\nfunction stringify(args) {\n    var params = args != null ? args : { unnamed: unnamed, named: named }\n    var res = []\n    var short = []\n    for (var name in params.named) {\n        var target = params.named[name]\n        if (name.length === 1) {\n            if (target === true) short.push(name)\n            else res.push('-' + key + ' ' + inner(escape(String(target))))\n        } else {\n            if (target === true) res.push('--' + escape(name))\n            else res.push('--' + key + '=' + inner(escape(String(target))))\n        }\n    }\n\n    if (short.length) res.unshift('-' + short.join(''))\n    if (params.unnamed.length) res.unshift(params.unnamed.join(' '))\n    return res.join(' ')\n}\n\n// bind\nargv.unnamed = unnamed\nargv.named = named\nargv.get = get\nargv.has = has\nargv.security = security\nargv.allow = allow\nargv.stringify = stringify\n\nmodule.exports = argv\n\n// util\nfunction setLongNamed(arg, name) {\n    var rNamed = /^\\-\\-([^=]+)=?([^=]+)?$/\n    if (name != null) named[name] = true\n    var _named = rNamed.exec(arg)\n    name = _named[1]\n    var value = _named[2] || null\n    if (value) {\n        named[name] = typecast(inner(value))\n        name = null\n    }\n    return name\n}\n\nfunction setShortNamed(arg, name) {\n    var args = arg.substring(1).split('')\n    for (var j = 0; j < args.length; j++) {\n        if (name != null) named[name] = true\n        name = args[j]\n    }\n    return name\n}\n\nfunction setUnNamed(arg, name) {\n    var _arg = typecast(arg)\n    if (name != null) named[name] = _arg\n    else unnamed.push(_arg)\n    return null\n}\n\nfunction typecast(arg) {\n    var rBoolean = /true|false/i\n    if (rBoolean.test(arg)) {\n        if (arg.toLowerCase() === 'true') return true\n        else return false\n    }\n    if (!isNaN(arg)) return Number(arg)\n    return arg\n}\n\nfunction inner(value) {\n    if (!value.indexOf('\"') && value.indexOf('\"') === value.length - 1) return value.substring(1, value.lenght - 1)\n    return value\n}\n",
                "mapping": {},
                "path": "{wes}/argv"
            },
            "browser": {
                "source": "const { isRegExp, isNumber, isString } = require('typecheck')\nconst blank = 'about:blank'\nconst { NONE } = require('text')\n\nfunction browser(callback, options) {\n    const CR = '\\u001B[1G'\n    const display = ['|', '/', '-', '\\\\']\n    let count = 0\n    let state = NONE\n\n    let op = {\n        home: blank,\n        resulr: {},\n        invisible: false,\n        exception: function () {}\n    }\n\n    if (options != null) op = Object.assign(op, options)\n\n    function wait(app) {\n        if (isNumber(app)) {\n            const time = Math.random() * app\n            const finish = new Date().getTime() + app / 2 + time\n\n            while (Date.now() < finish) {\n                console.print(CR + 'waiting ' + display[count++ % 4])\n                WScript.Sleep(50)\n            }\n        } else {\n            while (app.Busy || app.readystate != 4) {\n                console.print(CR + 'processing ' + display[count++ % 4])\n                WScript.Sleep(50)\n            }\n        }\n        console.print('%s              %s', CR, CR)\n    }\n\n    const app = require('InternetExplorer.Application')\n    app.Visible = !op.invisible\n    app.Navigate(op.home)\n    let result = op.result\n\n    const location = (function browser_location(url) {\n        let res = []\n        return {\n            back(url) {\n                // url isString\n                if (isString(url)) {\n                    for (let i = res.length; i; i--) {\n                        if (res[i - 1].startsWith(url)) {\n                            res.length = i\n                            return res[i - 1]\n                        }\n                    }\n                    return blank\n                } else if (isNumber(url)) {\n                    // url isNumber\n                    if (res.length < url) return blank\n                    let num = res.length - url\n                    res.length = num\n                    return res[num - 1]\n                }\n            },\n            push(url) {\n                if (res[res.length - 1] === url) {\n                } else res.push(url)\n            },\n            history() {\n                return [...res]\n            }\n        }\n    })()\n\n    try {\n        wait(app)\n\n        const events = new Map()\n        const event = {\n            on(target, fn) {\n                if (events.has(target)) events.get(target).push(fn)\n                else events.set(target, [fn])\n            },\n            emit(url, ...params) {\n                events.forEach((callbacks, evaluation) => {\n                    if ((isRegExp(evaluation) && evaluation.test(url)) || String(evaluation) === url)\n                        callbacks.forEach((fn) => fn(url, ...params))\n                })\n            }\n        }\n\n        event.on(/./, (url) => location.push(url))\n\n        callback(app, event, result, wait, location)\n\n        while (true) {\n            wait(app)\n            const url = app.document.location.href\n            if (state === url) {\n                console.print(CR + 'polling ' + display[count++ % 4])\n                WScript.Sleep(50)\n                continue\n            }\n            console.print('%s         %s', CR, CR)\n\n            state = url\n            wait(app)\n            event.emit(url)\n        }\n    } catch (error) {\n        console.print('%s         %s', CR, CR)\n        try {\n            app.Document\n        } catch (err) {\n            const er = op.exception(error, result, null)\n            if (er != null) throw er\n        }\n        const er = op.exception(error, result, app)\n        if (er != null) throw er\n    }\n}\n\nmodule.exports = browser\n",
                "mapping": {},
                "path": "{wes}/browser"
            },
            "buffer": {
                "source": "const { Type } = require('VBScript')\nconst { ByteToHex, HexToByte, Uint8ToHex, HexToUint8 } = require('hex')\nconst { isString, isArray } = require('typecheck')\n\nclass Buff extends Uint8Array {\n    constructor(data) {\n        if (data instanceof Buff) return data\n        else if (Type(data) === 'vbByte[]') super(HexToUint8(ByteToHex(data)))\n        else if (data instanceof Uint8Array) super(data)\n        else if (isString(data)) {\n            const uint16Array = Uint16Array.from(data, (c) => c.charCodeAt(0))\n            const len = uint16Array.length\n            const uint8Array = new Uint8Array(len * 2)\n            for (let i = 0, j = 0; i < len; ++i, j += 2) {\n                uint8Array[j] = (uint16Array[i] & 0xff00) >> 8\n                uint8Array[j + 1] = uint16Array[i] & 0x00ff\n            }\n            super(uint8Array)\n        } else if (isArray(data)) super(data)\n        else throw new TypeError('argument type that can be passed to the constructor is a `string`, `Buffer`, `byte[]`, or `Array`')\n    }\n    toByte() {\n        return HexToByte(Uint8ToHex(this))\n    }\n    static from(date) {\n        return new Buff(date)\n    }\n}\n\nmodule.exports = Buff\n",
                "mapping": {},
                "path": "{wes}/buffer"
            },
            "bundle": {
                "source": "const argv = require('argv')\nconst { relative, posixSep, CurrentDirectory } = require('pathname')\nconst { writeTextFileSync } = require('filesystem')\nconst { rLINE_SEP, LF } = require('text')\n\nconst cd = CurrentDirectory\nconst dir = cd.split(posixSep).pop()\n\nconst host = 'wes'\nif (dir === host) throw new Error(`Cannot bundle if the current directory is \"${host}\"`)\n\nconst { parse, stringify } = JSON\nconst bracket = '{'\nfunction bundle(_modules) {\n    const modules = parse(stringify(_modules))\n    const mods = {}\n    Object.keys(modules)\n        .filter((key) => key.startsWith(bracket))\n        .map((key) => {\n            const mod = modules[key]\n            mod.path = `{${dir}}${posixSep}${relative(cd, mod.path)}`\n            delete mod.module\n            delete mod.exports\n            return key\n        })\n        .forEach((key) => (mods[key] = modules[key]))\n    return mods\n}\n\nrequire(argv.unnamed[1])\n\nconst mods = bundle(wes.Modules)\nconst json = '.json'\nconsole.log(writeTextFileSync(dir + json, stringify(mods, null, 4).replace(rLINE_SEP, LF), 'UTF-8N'))\n",
                "mapping": {},
                "path": "{wes}/bundle"
            },
            "chardet": {
                "source": "// chardet https://github.com/runk/node-chardet\nvar Match = function (det, rec, confidence, name, lang) {\n    this.confidence = confidence\n    this.name = name || rec.name(det)\n    this.lang = lang\n}\nclass ISO_2022 {\n    match(det) {\n        var i, j\n        var escN\n        var hits = 0\n        var misses = 0\n        var shifts = 0\n        var quality\n        var text = det.fInputBytes\n        var textLen = det.fInputLen\n        scanInput: for (i = 0; i < textLen; i++) {\n            if (text[i] == 0x1b) {\n                checkEscapes: for (escN = 0; escN < this.escapeSequences.length; escN++) {\n                    var seq = this.escapeSequences[escN]\n                    if (textLen - i < seq.length) continue checkEscapes\n                    for (j = 1; j < seq.length; j++) if (seq[j] != text[i + j]) continue checkEscapes\n                    hits++\n                    i += seq.length - 1\n                    continue scanInput\n                }\n                misses++\n            }\n            if (text[i] == 0x0e || text[i] == 0x0f) shifts++\n        }\n        if (hits == 0) return null\n        quality = (100 * hits - 100 * misses) / (hits + misses)\n        if (hits + shifts < 5) quality -= (5 - (hits + shifts)) * 10\n        return quality <= 0 ? null : new Match(det, this, quality)\n    }\n}\nclass ISO_2022_JP extends ISO_2022 {\n    constructor() {\n        super()\n        this.name = function () {\n            return 'ISO-2022-JP'\n        }\n        this.escapeSequences = [\n            [0x1b, 0x24, 0x28, 0x43],\n            [0x1b, 0x24, 0x28, 0x44],\n            [0x1b, 0x24, 0x40],\n            [0x1b, 0x24, 0x41],\n            [0x1b, 0x24, 0x42],\n            [0x1b, 0x26, 0x40],\n            [0x1b, 0x28, 0x42],\n            [0x1b, 0x28, 0x48],\n            [0x1b, 0x28, 0x49],\n            [0x1b, 0x28, 0x4a],\n            [0x1b, 0x2e, 0x41],\n            [0x1b, 0x2e, 0x46]\n        ]\n    }\n}\nclass ISO_2022_KR extends ISO_2022 {\n    constructor() {\n        super()\n        this.name = function () {\n            return 'ISO-2022-KR'\n        }\n        this.escapeSequences = [[0x1b, 0x24, 0x29, 0x43]]\n    }\n}\nclass ISO_2022_CN extends ISO_2022 {\n    constructor() {\n        super()\n        this.name = function () {\n            return 'ISO-2022-CN'\n        }\n        this.escapeSequences = [\n            [0x1b, 0x24, 0x29, 0x41],\n            [0x1b, 0x24, 0x29, 0x47],\n            [0x1b, 0x24, 0x2a, 0x48],\n            [0x1b, 0x24, 0x29, 0x45],\n            [0x1b, 0x24, 0x2b, 0x49],\n            [0x1b, 0x24, 0x2b, 0x4a],\n            [0x1b, 0x24, 0x2b, 0x4b],\n            [0x1b, 0x24, 0x2b, 0x4c],\n            [0x1b, 0x24, 0x2b, 0x4d],\n            [0x1b, 0x4e],\n            [0x1b, 0x4f]\n        ]\n    }\n}\nfunction binarySearch(arr, searchValue) {\n    function find(arr, searchValue, left, right) {\n        if (right < left) return -1\n        var mid = Math.floor((left + right) >>> 1)\n        if (searchValue > arr[mid]) return find(arr, searchValue, mid + 1, right)\n        if (searchValue < arr[mid]) return find(arr, searchValue, left, mid - 1)\n        return mid\n    }\n    return find(arr, searchValue, 0, arr.length - 1)\n}\nfunction IteratedChar() {\n    this.charValue = 0\n    this.index = 0\n    this.nextIndex = 0\n    this.error = false\n    this.done = false\n    this.reset = function () {\n        this.charValue = 0\n        this.index = -1\n        this.nextIndex = 0\n        this.error = false\n        this.done = false\n    }\n    this.nextByte = function (det) {\n        if (this.nextIndex >= det.fRawLength) {\n            this.done = true\n            return -1\n        }\n        var byteValue = det.fRawInput[this.nextIndex++] & 0x00ff\n        return byteValue\n    }\n}\nclass mbcs {\n    match(det) {\n        var singleByteCharCount = 0,\n            doubleByteCharCount = 0,\n            commonCharCount = 0,\n            badCharCount = 0,\n            totalCharCount = 0,\n            confidence = 0\n        var iter = new IteratedChar()\n        detectBlock: {\n            for (iter.reset(); this.nextChar(iter, det); ) {\n                totalCharCount++\n                if (iter.error) {\n                    badCharCount++\n                } else {\n                    var cv = iter.charValue & 0xffffffff\n                    if (cv <= 0xff) {\n                        singleByteCharCount++\n                    } else {\n                        doubleByteCharCount++\n                        if (this.commonChars != null) {\n                            if (binarySearch(this.commonChars, cv) >= 0) {\n                                commonCharCount++\n                            }\n                        }\n                    }\n                }\n                if (badCharCount >= 2 && badCharCount * 5 >= doubleByteCharCount) {\n                    break detectBlock\n                }\n            }\n            if (doubleByteCharCount <= 10 && badCharCount == 0) {\n                if (doubleByteCharCount == 0 && totalCharCount < 10) {\n                    confidence = 0\n                } else {\n                    confidence = 10\n                }\n                break detectBlock\n            }\n            if (doubleByteCharCount < 20 * badCharCount) {\n                confidence = 0\n                break detectBlock\n            }\n            if (this.commonChars == null) {\n                confidence = 30 + doubleByteCharCount - 20 * badCharCount\n                if (confidence > 100) {\n                    confidence = 100\n                }\n            } else {\n                var maxVal = Math.log(parseFloat(doubleByteCharCount) / 4)\n                var scaleFactor = 90.0 / maxVal\n                confidence = Math.floor(Math.log(commonCharCount + 1) * scaleFactor + 10)\n                confidence = Math.min(confidence, 100)\n            }\n        }\n        return confidence == 0 ? null : new Match(det, this, confidence)\n    }\n    nextChar(iter, det) {}\n}\nclass sjis extends mbcs {\n    constructor() {\n        super()\n        this.name = function () {\n            return 'Shift-JIS'\n        }\n        this.language = function () {\n            return 'ja'\n        }\n        this.commonChars = [\n            0x8140,\n            0x8141,\n            0x8142,\n            0x8145,\n            0x815b,\n            0x8169,\n            0x816a,\n            0x8175,\n            0x8176,\n            0x82a0,\n            0x82a2,\n            0x82a4,\n            0x82a9,\n            0x82aa,\n            0x82ab,\n            0x82ad,\n            0x82af,\n            0x82b1,\n            0x82b3,\n            0x82b5,\n            0x82b7,\n            0x82bd,\n            0x82be,\n            0x82c1,\n            0x82c4,\n            0x82c5,\n            0x82c6,\n            0x82c8,\n            0x82c9,\n            0x82cc,\n            0x82cd,\n            0x82dc,\n            0x82e0,\n            0x82e7,\n            0x82e8,\n            0x82e9,\n            0x82ea,\n            0x82f0,\n            0x82f1,\n            0x8341,\n            0x8343,\n            0x834e,\n            0x834f,\n            0x8358,\n            0x835e,\n            0x8362,\n            0x8367,\n            0x8375,\n            0x8376,\n            0x8389,\n            0x838a,\n            0x838b,\n            0x838d,\n            0x8393,\n            0x8e96,\n            0x93fa,\n            0x95aa\n        ]\n        this.nextChar = function (iter, det) {\n            iter.index = iter.nextIndex\n            iter.error = false\n            var firstByte\n            firstByte = iter.charValue = iter.nextByte(det)\n            if (firstByte < 0) return false\n            if (firstByte <= 0x7f || (firstByte > 0xa0 && firstByte <= 0xdf)) return true\n            var secondByte = iter.nextByte(det)\n            if (secondByte < 0) return false\n            iter.charValue = (firstByte << 8) | secondByte\n            if (!((secondByte >= 0x40 && secondByte <= 0x7f) || (secondByte >= 0x80 && secondByte <= 0xff))) {\n                iter.error = true\n            }\n            return true\n        }\n    }\n}\nclass big5 extends mbcs {\n    constructor() {\n        super()\n        this.name = function () {\n            return 'Big5'\n        }\n        this.language = function () {\n            return 'zh'\n        }\n        this.commonChars = [\n            0xa140,\n            0xa141,\n            0xa142,\n            0xa143,\n            0xa147,\n            0xa149,\n            0xa175,\n            0xa176,\n            0xa440,\n            0xa446,\n            0xa447,\n            0xa448,\n            0xa451,\n            0xa454,\n            0xa457,\n            0xa464,\n            0xa46a,\n            0xa46c,\n            0xa477,\n            0xa4a3,\n            0xa4a4,\n            0xa4a7,\n            0xa4c1,\n            0xa4ce,\n            0xa4d1,\n            0xa4df,\n            0xa4e8,\n            0xa4fd,\n            0xa540,\n            0xa548,\n            0xa558,\n            0xa569,\n            0xa5cd,\n            0xa5e7,\n            0xa657,\n            0xa661,\n            0xa662,\n            0xa668,\n            0xa670,\n            0xa6a8,\n            0xa6b3,\n            0xa6b9,\n            0xa6d3,\n            0xa6db,\n            0xa6e6,\n            0xa6f2,\n            0xa740,\n            0xa751,\n            0xa759,\n            0xa7da,\n            0xa8a3,\n            0xa8a5,\n            0xa8ad,\n            0xa8d1,\n            0xa8d3,\n            0xa8e4,\n            0xa8fc,\n            0xa9c0,\n            0xa9d2,\n            0xa9f3,\n            0xaa6b,\n            0xaaba,\n            0xaabe,\n            0xaacc,\n            0xaafc,\n            0xac47,\n            0xac4f,\n            0xacb0,\n            0xacd2,\n            0xad59,\n            0xaec9,\n            0xafe0,\n            0xb0ea,\n            0xb16f,\n            0xb2b3,\n            0xb2c4,\n            0xb36f,\n            0xb44c,\n            0xb44e,\n            0xb54c,\n            0xb5a5,\n            0xb5bd,\n            0xb5d0,\n            0xb5d8,\n            0xb671,\n            0xb7ed,\n            0xb867,\n            0xb944,\n            0xbad8,\n            0xbb44,\n            0xbba1,\n            0xbdd1,\n            0xc2c4,\n            0xc3b9,\n            0xc440,\n            0xc45f\n        ]\n        this.nextChar = function (iter, det) {\n            iter.index = iter.nextIndex\n            iter.error = false\n            var firstByte = (iter.charValue = iter.nextByte(det))\n            if (firstByte < 0) return false\n            if (firstByte <= 0x7f || firstByte == 0xff) return true\n            var secondByte = iter.nextByte(det)\n            if (secondByte < 0) return false\n            iter.charValue = (iter.charValue << 8) | secondByte\n            if (secondByte < 0x40 || secondByte == 0x7f || secondByte == 0xff) iter.error = true\n            return true\n        }\n    }\n}\nfunction eucNextChar(iter, det) {\n    iter.index = iter.nextIndex\n    iter.error = false\n    var firstByte = 0\n    var secondByte = 0\n    var thirdByte = 0\n    buildChar: {\n        firstByte = iter.charValue = iter.nextByte(det)\n        if (firstByte < 0) {\n            iter.done = true\n            break buildChar\n        }\n        if (firstByte <= 0x8d) {\n            break buildChar\n        }\n        secondByte = iter.nextByte(det)\n        iter.charValue = (iter.charValue << 8) | secondByte\n        if (firstByte >= 0xa1 && firstByte <= 0xfe) {\n            if (secondByte < 0xa1) {\n                iter.error = true\n            }\n            break buildChar\n        }\n        if (firstByte == 0x8e) {\n            if (secondByte < 0xa1) {\n                iter.error = true\n            }\n            break buildChar\n        }\n        if (firstByte == 0x8f) {\n            thirdByte = iter.nextByte(det)\n            iter.charValue = (iter.charValue << 8) | thirdByte\n            if (thirdByte < 0xa1) {\n                iter.error = true\n            }\n        }\n    }\n    return iter.done == false\n}\nclass euc_jp extends mbcs {\n    constructor() {\n        super()\n        this.name = function () {\n            return 'EUC-JP'\n        }\n        this.language = function () {\n            return 'ja'\n        }\n        this.commonChars = [\n            0xa1a1,\n            0xa1a2,\n            0xa1a3,\n            0xa1a6,\n            0xa1bc,\n            0xa1ca,\n            0xa1cb,\n            0xa1d6,\n            0xa1d7,\n            0xa4a2,\n            0xa4a4,\n            0xa4a6,\n            0xa4a8,\n            0xa4aa,\n            0xa4ab,\n            0xa4ac,\n            0xa4ad,\n            0xa4af,\n            0xa4b1,\n            0xa4b3,\n            0xa4b5,\n            0xa4b7,\n            0xa4b9,\n            0xa4bb,\n            0xa4bd,\n            0xa4bf,\n            0xa4c0,\n            0xa4c1,\n            0xa4c3,\n            0xa4c4,\n            0xa4c6,\n            0xa4c7,\n            0xa4c8,\n            0xa4c9,\n            0xa4ca,\n            0xa4cb,\n            0xa4ce,\n            0xa4cf,\n            0xa4d0,\n            0xa4de,\n            0xa4df,\n            0xa4e1,\n            0xa4e2,\n            0xa4e4,\n            0xa4e8,\n            0xa4e9,\n            0xa4ea,\n            0xa4eb,\n            0xa4ec,\n            0xa4ef,\n            0xa4f2,\n            0xa4f3,\n            0xa5a2,\n            0xa5a3,\n            0xa5a4,\n            0xa5a6,\n            0xa5a7,\n            0xa5aa,\n            0xa5ad,\n            0xa5af,\n            0xa5b0,\n            0xa5b3,\n            0xa5b5,\n            0xa5b7,\n            0xa5b8,\n            0xa5b9,\n            0xa5bf,\n            0xa5c3,\n            0xa5c6,\n            0xa5c7,\n            0xa5c8,\n            0xa5c9,\n            0xa5cb,\n            0xa5d0,\n            0xa5d5,\n            0xa5d6,\n            0xa5d7,\n            0xa5de,\n            0xa5e0,\n            0xa5e1,\n            0xa5e5,\n            0xa5e9,\n            0xa5ea,\n            0xa5eb,\n            0xa5ec,\n            0xa5ed,\n            0xa5f3,\n            0xb8a9,\n            0xb9d4,\n            0xbaee,\n            0xbbc8,\n            0xbef0,\n            0xbfb7,\n            0xc4ea,\n            0xc6fc,\n            0xc7bd,\n            0xcab8,\n            0xcaf3,\n            0xcbdc,\n            0xcdd1\n        ]\n        this.nextChar = eucNextChar\n    }\n}\nclass euc_kr extends mbcs {\n    constructor() {\n        super()\n        this.name = function () {\n            return 'EUC-KR'\n        }\n        this.language = function () {\n            return 'ko'\n        }\n        this.commonChars = [\n            0xb0a1,\n            0xb0b3,\n            0xb0c5,\n            0xb0cd,\n            0xb0d4,\n            0xb0e6,\n            0xb0ed,\n            0xb0f8,\n            0xb0fa,\n            0xb0fc,\n            0xb1b8,\n            0xb1b9,\n            0xb1c7,\n            0xb1d7,\n            0xb1e2,\n            0xb3aa,\n            0xb3bb,\n            0xb4c2,\n            0xb4cf,\n            0xb4d9,\n            0xb4eb,\n            0xb5a5,\n            0xb5b5,\n            0xb5bf,\n            0xb5c7,\n            0xb5e9,\n            0xb6f3,\n            0xb7af,\n            0xb7c2,\n            0xb7ce,\n            0xb8a6,\n            0xb8ae,\n            0xb8b6,\n            0xb8b8,\n            0xb8bb,\n            0xb8e9,\n            0xb9ab,\n            0xb9ae,\n            0xb9cc,\n            0xb9ce,\n            0xb9fd,\n            0xbab8,\n            0xbace,\n            0xbad0,\n            0xbaf1,\n            0xbbe7,\n            0xbbf3,\n            0xbbfd,\n            0xbcad,\n            0xbcba,\n            0xbcd2,\n            0xbcf6,\n            0xbdba,\n            0xbdc0,\n            0xbdc3,\n            0xbdc5,\n            0xbec6,\n            0xbec8,\n            0xbedf,\n            0xbeee,\n            0xbef8,\n            0xbefa,\n            0xbfa1,\n            0xbfa9,\n            0xbfc0,\n            0xbfe4,\n            0xbfeb,\n            0xbfec,\n            0xbff8,\n            0xc0a7,\n            0xc0af,\n            0xc0b8,\n            0xc0ba,\n            0xc0bb,\n            0xc0bd,\n            0xc0c7,\n            0xc0cc,\n            0xc0ce,\n            0xc0cf,\n            0xc0d6,\n            0xc0da,\n            0xc0e5,\n            0xc0fb,\n            0xc0fc,\n            0xc1a4,\n            0xc1a6,\n            0xc1b6,\n            0xc1d6,\n            0xc1df,\n            0xc1f6,\n            0xc1f8,\n            0xc4a1,\n            0xc5cd,\n            0xc6ae,\n            0xc7cf,\n            0xc7d1,\n            0xc7d2,\n            0xc7d8,\n            0xc7e5,\n            0xc8ad\n        ]\n        this.nextChar = eucNextChar\n    }\n}\nclass gb_18030 extends mbcs {\n    constructor() {\n        super()\n        this.name = function () {\n            return 'GB18030'\n        }\n        this.language = function () {\n            return 'zh'\n        }\n        this.nextChar = function (iter, det) {\n            iter.index = iter.nextIndex\n            iter.error = false\n            var firstByte = 0\n            var secondByte = 0\n            var thirdByte = 0\n            var fourthByte = 0\n            buildChar: {\n                firstByte = iter.charValue = iter.nextByte(det)\n                if (firstByte < 0) {\n                    iter.done = true\n                    break buildChar\n                }\n                if (firstByte <= 0x80) {\n                    break buildChar\n                }\n                secondByte = iter.nextByte(det)\n                iter.charValue = (iter.charValue << 8) | secondByte\n                if (firstByte >= 0x81 && firstByte <= 0xfe) {\n                    if ((secondByte >= 0x40 && secondByte <= 0x7e) || (secondByte >= 80 && secondByte <= 0xfe)) {\n                        break buildChar\n                    }\n                    if (secondByte >= 0x30 && secondByte <= 0x39) {\n                        thirdByte = iter.nextByte(det)\n                        if (thirdByte >= 0x81 && thirdByte <= 0xfe) {\n                            fourthByte = iter.nextByte(det)\n                            if (fourthByte >= 0x30 && fourthByte <= 0x39) {\n                                iter.charValue = (iter.charValue << 16) | (thirdByte << 8) | fourthByte\n                                break buildChar\n                            }\n                        }\n                    }\n                    iter.error = true\n                    break buildChar\n                }\n            }\n            return iter.done == false\n        }\n        this.commonChars = [\n            0xa1a1,\n            0xa1a2,\n            0xa1a3,\n            0xa1a4,\n            0xa1b0,\n            0xa1b1,\n            0xa1f1,\n            0xa1f3,\n            0xa3a1,\n            0xa3ac,\n            0xa3ba,\n            0xb1a8,\n            0xb1b8,\n            0xb1be,\n            0xb2bb,\n            0xb3c9,\n            0xb3f6,\n            0xb4f3,\n            0xb5bd,\n            0xb5c4,\n            0xb5e3,\n            0xb6af,\n            0xb6d4,\n            0xb6e0,\n            0xb7a2,\n            0xb7a8,\n            0xb7bd,\n            0xb7d6,\n            0xb7dd,\n            0xb8b4,\n            0xb8df,\n            0xb8f6,\n            0xb9ab,\n            0xb9c9,\n            0xb9d8,\n            0xb9fa,\n            0xb9fd,\n            0xbacd,\n            0xbba7,\n            0xbbd6,\n            0xbbe1,\n            0xbbfa,\n            0xbcbc,\n            0xbcdb,\n            0xbcfe,\n            0xbdcc,\n            0xbecd,\n            0xbedd,\n            0xbfb4,\n            0xbfc6,\n            0xbfc9,\n            0xc0b4,\n            0xc0ed,\n            0xc1cb,\n            0xc2db,\n            0xc3c7,\n            0xc4dc,\n            0xc4ea,\n            0xc5cc,\n            0xc6f7,\n            0xc7f8,\n            0xc8ab,\n            0xc8cb,\n            0xc8d5,\n            0xc8e7,\n            0xc9cf,\n            0xc9fa,\n            0xcab1,\n            0xcab5,\n            0xcac7,\n            0xcad0,\n            0xcad6,\n            0xcaf5,\n            0xcafd,\n            0xccec,\n            0xcdf8,\n            0xceaa,\n            0xcec4,\n            0xced2,\n            0xcee5,\n            0xcfb5,\n            0xcfc2,\n            0xcfd6,\n            0xd0c2,\n            0xd0c5,\n            0xd0d0,\n            0xd0d4,\n            0xd1a7,\n            0xd2aa,\n            0xd2b2,\n            0xd2b5,\n            0xd2bb,\n            0xd2d4,\n            0xd3c3,\n            0xd3d0,\n            0xd3fd,\n            0xd4c2,\n            0xd4da,\n            0xd5e2,\n            0xd6d0\n        ]\n    }\n}\nfunction NGramParser(theNgramList, theByteMap) {\n    var N_GRAM_MASK = 0xffffff\n    this.byteIndex = 0\n    this.ngram = 0\n    this.ngramList = theNgramList\n    this.byteMap = theByteMap\n    this.ngramCount = 0\n    this.hitCount = 0\n    this.spaceChar\n    this.search = function (table, value) {\n        var index = 0\n        if (table[index + 32] <= value) index += 32\n        if (table[index + 16] <= value) index += 16\n        if (table[index + 8] <= value) index += 8\n        if (table[index + 4] <= value) index += 4\n        if (table[index + 2] <= value) index += 2\n        if (table[index + 1] <= value) index += 1\n        if (table[index] > value) index -= 1\n        if (index < 0 || table[index] != value) return -1\n        return index\n    }\n    this.lookup = function (thisNgram) {\n        this.ngramCount += 1\n        if (this.search(this.ngramList, thisNgram) >= 0) {\n            this.hitCount += 1\n        }\n    }\n    this.addByte = function (b) {\n        this.ngram = ((this.ngram << 8) + (b & 0xff)) & N_GRAM_MASK\n        this.lookup(this.ngram)\n    }\n    this.nextByte = function (det) {\n        if (this.byteIndex >= det.fInputLen) return -1\n        return det.fInputBytes[this.byteIndex++] & 0xff\n    }\n    this.parse = function (det, spaceCh) {\n        var b,\n            ignoreSpace = false\n        this.spaceChar = spaceCh\n        while ((b = this.nextByte(det)) >= 0) {\n            var mb = this.byteMap[b]\n            if (mb != 0) {\n                if (!(mb == this.spaceChar && ignoreSpace)) {\n                    this.addByte(mb)\n                }\n                ignoreSpace = mb == this.spaceChar\n            }\n        }\n        this.addByte(this.spaceChar)\n        var rawPercent = this.hitCount / this.ngramCount\n        if (rawPercent > 0.33) return 98\n        return Math.floor(rawPercent * 300.0)\n    }\n}\nfunction NGramsPlusLang(la, ng) {\n    this.fLang = la\n    this.fNGrams = ng\n}\nclass sbcs {\n    constructor() {\n        this.spaceChar = 0x20\n    }\n    ngrams() {}\n    byteMap() {}\n    match(det) {\n        var ngrams = this.ngrams()\n        var multiple = Array.isArray(ngrams) && ngrams[0] instanceof NGramsPlusLang\n        if (!multiple) {\n            var parser = new NGramParser(ngrams, this.byteMap())\n            var confidence = parser.parse(det, this.spaceChar)\n            return confidence <= 0 ? null : new Match(det, this, confidence)\n        }\n        var bestConfidenceSoFar = -1\n        var lang = null\n        for (var i = ngrams.length - 1; i >= 0; i--) {\n            var ngl = ngrams[i]\n            var parser = new NGramParser(ngl.fNGrams, this.byteMap())\n            var confidence = parser.parse(det, this.spaceChar)\n            if (confidence > bestConfidenceSoFar) {\n                bestConfidenceSoFar = confidence\n                lang = ngl.fLang\n            }\n        }\n        var name = this.name(det)\n        return bestConfidenceSoFar <= 0 ? null : new Match(det, this, bestConfidenceSoFar, name, lang)\n    }\n}\nclass ISO_8859_1 extends sbcs {\n    constructor() {\n        super()\n        this.byteMap = function () {\n            return [\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x00,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x61,\n                0x62,\n                0x63,\n                0x64,\n                0x65,\n                0x66,\n                0x67,\n                0x68,\n                0x69,\n                0x6a,\n                0x6b,\n                0x6c,\n                0x6d,\n                0x6e,\n                0x6f,\n                0x70,\n                0x71,\n                0x72,\n                0x73,\n                0x74,\n                0x75,\n                0x76,\n                0x77,\n                0x78,\n                0x79,\n                0x7a,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x61,\n                0x62,\n                0x63,\n                0x64,\n                0x65,\n                0x66,\n                0x67,\n                0x68,\n                0x69,\n                0x6a,\n                0x6b,\n                0x6c,\n                0x6d,\n                0x6e,\n                0x6f,\n                0x70,\n                0x71,\n                0x72,\n                0x73,\n                0x74,\n                0x75,\n                0x76,\n                0x77,\n                0x78,\n                0x79,\n                0x7a,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0xaa,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0xb5,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0xba,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0xe0,\n                0xe1,\n                0xe2,\n                0xe3,\n                0xe4,\n                0xe5,\n                0xe6,\n                0xe7,\n                0xe8,\n                0xe9,\n                0xea,\n                0xeb,\n                0xec,\n                0xed,\n                0xee,\n                0xef,\n                0xf0,\n                0xf1,\n                0xf2,\n                0xf3,\n                0xf4,\n                0xf5,\n                0xf6,\n                0x20,\n                0xf8,\n                0xf9,\n                0xfa,\n                0xfb,\n                0xfc,\n                0xfd,\n                0xfe,\n                0xdf,\n                0xe0,\n                0xe1,\n                0xe2,\n                0xe3,\n                0xe4,\n                0xe5,\n                0xe6,\n                0xe7,\n                0xe8,\n                0xe9,\n                0xea,\n                0xeb,\n                0xec,\n                0xed,\n                0xee,\n                0xef,\n                0xf0,\n                0xf1,\n                0xf2,\n                0xf3,\n                0xf4,\n                0xf5,\n                0xf6,\n                0x20,\n                0xf8,\n                0xf9,\n                0xfa,\n                0xfb,\n                0xfc,\n                0xfd,\n                0xfe,\n                0xff\n            ]\n        }\n        this.ngrams = function () {\n            return [\n                new NGramsPlusLang('da', [\n                    0x206166,\n                    0x206174,\n                    0x206465,\n                    0x20656e,\n                    0x206572,\n                    0x20666f,\n                    0x206861,\n                    0x206920,\n                    0x206d65,\n                    0x206f67,\n                    0x2070e5,\n                    0x207369,\n                    0x207374,\n                    0x207469,\n                    0x207669,\n                    0x616620,\n                    0x616e20,\n                    0x616e64,\n                    0x617220,\n                    0x617420,\n                    0x646520,\n                    0x64656e,\n                    0x646572,\n                    0x646574,\n                    0x652073,\n                    0x656420,\n                    0x656465,\n                    0x656e20,\n                    0x656e64,\n                    0x657220,\n                    0x657265,\n                    0x657320,\n                    0x657420,\n                    0x666f72,\n                    0x676520,\n                    0x67656e,\n                    0x676572,\n                    0x696765,\n                    0x696c20,\n                    0x696e67,\n                    0x6b6520,\n                    0x6b6b65,\n                    0x6c6572,\n                    0x6c6967,\n                    0x6c6c65,\n                    0x6d6564,\n                    0x6e6465,\n                    0x6e6520,\n                    0x6e6720,\n                    0x6e6765,\n                    0x6f6720,\n                    0x6f6d20,\n                    0x6f7220,\n                    0x70e520,\n                    0x722064,\n                    0x722065,\n                    0x722073,\n                    0x726520,\n                    0x737465,\n                    0x742073,\n                    0x746520,\n                    0x746572,\n                    0x74696c,\n                    0x766572\n                ]),\n                new NGramsPlusLang('de', [\n                    0x20616e,\n                    0x206175,\n                    0x206265,\n                    0x206461,\n                    0x206465,\n                    0x206469,\n                    0x206569,\n                    0x206765,\n                    0x206861,\n                    0x20696e,\n                    0x206d69,\n                    0x207363,\n                    0x207365,\n                    0x20756e,\n                    0x207665,\n                    0x20766f,\n                    0x207765,\n                    0x207a75,\n                    0x626572,\n                    0x636820,\n                    0x636865,\n                    0x636874,\n                    0x646173,\n                    0x64656e,\n                    0x646572,\n                    0x646965,\n                    0x652064,\n                    0x652073,\n                    0x65696e,\n                    0x656974,\n                    0x656e20,\n                    0x657220,\n                    0x657320,\n                    0x67656e,\n                    0x68656e,\n                    0x687420,\n                    0x696368,\n                    0x696520,\n                    0x696e20,\n                    0x696e65,\n                    0x697420,\n                    0x6c6963,\n                    0x6c6c65,\n                    0x6e2061,\n                    0x6e2064,\n                    0x6e2073,\n                    0x6e6420,\n                    0x6e6465,\n                    0x6e6520,\n                    0x6e6720,\n                    0x6e6765,\n                    0x6e7465,\n                    0x722064,\n                    0x726465,\n                    0x726569,\n                    0x736368,\n                    0x737465,\n                    0x742064,\n                    0x746520,\n                    0x74656e,\n                    0x746572,\n                    0x756e64,\n                    0x756e67,\n                    0x766572\n                ]),\n                new NGramsPlusLang('en', [\n                    0x206120,\n                    0x20616e,\n                    0x206265,\n                    0x20636f,\n                    0x20666f,\n                    0x206861,\n                    0x206865,\n                    0x20696e,\n                    0x206d61,\n                    0x206f66,\n                    0x207072,\n                    0x207265,\n                    0x207361,\n                    0x207374,\n                    0x207468,\n                    0x20746f,\n                    0x207768,\n                    0x616964,\n                    0x616c20,\n                    0x616e20,\n                    0x616e64,\n                    0x617320,\n                    0x617420,\n                    0x617465,\n                    0x617469,\n                    0x642061,\n                    0x642074,\n                    0x652061,\n                    0x652073,\n                    0x652074,\n                    0x656420,\n                    0x656e74,\n                    0x657220,\n                    0x657320,\n                    0x666f72,\n                    0x686174,\n                    0x686520,\n                    0x686572,\n                    0x696420,\n                    0x696e20,\n                    0x696e67,\n                    0x696f6e,\n                    0x697320,\n                    0x6e2061,\n                    0x6e2074,\n                    0x6e6420,\n                    0x6e6720,\n                    0x6e7420,\n                    0x6f6620,\n                    0x6f6e20,\n                    0x6f7220,\n                    0x726520,\n                    0x727320,\n                    0x732061,\n                    0x732074,\n                    0x736169,\n                    0x737420,\n                    0x742074,\n                    0x746572,\n                    0x746861,\n                    0x746865,\n                    0x74696f,\n                    0x746f20,\n                    0x747320\n                ]),\n                new NGramsPlusLang('es', [\n                    0x206120,\n                    0x206361,\n                    0x20636f,\n                    0x206465,\n                    0x20656c,\n                    0x20656e,\n                    0x206573,\n                    0x20696e,\n                    0x206c61,\n                    0x206c6f,\n                    0x207061,\n                    0x20706f,\n                    0x207072,\n                    0x207175,\n                    0x207265,\n                    0x207365,\n                    0x20756e,\n                    0x207920,\n                    0x612063,\n                    0x612064,\n                    0x612065,\n                    0x61206c,\n                    0x612070,\n                    0x616369,\n                    0x61646f,\n                    0x616c20,\n                    0x617220,\n                    0x617320,\n                    0x6369f3,\n                    0x636f6e,\n                    0x646520,\n                    0x64656c,\n                    0x646f20,\n                    0x652064,\n                    0x652065,\n                    0x65206c,\n                    0x656c20,\n                    0x656e20,\n                    0x656e74,\n                    0x657320,\n                    0x657374,\n                    0x69656e,\n                    0x69f36e,\n                    0x6c6120,\n                    0x6c6f73,\n                    0x6e2065,\n                    0x6e7465,\n                    0x6f2064,\n                    0x6f2065,\n                    0x6f6e20,\n                    0x6f7220,\n                    0x6f7320,\n                    0x706172,\n                    0x717565,\n                    0x726120,\n                    0x726573,\n                    0x732064,\n                    0x732065,\n                    0x732070,\n                    0x736520,\n                    0x746520,\n                    0x746f20,\n                    0x756520,\n                    0xf36e20\n                ]),\n                new NGramsPlusLang('fr', [\n                    0x206175,\n                    0x20636f,\n                    0x206461,\n                    0x206465,\n                    0x206475,\n                    0x20656e,\n                    0x206574,\n                    0x206c61,\n                    0x206c65,\n                    0x207061,\n                    0x20706f,\n                    0x207072,\n                    0x207175,\n                    0x207365,\n                    0x20736f,\n                    0x20756e,\n                    0x20e020,\n                    0x616e74,\n                    0x617469,\n                    0x636520,\n                    0x636f6e,\n                    0x646520,\n                    0x646573,\n                    0x647520,\n                    0x652061,\n                    0x652063,\n                    0x652064,\n                    0x652065,\n                    0x65206c,\n                    0x652070,\n                    0x652073,\n                    0x656e20,\n                    0x656e74,\n                    0x657220,\n                    0x657320,\n                    0x657420,\n                    0x657572,\n                    0x696f6e,\n                    0x697320,\n                    0x697420,\n                    0x6c6120,\n                    0x6c6520,\n                    0x6c6573,\n                    0x6d656e,\n                    0x6e2064,\n                    0x6e6520,\n                    0x6e7320,\n                    0x6e7420,\n                    0x6f6e20,\n                    0x6f6e74,\n                    0x6f7572,\n                    0x717565,\n                    0x72206c,\n                    0x726520,\n                    0x732061,\n                    0x732064,\n                    0x732065,\n                    0x73206c,\n                    0x732070,\n                    0x742064,\n                    0x746520,\n                    0x74696f,\n                    0x756520,\n                    0x757220\n                ]),\n                new NGramsPlusLang('it', [\n                    0x20616c,\n                    0x206368,\n                    0x20636f,\n                    0x206465,\n                    0x206469,\n                    0x206520,\n                    0x20696c,\n                    0x20696e,\n                    0x206c61,\n                    0x207065,\n                    0x207072,\n                    0x20756e,\n                    0x612063,\n                    0x612064,\n                    0x612070,\n                    0x612073,\n                    0x61746f,\n                    0x636865,\n                    0x636f6e,\n                    0x64656c,\n                    0x646920,\n                    0x652061,\n                    0x652063,\n                    0x652064,\n                    0x652069,\n                    0x65206c,\n                    0x652070,\n                    0x652073,\n                    0x656c20,\n                    0x656c6c,\n                    0x656e74,\n                    0x657220,\n                    0x686520,\n                    0x692061,\n                    0x692063,\n                    0x692064,\n                    0x692073,\n                    0x696120,\n                    0x696c20,\n                    0x696e20,\n                    0x696f6e,\n                    0x6c6120,\n                    0x6c6520,\n                    0x6c6920,\n                    0x6c6c61,\n                    0x6e6520,\n                    0x6e6920,\n                    0x6e6f20,\n                    0x6e7465,\n                    0x6f2061,\n                    0x6f2064,\n                    0x6f2069,\n                    0x6f2073,\n                    0x6f6e20,\n                    0x6f6e65,\n                    0x706572,\n                    0x726120,\n                    0x726520,\n                    0x736920,\n                    0x746120,\n                    0x746520,\n                    0x746920,\n                    0x746f20,\n                    0x7a696f\n                ]),\n                new NGramsPlusLang('nl', [\n                    0x20616c,\n                    0x206265,\n                    0x206461,\n                    0x206465,\n                    0x206469,\n                    0x206565,\n                    0x20656e,\n                    0x206765,\n                    0x206865,\n                    0x20696e,\n                    0x206d61,\n                    0x206d65,\n                    0x206f70,\n                    0x207465,\n                    0x207661,\n                    0x207665,\n                    0x20766f,\n                    0x207765,\n                    0x207a69,\n                    0x61616e,\n                    0x616172,\n                    0x616e20,\n                    0x616e64,\n                    0x617220,\n                    0x617420,\n                    0x636874,\n                    0x646520,\n                    0x64656e,\n                    0x646572,\n                    0x652062,\n                    0x652076,\n                    0x65656e,\n                    0x656572,\n                    0x656e20,\n                    0x657220,\n                    0x657273,\n                    0x657420,\n                    0x67656e,\n                    0x686574,\n                    0x696520,\n                    0x696e20,\n                    0x696e67,\n                    0x697320,\n                    0x6e2062,\n                    0x6e2064,\n                    0x6e2065,\n                    0x6e2068,\n                    0x6e206f,\n                    0x6e2076,\n                    0x6e6465,\n                    0x6e6720,\n                    0x6f6e64,\n                    0x6f6f72,\n                    0x6f7020,\n                    0x6f7220,\n                    0x736368,\n                    0x737465,\n                    0x742064,\n                    0x746520,\n                    0x74656e,\n                    0x746572,\n                    0x76616e,\n                    0x766572,\n                    0x766f6f\n                ]),\n                new NGramsPlusLang('no', [\n                    0x206174,\n                    0x206176,\n                    0x206465,\n                    0x20656e,\n                    0x206572,\n                    0x20666f,\n                    0x206861,\n                    0x206920,\n                    0x206d65,\n                    0x206f67,\n                    0x2070e5,\n                    0x207365,\n                    0x20736b,\n                    0x20736f,\n                    0x207374,\n                    0x207469,\n                    0x207669,\n                    0x20e520,\n                    0x616e64,\n                    0x617220,\n                    0x617420,\n                    0x646520,\n                    0x64656e,\n                    0x646574,\n                    0x652073,\n                    0x656420,\n                    0x656e20,\n                    0x656e65,\n                    0x657220,\n                    0x657265,\n                    0x657420,\n                    0x657474,\n                    0x666f72,\n                    0x67656e,\n                    0x696b6b,\n                    0x696c20,\n                    0x696e67,\n                    0x6b6520,\n                    0x6b6b65,\n                    0x6c6520,\n                    0x6c6c65,\n                    0x6d6564,\n                    0x6d656e,\n                    0x6e2073,\n                    0x6e6520,\n                    0x6e6720,\n                    0x6e6765,\n                    0x6e6e65,\n                    0x6f6720,\n                    0x6f6d20,\n                    0x6f7220,\n                    0x70e520,\n                    0x722073,\n                    0x726520,\n                    0x736f6d,\n                    0x737465,\n                    0x742073,\n                    0x746520,\n                    0x74656e,\n                    0x746572,\n                    0x74696c,\n                    0x747420,\n                    0x747465,\n                    0x766572\n                ]),\n                new NGramsPlusLang('pt', [\n                    0x206120,\n                    0x20636f,\n                    0x206461,\n                    0x206465,\n                    0x20646f,\n                    0x206520,\n                    0x206573,\n                    0x206d61,\n                    0x206e6f,\n                    0x206f20,\n                    0x207061,\n                    0x20706f,\n                    0x207072,\n                    0x207175,\n                    0x207265,\n                    0x207365,\n                    0x20756d,\n                    0x612061,\n                    0x612063,\n                    0x612064,\n                    0x612070,\n                    0x616465,\n                    0x61646f,\n                    0x616c20,\n                    0x617220,\n                    0x617261,\n                    0x617320,\n                    0x636f6d,\n                    0x636f6e,\n                    0x646120,\n                    0x646520,\n                    0x646f20,\n                    0x646f73,\n                    0x652061,\n                    0x652064,\n                    0x656d20,\n                    0x656e74,\n                    0x657320,\n                    0x657374,\n                    0x696120,\n                    0x696361,\n                    0x6d656e,\n                    0x6e7465,\n                    0x6e746f,\n                    0x6f2061,\n                    0x6f2063,\n                    0x6f2064,\n                    0x6f2065,\n                    0x6f2070,\n                    0x6f7320,\n                    0x706172,\n                    0x717565,\n                    0x726120,\n                    0x726573,\n                    0x732061,\n                    0x732064,\n                    0x732065,\n                    0x732070,\n                    0x737461,\n                    0x746520,\n                    0x746f20,\n                    0x756520,\n                    0xe36f20,\n                    0xe7e36f\n                ]),\n                new NGramsPlusLang('sv', [\n                    0x206174,\n                    0x206176,\n                    0x206465,\n                    0x20656e,\n                    0x2066f6,\n                    0x206861,\n                    0x206920,\n                    0x20696e,\n                    0x206b6f,\n                    0x206d65,\n                    0x206f63,\n                    0x2070e5,\n                    0x20736b,\n                    0x20736f,\n                    0x207374,\n                    0x207469,\n                    0x207661,\n                    0x207669,\n                    0x20e472,\n                    0x616465,\n                    0x616e20,\n                    0x616e64,\n                    0x617220,\n                    0x617474,\n                    0x636820,\n                    0x646520,\n                    0x64656e,\n                    0x646572,\n                    0x646574,\n                    0x656420,\n                    0x656e20,\n                    0x657220,\n                    0x657420,\n                    0x66f672,\n                    0x67656e,\n                    0x696c6c,\n                    0x696e67,\n                    0x6b6120,\n                    0x6c6c20,\n                    0x6d6564,\n                    0x6e2073,\n                    0x6e6120,\n                    0x6e6465,\n                    0x6e6720,\n                    0x6e6765,\n                    0x6e696e,\n                    0x6f6368,\n                    0x6f6d20,\n                    0x6f6e20,\n                    0x70e520,\n                    0x722061,\n                    0x722073,\n                    0x726120,\n                    0x736b61,\n                    0x736f6d,\n                    0x742073,\n                    0x746120,\n                    0x746520,\n                    0x746572,\n                    0x74696c,\n                    0x747420,\n                    0x766172,\n                    0xe47220,\n                    0xf67220\n                ])\n            ]\n        }\n        this.name = function (det) {\n            return det && det.fC1Bytes ? 'windows-1252' : 'ISO-8859-1'\n        }\n    }\n}\nclass ISO_8859_2 extends sbcs {\n    constructor() {\n        super()\n        this.byteMap = function () {\n            return [\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x00,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x61,\n                0x62,\n                0x63,\n                0x64,\n                0x65,\n                0x66,\n                0x67,\n                0x68,\n                0x69,\n                0x6a,\n                0x6b,\n                0x6c,\n                0x6d,\n                0x6e,\n                0x6f,\n                0x70,\n                0x71,\n                0x72,\n                0x73,\n                0x74,\n                0x75,\n                0x76,\n                0x77,\n                0x78,\n                0x79,\n                0x7a,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x61,\n                0x62,\n                0x63,\n                0x64,\n                0x65,\n                0x66,\n                0x67,\n                0x68,\n                0x69,\n                0x6a,\n                0x6b,\n                0x6c,\n                0x6d,\n                0x6e,\n                0x6f,\n                0x70,\n                0x71,\n                0x72,\n                0x73,\n                0x74,\n                0x75,\n                0x76,\n                0x77,\n                0x78,\n                0x79,\n                0x7a,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0xb1,\n                0x20,\n                0xb3,\n                0x20,\n                0xb5,\n                0xb6,\n                0x20,\n                0x20,\n                0xb9,\n                0xba,\n                0xbb,\n                0xbc,\n                0x20,\n                0xbe,\n                0xbf,\n                0x20,\n                0xb1,\n                0x20,\n                0xb3,\n                0x20,\n                0xb5,\n                0xb6,\n                0xb7,\n                0x20,\n                0xb9,\n                0xba,\n                0xbb,\n                0xbc,\n                0x20,\n                0xbe,\n                0xbf,\n                0xe0,\n                0xe1,\n                0xe2,\n                0xe3,\n                0xe4,\n                0xe5,\n                0xe6,\n                0xe7,\n                0xe8,\n                0xe9,\n                0xea,\n                0xeb,\n                0xec,\n                0xed,\n                0xee,\n                0xef,\n                0xf0,\n                0xf1,\n                0xf2,\n                0xf3,\n                0xf4,\n                0xf5,\n                0xf6,\n                0x20,\n                0xf8,\n                0xf9,\n                0xfa,\n                0xfb,\n                0xfc,\n                0xfd,\n                0xfe,\n                0xdf,\n                0xe0,\n                0xe1,\n                0xe2,\n                0xe3,\n                0xe4,\n                0xe5,\n                0xe6,\n                0xe7,\n                0xe8,\n                0xe9,\n                0xea,\n                0xeb,\n                0xec,\n                0xed,\n                0xee,\n                0xef,\n                0xf0,\n                0xf1,\n                0xf2,\n                0xf3,\n                0xf4,\n                0xf5,\n                0xf6,\n                0x20,\n                0xf8,\n                0xf9,\n                0xfa,\n                0xfb,\n                0xfc,\n                0xfd,\n                0xfe,\n                0x20\n            ]\n        }\n        this.ngrams = function () {\n            return [\n                new NGramsPlusLang('cs', [\n                    0x206120,\n                    0x206279,\n                    0x20646f,\n                    0x206a65,\n                    0x206e61,\n                    0x206e65,\n                    0x206f20,\n                    0x206f64,\n                    0x20706f,\n                    0x207072,\n                    0x2070f8,\n                    0x20726f,\n                    0x207365,\n                    0x20736f,\n                    0x207374,\n                    0x20746f,\n                    0x207620,\n                    0x207679,\n                    0x207a61,\n                    0x612070,\n                    0x636520,\n                    0x636820,\n                    0x652070,\n                    0x652073,\n                    0x652076,\n                    0x656d20,\n                    0x656eed,\n                    0x686f20,\n                    0x686f64,\n                    0x697374,\n                    0x6a6520,\n                    0x6b7465,\n                    0x6c6520,\n                    0x6c6920,\n                    0x6e6120,\n                    0x6ee920,\n                    0x6eec20,\n                    0x6eed20,\n                    0x6f2070,\n                    0x6f646e,\n                    0x6f6a69,\n                    0x6f7374,\n                    0x6f7520,\n                    0x6f7661,\n                    0x706f64,\n                    0x706f6a,\n                    0x70726f,\n                    0x70f865,\n                    0x736520,\n                    0x736f75,\n                    0x737461,\n                    0x737469,\n                    0x73746e,\n                    0x746572,\n                    0x746eed,\n                    0x746f20,\n                    0x752070,\n                    0xbe6520,\n                    0xe16eed,\n                    0xe9686f,\n                    0xed2070,\n                    0xed2073,\n                    0xed6d20,\n                    0xf86564\n                ]),\n                new NGramsPlusLang('hu', [\n                    0x206120,\n                    0x20617a,\n                    0x206265,\n                    0x206567,\n                    0x20656c,\n                    0x206665,\n                    0x206861,\n                    0x20686f,\n                    0x206973,\n                    0x206b65,\n                    0x206b69,\n                    0x206bf6,\n                    0x206c65,\n                    0x206d61,\n                    0x206d65,\n                    0x206d69,\n                    0x206e65,\n                    0x20737a,\n                    0x207465,\n                    0x20e973,\n                    0x612061,\n                    0x61206b,\n                    0x61206d,\n                    0x612073,\n                    0x616b20,\n                    0x616e20,\n                    0x617a20,\n                    0x62616e,\n                    0x62656e,\n                    0x656779,\n                    0x656b20,\n                    0x656c20,\n                    0x656c65,\n                    0x656d20,\n                    0x656e20,\n                    0x657265,\n                    0x657420,\n                    0x657465,\n                    0x657474,\n                    0x677920,\n                    0x686f67,\n                    0x696e74,\n                    0x697320,\n                    0x6b2061,\n                    0x6bf67a,\n                    0x6d6567,\n                    0x6d696e,\n                    0x6e2061,\n                    0x6e616b,\n                    0x6e656b,\n                    0x6e656d,\n                    0x6e7420,\n                    0x6f6779,\n                    0x732061,\n                    0x737a65,\n                    0x737a74,\n                    0x737ae1,\n                    0x73e967,\n                    0x742061,\n                    0x747420,\n                    0x74e173,\n                    0x7a6572,\n                    0xe16e20,\n                    0xe97320\n                ]),\n                new NGramsPlusLang('pl', [\n                    0x20637a,\n                    0x20646f,\n                    0x206920,\n                    0x206a65,\n                    0x206b6f,\n                    0x206d61,\n                    0x206d69,\n                    0x206e61,\n                    0x206e69,\n                    0x206f64,\n                    0x20706f,\n                    0x207072,\n                    0x207369,\n                    0x207720,\n                    0x207769,\n                    0x207779,\n                    0x207a20,\n                    0x207a61,\n                    0x612070,\n                    0x612077,\n                    0x616e69,\n                    0x636820,\n                    0x637a65,\n                    0x637a79,\n                    0x646f20,\n                    0x647a69,\n                    0x652070,\n                    0x652073,\n                    0x652077,\n                    0x65207a,\n                    0x65676f,\n                    0x656a20,\n                    0x656d20,\n                    0x656e69,\n                    0x676f20,\n                    0x696120,\n                    0x696520,\n                    0x69656a,\n                    0x6b6120,\n                    0x6b6920,\n                    0x6b6965,\n                    0x6d6965,\n                    0x6e6120,\n                    0x6e6961,\n                    0x6e6965,\n                    0x6f2070,\n                    0x6f7761,\n                    0x6f7769,\n                    0x706f6c,\n                    0x707261,\n                    0x70726f,\n                    0x70727a,\n                    0x727a65,\n                    0x727a79,\n                    0x7369ea,\n                    0x736b69,\n                    0x737461,\n                    0x776965,\n                    0x796368,\n                    0x796d20,\n                    0x7a6520,\n                    0x7a6965,\n                    0x7a7920,\n                    0xf37720\n                ]),\n                new NGramsPlusLang('ro', [\n                    0x206120,\n                    0x206163,\n                    0x206361,\n                    0x206365,\n                    0x20636f,\n                    0x206375,\n                    0x206465,\n                    0x206469,\n                    0x206c61,\n                    0x206d61,\n                    0x207065,\n                    0x207072,\n                    0x207365,\n                    0x2073e3,\n                    0x20756e,\n                    0x20ba69,\n                    0x20ee6e,\n                    0x612063,\n                    0x612064,\n                    0x617265,\n                    0x617420,\n                    0x617465,\n                    0x617520,\n                    0x636172,\n                    0x636f6e,\n                    0x637520,\n                    0x63e320,\n                    0x646520,\n                    0x652061,\n                    0x652063,\n                    0x652064,\n                    0x652070,\n                    0x652073,\n                    0x656120,\n                    0x656920,\n                    0x656c65,\n                    0x656e74,\n                    0x657374,\n                    0x692061,\n                    0x692063,\n                    0x692064,\n                    0x692070,\n                    0x696520,\n                    0x696920,\n                    0x696e20,\n                    0x6c6120,\n                    0x6c6520,\n                    0x6c6f72,\n                    0x6c7569,\n                    0x6e6520,\n                    0x6e7472,\n                    0x6f7220,\n                    0x70656e,\n                    0x726520,\n                    0x726561,\n                    0x727520,\n                    0x73e320,\n                    0x746520,\n                    0x747275,\n                    0x74e320,\n                    0x756920,\n                    0x756c20,\n                    0xba6920,\n                    0xee6e20\n                ])\n            ]\n        }\n        this.name = function (det) {\n            return det && det.fC1Bytes ? 'windows-1250' : 'ISO-8859-2'\n        }\n    }\n}\nclass ISO_8859_5 extends sbcs {\n    constructor() {\n        super()\n        this.byteMap = function () {\n            return [\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x00,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x61,\n                0x62,\n                0x63,\n                0x64,\n                0x65,\n                0x66,\n                0x67,\n                0x68,\n                0x69,\n                0x6a,\n                0x6b,\n                0x6c,\n                0x6d,\n                0x6e,\n                0x6f,\n                0x70,\n                0x71,\n                0x72,\n                0x73,\n                0x74,\n                0x75,\n                0x76,\n                0x77,\n                0x78,\n                0x79,\n                0x7a,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x61,\n                0x62,\n                0x63,\n                0x64,\n                0x65,\n                0x66,\n                0x67,\n                0x68,\n                0x69,\n                0x6a,\n                0x6b,\n                0x6c,\n                0x6d,\n                0x6e,\n                0x6f,\n                0x70,\n                0x71,\n                0x72,\n                0x73,\n                0x74,\n                0x75,\n                0x76,\n                0x77,\n                0x78,\n                0x79,\n                0x7a,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0xf1,\n                0xf2,\n                0xf3,\n                0xf4,\n                0xf5,\n                0xf6,\n                0xf7,\n                0xf8,\n                0xf9,\n                0xfa,\n                0xfb,\n                0xfc,\n                0x20,\n                0xfe,\n                0xff,\n                0xd0,\n                0xd1,\n                0xd2,\n                0xd3,\n                0xd4,\n                0xd5,\n                0xd6,\n                0xd7,\n                0xd8,\n                0xd9,\n                0xda,\n                0xdb,\n                0xdc,\n                0xdd,\n                0xde,\n                0xdf,\n                0xe0,\n                0xe1,\n                0xe2,\n                0xe3,\n                0xe4,\n                0xe5,\n                0xe6,\n                0xe7,\n                0xe8,\n                0xe9,\n                0xea,\n                0xeb,\n                0xec,\n                0xed,\n                0xee,\n                0xef,\n                0xd0,\n                0xd1,\n                0xd2,\n                0xd3,\n                0xd4,\n                0xd5,\n                0xd6,\n                0xd7,\n                0xd8,\n                0xd9,\n                0xda,\n                0xdb,\n                0xdc,\n                0xdd,\n                0xde,\n                0xdf,\n                0xe0,\n                0xe1,\n                0xe2,\n                0xe3,\n                0xe4,\n                0xe5,\n                0xe6,\n                0xe7,\n                0xe8,\n                0xe9,\n                0xea,\n                0xeb,\n                0xec,\n                0xed,\n                0xee,\n                0xef,\n                0x20,\n                0xf1,\n                0xf2,\n                0xf3,\n                0xf4,\n                0xf5,\n                0xf6,\n                0xf7,\n                0xf8,\n                0xf9,\n                0xfa,\n                0xfb,\n                0xfc,\n                0x20,\n                0xfe,\n                0xff\n            ]\n        }\n        this.ngrams = function () {\n            return [\n                0x20d220,\n                0x20d2de,\n                0x20d4de,\n                0x20d7d0,\n                0x20d820,\n                0x20dad0,\n                0x20dade,\n                0x20ddd0,\n                0x20ddd5,\n                0x20ded1,\n                0x20dfde,\n                0x20dfe0,\n                0x20e0d0,\n                0x20e1de,\n                0x20e1e2,\n                0x20e2de,\n                0x20e7e2,\n                0x20ede2,\n                0xd0ddd8,\n                0xd0e2ec,\n                0xd3de20,\n                0xd5dbec,\n                0xd5ddd8,\n                0xd5e1e2,\n                0xd5e220,\n                0xd820df,\n                0xd8d520,\n                0xd8d820,\n                0xd8ef20,\n                0xdbd5dd,\n                0xdbd820,\n                0xdbecdd,\n                0xddd020,\n                0xddd520,\n                0xddd8d5,\n                0xddd8ef,\n                0xddde20,\n                0xddded2,\n                0xde20d2,\n                0xde20df,\n                0xde20e1,\n                0xded220,\n                0xded2d0,\n                0xded3de,\n                0xded920,\n                0xdedbec,\n                0xdedc20,\n                0xdee1e2,\n                0xdfdedb,\n                0xdfe0d5,\n                0xdfe0d8,\n                0xdfe0de,\n                0xe0d0d2,\n                0xe0d5d4,\n                0xe1e2d0,\n                0xe1e2d2,\n                0xe1e2d8,\n                0xe1ef20,\n                0xe2d5db,\n                0xe2de20,\n                0xe2dee0,\n                0xe2ec20,\n                0xe7e2de,\n                0xebe520\n            ]\n        }\n        this.name = function (det) {\n            return 'ISO-8859-5'\n        }\n        this.language = function () {\n            return 'ru'\n        }\n    }\n}\nclass ISO_8859_6 extends sbcs {\n    constructor() {\n        super()\n        this.byteMap = function () {\n            return [\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x00,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x61,\n                0x62,\n                0x63,\n                0x64,\n                0x65,\n                0x66,\n                0x67,\n                0x68,\n                0x69,\n                0x6a,\n                0x6b,\n                0x6c,\n                0x6d,\n                0x6e,\n                0x6f,\n                0x70,\n                0x71,\n                0x72,\n                0x73,\n                0x74,\n                0x75,\n                0x76,\n                0x77,\n                0x78,\n                0x79,\n                0x7a,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x61,\n                0x62,\n                0x63,\n                0x64,\n                0x65,\n                0x66,\n                0x67,\n                0x68,\n                0x69,\n                0x6a,\n                0x6b,\n                0x6c,\n                0x6d,\n                0x6e,\n                0x6f,\n                0x70,\n                0x71,\n                0x72,\n                0x73,\n                0x74,\n                0x75,\n                0x76,\n                0x77,\n                0x78,\n                0x79,\n                0x7a,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0xc1,\n                0xc2,\n                0xc3,\n                0xc4,\n                0xc5,\n                0xc6,\n                0xc7,\n                0xc8,\n                0xc9,\n                0xca,\n                0xcb,\n                0xcc,\n                0xcd,\n                0xce,\n                0xcf,\n                0xd0,\n                0xd1,\n                0xd2,\n                0xd3,\n                0xd4,\n                0xd5,\n                0xd6,\n                0xd7,\n                0xd8,\n                0xd9,\n                0xda,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0xe0,\n                0xe1,\n                0xe2,\n                0xe3,\n                0xe4,\n                0xe5,\n                0xe6,\n                0xe7,\n                0xe8,\n                0xe9,\n                0xea,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20\n            ]\n        }\n        this.ngrams = function () {\n            return [\n                0x20c7e4,\n                0x20c7e6,\n                0x20c8c7,\n                0x20d9e4,\n                0x20e1ea,\n                0x20e4e4,\n                0x20e5e6,\n                0x20e8c7,\n                0xc720c7,\n                0xc7c120,\n                0xc7ca20,\n                0xc7d120,\n                0xc7e420,\n                0xc7e4c3,\n                0xc7e4c7,\n                0xc7e4c8,\n                0xc7e4ca,\n                0xc7e4cc,\n                0xc7e4cd,\n                0xc7e4cf,\n                0xc7e4d3,\n                0xc7e4d9,\n                0xc7e4e2,\n                0xc7e4e5,\n                0xc7e4e8,\n                0xc7e4ea,\n                0xc7e520,\n                0xc7e620,\n                0xc7e6ca,\n                0xc820c7,\n                0xc920c7,\n                0xc920e1,\n                0xc920e4,\n                0xc920e5,\n                0xc920e8,\n                0xca20c7,\n                0xcf20c7,\n                0xcfc920,\n                0xd120c7,\n                0xd1c920,\n                0xd320c7,\n                0xd920c7,\n                0xd9e4e9,\n                0xe1ea20,\n                0xe420c7,\n                0xe4c920,\n                0xe4e920,\n                0xe4ea20,\n                0xe520c7,\n                0xe5c720,\n                0xe5c920,\n                0xe5e620,\n                0xe620c7,\n                0xe720c7,\n                0xe7c720,\n                0xe8c7e4,\n                0xe8e620,\n                0xe920c7,\n                0xea20c7,\n                0xea20e5,\n                0xea20e8,\n                0xeac920,\n                0xead120,\n                0xeae620\n            ]\n        }\n        this.name = function (det) {\n            return 'ISO-8859-6'\n        }\n        this.language = function () {\n            return 'ar'\n        }\n    }\n}\nclass ISO_8859_7 extends sbcs {\n    constructor() {\n        super()\n        this.byteMap = function () {\n            return [\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x00,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x61,\n                0x62,\n                0x63,\n                0x64,\n                0x65,\n                0x66,\n                0x67,\n                0x68,\n                0x69,\n                0x6a,\n                0x6b,\n                0x6c,\n                0x6d,\n                0x6e,\n                0x6f,\n                0x70,\n                0x71,\n                0x72,\n                0x73,\n                0x74,\n                0x75,\n                0x76,\n                0x77,\n                0x78,\n                0x79,\n                0x7a,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x61,\n                0x62,\n                0x63,\n                0x64,\n                0x65,\n                0x66,\n                0x67,\n                0x68,\n                0x69,\n                0x6a,\n                0x6b,\n                0x6c,\n                0x6d,\n                0x6e,\n                0x6f,\n                0x70,\n                0x71,\n                0x72,\n                0x73,\n                0x74,\n                0x75,\n                0x76,\n                0x77,\n                0x78,\n                0x79,\n                0x7a,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0xa1,\n                0xa2,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0xdc,\n                0x20,\n                0xdd,\n                0xde,\n                0xdf,\n                0x20,\n                0xfc,\n                0x20,\n                0xfd,\n                0xfe,\n                0xc0,\n                0xe1,\n                0xe2,\n                0xe3,\n                0xe4,\n                0xe5,\n                0xe6,\n                0xe7,\n                0xe8,\n                0xe9,\n                0xea,\n                0xeb,\n                0xec,\n                0xed,\n                0xee,\n                0xef,\n                0xf0,\n                0xf1,\n                0x20,\n                0xf3,\n                0xf4,\n                0xf5,\n                0xf6,\n                0xf7,\n                0xf8,\n                0xf9,\n                0xfa,\n                0xfb,\n                0xdc,\n                0xdd,\n                0xde,\n                0xdf,\n                0xe0,\n                0xe1,\n                0xe2,\n                0xe3,\n                0xe4,\n                0xe5,\n                0xe6,\n                0xe7,\n                0xe8,\n                0xe9,\n                0xea,\n                0xeb,\n                0xec,\n                0xed,\n                0xee,\n                0xef,\n                0xf0,\n                0xf1,\n                0xf2,\n                0xf3,\n                0xf4,\n                0xf5,\n                0xf6,\n                0xf7,\n                0xf8,\n                0xf9,\n                0xfa,\n                0xfb,\n                0xfc,\n                0xfd,\n                0xfe,\n                0x20\n            ]\n        }\n        this.ngrams = function () {\n            return [\n                0x20e1ed,\n                0x20e1f0,\n                0x20e3e9,\n                0x20e4e9,\n                0x20e5f0,\n                0x20e720,\n                0x20eae1,\n                0x20ece5,\n                0x20ede1,\n                0x20ef20,\n                0x20f0e1,\n                0x20f0ef,\n                0x20f0f1,\n                0x20f3f4,\n                0x20f3f5,\n                0x20f4e7,\n                0x20f4ef,\n                0xdfe120,\n                0xe120e1,\n                0xe120f4,\n                0xe1e920,\n                0xe1ed20,\n                0xe1f0fc,\n                0xe1f220,\n                0xe3e9e1,\n                0xe5e920,\n                0xe5f220,\n                0xe720f4,\n                0xe7ed20,\n                0xe7f220,\n                0xe920f4,\n                0xe9e120,\n                0xe9eade,\n                0xe9f220,\n                0xeae1e9,\n                0xeae1f4,\n                0xece520,\n                0xed20e1,\n                0xed20e5,\n                0xed20f0,\n                0xede120,\n                0xeff220,\n                0xeff520,\n                0xf0eff5,\n                0xf0f1ef,\n                0xf0fc20,\n                0xf220e1,\n                0xf220e5,\n                0xf220ea,\n                0xf220f0,\n                0xf220f4,\n                0xf3e520,\n                0xf3e720,\n                0xf3f4ef,\n                0xf4e120,\n                0xf4e1e9,\n                0xf4e7ed,\n                0xf4e7f2,\n                0xf4e9ea,\n                0xf4ef20,\n                0xf4eff5,\n                0xf4f9ed,\n                0xf9ed20,\n                0xfeed20\n            ]\n        }\n        this.name = function (det) {\n            return det && det.fC1Bytes ? 'windows-1253' : 'ISO-8859-7'\n        }\n        this.language = function () {\n            return 'el'\n        }\n    }\n}\nclass ISO_8859_8 extends sbcs {\n    constructor() {\n        super()\n        this.byteMap = function () {\n            return [\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x00,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x61,\n                0x62,\n                0x63,\n                0x64,\n                0x65,\n                0x66,\n                0x67,\n                0x68,\n                0x69,\n                0x6a,\n                0x6b,\n                0x6c,\n                0x6d,\n                0x6e,\n                0x6f,\n                0x70,\n                0x71,\n                0x72,\n                0x73,\n                0x74,\n                0x75,\n                0x76,\n                0x77,\n                0x78,\n                0x79,\n                0x7a,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x61,\n                0x62,\n                0x63,\n                0x64,\n                0x65,\n                0x66,\n                0x67,\n                0x68,\n                0x69,\n                0x6a,\n                0x6b,\n                0x6c,\n                0x6d,\n                0x6e,\n                0x6f,\n                0x70,\n                0x71,\n                0x72,\n                0x73,\n                0x74,\n                0x75,\n                0x76,\n                0x77,\n                0x78,\n                0x79,\n                0x7a,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0xb5,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0xe0,\n                0xe1,\n                0xe2,\n                0xe3,\n                0xe4,\n                0xe5,\n                0xe6,\n                0xe7,\n                0xe8,\n                0xe9,\n                0xea,\n                0xeb,\n                0xec,\n                0xed,\n                0xee,\n                0xef,\n                0xf0,\n                0xf1,\n                0xf2,\n                0xf3,\n                0xf4,\n                0xf5,\n                0xf6,\n                0xf7,\n                0xf8,\n                0xf9,\n                0xfa,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20\n            ]\n        }\n        this.ngrams = function () {\n            return [\n                new NGramsPlusLang('he', [\n                    0x20e0e5,\n                    0x20e0e7,\n                    0x20e0e9,\n                    0x20e0fa,\n                    0x20e1e9,\n                    0x20e1ee,\n                    0x20e4e0,\n                    0x20e4e5,\n                    0x20e4e9,\n                    0x20e4ee,\n                    0x20e4f2,\n                    0x20e4f9,\n                    0x20e4fa,\n                    0x20ece0,\n                    0x20ece4,\n                    0x20eee0,\n                    0x20f2ec,\n                    0x20f9ec,\n                    0xe0fa20,\n                    0xe420e0,\n                    0xe420e1,\n                    0xe420e4,\n                    0xe420ec,\n                    0xe420ee,\n                    0xe420f9,\n                    0xe4e5e0,\n                    0xe5e020,\n                    0xe5ed20,\n                    0xe5ef20,\n                    0xe5f820,\n                    0xe5fa20,\n                    0xe920e4,\n                    0xe9e420,\n                    0xe9e5fa,\n                    0xe9e9ed,\n                    0xe9ed20,\n                    0xe9ef20,\n                    0xe9f820,\n                    0xe9fa20,\n                    0xec20e0,\n                    0xec20e4,\n                    0xece020,\n                    0xece420,\n                    0xed20e0,\n                    0xed20e1,\n                    0xed20e4,\n                    0xed20ec,\n                    0xed20ee,\n                    0xed20f9,\n                    0xeee420,\n                    0xef20e4,\n                    0xf0e420,\n                    0xf0e920,\n                    0xf0e9ed,\n                    0xf2ec20,\n                    0xf820e4,\n                    0xf8e9ed,\n                    0xf9ec20,\n                    0xfa20e0,\n                    0xfa20e1,\n                    0xfa20e4,\n                    0xfa20ec,\n                    0xfa20ee,\n                    0xfa20f9\n                ]),\n                new NGramsPlusLang('he', [\n                    0x20e0e5,\n                    0x20e0ec,\n                    0x20e4e9,\n                    0x20e4ec,\n                    0x20e4ee,\n                    0x20e4f0,\n                    0x20e9f0,\n                    0x20ecf2,\n                    0x20ecf9,\n                    0x20ede5,\n                    0x20ede9,\n                    0x20efe5,\n                    0x20efe9,\n                    0x20f8e5,\n                    0x20f8e9,\n                    0x20fae0,\n                    0x20fae5,\n                    0x20fae9,\n                    0xe020e4,\n                    0xe020ec,\n                    0xe020ed,\n                    0xe020fa,\n                    0xe0e420,\n                    0xe0e5e4,\n                    0xe0ec20,\n                    0xe0ee20,\n                    0xe120e4,\n                    0xe120ed,\n                    0xe120fa,\n                    0xe420e4,\n                    0xe420e9,\n                    0xe420ec,\n                    0xe420ed,\n                    0xe420ef,\n                    0xe420f8,\n                    0xe420fa,\n                    0xe4ec20,\n                    0xe5e020,\n                    0xe5e420,\n                    0xe7e020,\n                    0xe9e020,\n                    0xe9e120,\n                    0xe9e420,\n                    0xec20e4,\n                    0xec20ed,\n                    0xec20fa,\n                    0xecf220,\n                    0xecf920,\n                    0xede9e9,\n                    0xede9f0,\n                    0xede9f8,\n                    0xee20e4,\n                    0xee20ed,\n                    0xee20fa,\n                    0xeee120,\n                    0xeee420,\n                    0xf2e420,\n                    0xf920e4,\n                    0xf920ed,\n                    0xf920fa,\n                    0xf9e420,\n                    0xfae020,\n                    0xfae420,\n                    0xfae5e9\n                ])\n            ]\n        }\n        this.name = function (det) {\n            return det && det.fC1Bytes ? 'windows-1255' : 'ISO-8859-8'\n        }\n        this.language = function () {\n            return 'he'\n        }\n    }\n}\nclass ISO_8859_9 extends sbcs {\n    constructor() {\n        super()\n        this.byteMap = function () {\n            return [\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x00,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x61,\n                0x62,\n                0x63,\n                0x64,\n                0x65,\n                0x66,\n                0x67,\n                0x68,\n                0x69,\n                0x6a,\n                0x6b,\n                0x6c,\n                0x6d,\n                0x6e,\n                0x6f,\n                0x70,\n                0x71,\n                0x72,\n                0x73,\n                0x74,\n                0x75,\n                0x76,\n                0x77,\n                0x78,\n                0x79,\n                0x7a,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x61,\n                0x62,\n                0x63,\n                0x64,\n                0x65,\n                0x66,\n                0x67,\n                0x68,\n                0x69,\n                0x6a,\n                0x6b,\n                0x6c,\n                0x6d,\n                0x6e,\n                0x6f,\n                0x70,\n                0x71,\n                0x72,\n                0x73,\n                0x74,\n                0x75,\n                0x76,\n                0x77,\n                0x78,\n                0x79,\n                0x7a,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0xaa,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0xb5,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0xba,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0xe0,\n                0xe1,\n                0xe2,\n                0xe3,\n                0xe4,\n                0xe5,\n                0xe6,\n                0xe7,\n                0xe8,\n                0xe9,\n                0xea,\n                0xeb,\n                0xec,\n                0xed,\n                0xee,\n                0xef,\n                0xf0,\n                0xf1,\n                0xf2,\n                0xf3,\n                0xf4,\n                0xf5,\n                0xf6,\n                0x20,\n                0xf8,\n                0xf9,\n                0xfa,\n                0xfb,\n                0xfc,\n                0x69,\n                0xfe,\n                0xdf,\n                0xe0,\n                0xe1,\n                0xe2,\n                0xe3,\n                0xe4,\n                0xe5,\n                0xe6,\n                0xe7,\n                0xe8,\n                0xe9,\n                0xea,\n                0xeb,\n                0xec,\n                0xed,\n                0xee,\n                0xef,\n                0xf0,\n                0xf1,\n                0xf2,\n                0xf3,\n                0xf4,\n                0xf5,\n                0xf6,\n                0x20,\n                0xf8,\n                0xf9,\n                0xfa,\n                0xfb,\n                0xfc,\n                0xfd,\n                0xfe,\n                0xff\n            ]\n        }\n        this.ngrams = function () {\n            return [\n                0x206261,\n                0x206269,\n                0x206275,\n                0x206461,\n                0x206465,\n                0x206765,\n                0x206861,\n                0x20696c,\n                0x206b61,\n                0x206b6f,\n                0x206d61,\n                0x206f6c,\n                0x207361,\n                0x207461,\n                0x207665,\n                0x207961,\n                0x612062,\n                0x616b20,\n                0x616c61,\n                0x616d61,\n                0x616e20,\n                0x616efd,\n                0x617220,\n                0x617261,\n                0x6172fd,\n                0x6173fd,\n                0x617961,\n                0x626972,\n                0x646120,\n                0x646520,\n                0x646920,\n                0x652062,\n                0x65206b,\n                0x656469,\n                0x656e20,\n                0x657220,\n                0x657269,\n                0x657369,\n                0x696c65,\n                0x696e20,\n                0x696e69,\n                0x697220,\n                0x6c616e,\n                0x6c6172,\n                0x6c6520,\n                0x6c6572,\n                0x6e2061,\n                0x6e2062,\n                0x6e206b,\n                0x6e6461,\n                0x6e6465,\n                0x6e6520,\n                0x6e6920,\n                0x6e696e,\n                0x6efd20,\n                0x72696e,\n                0x72fd6e,\n                0x766520,\n                0x796120,\n                0x796f72,\n                0xfd6e20,\n                0xfd6e64,\n                0xfd6efd,\n                0xfdf0fd\n            ]\n        }\n        this.name = function (det) {\n            return det && det.fC1Bytes ? 'windows-1254' : 'ISO-8859-9'\n        }\n        this.language = function () {\n            return 'tr'\n        }\n    }\n}\nclass windows_1251 extends sbcs {\n    constructor() {\n        super()\n        this.byteMap = function () {\n            return [\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x00,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x61,\n                0x62,\n                0x63,\n                0x64,\n                0x65,\n                0x66,\n                0x67,\n                0x68,\n                0x69,\n                0x6a,\n                0x6b,\n                0x6c,\n                0x6d,\n                0x6e,\n                0x6f,\n                0x70,\n                0x71,\n                0x72,\n                0x73,\n                0x74,\n                0x75,\n                0x76,\n                0x77,\n                0x78,\n                0x79,\n                0x7a,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x61,\n                0x62,\n                0x63,\n                0x64,\n                0x65,\n                0x66,\n                0x67,\n                0x68,\n                0x69,\n                0x6a,\n                0x6b,\n                0x6c,\n                0x6d,\n                0x6e,\n                0x6f,\n                0x70,\n                0x71,\n                0x72,\n                0x73,\n                0x74,\n                0x75,\n                0x76,\n                0x77,\n                0x78,\n                0x79,\n                0x7a,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x90,\n                0x83,\n                0x20,\n                0x83,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x9a,\n                0x20,\n                0x9c,\n                0x9d,\n                0x9e,\n                0x9f,\n                0x90,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x9a,\n                0x20,\n                0x9c,\n                0x9d,\n                0x9e,\n                0x9f,\n                0x20,\n                0xa2,\n                0xa2,\n                0xbc,\n                0x20,\n                0xb4,\n                0x20,\n                0x20,\n                0xb8,\n                0x20,\n                0xba,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0xbf,\n                0x20,\n                0x20,\n                0xb3,\n                0xb3,\n                0xb4,\n                0xb5,\n                0x20,\n                0x20,\n                0xb8,\n                0x20,\n                0xba,\n                0x20,\n                0xbc,\n                0xbe,\n                0xbe,\n                0xbf,\n                0xe0,\n                0xe1,\n                0xe2,\n                0xe3,\n                0xe4,\n                0xe5,\n                0xe6,\n                0xe7,\n                0xe8,\n                0xe9,\n                0xea,\n                0xeb,\n                0xec,\n                0xed,\n                0xee,\n                0xef,\n                0xf0,\n                0xf1,\n                0xf2,\n                0xf3,\n                0xf4,\n                0xf5,\n                0xf6,\n                0xf7,\n                0xf8,\n                0xf9,\n                0xfa,\n                0xfb,\n                0xfc,\n                0xfd,\n                0xfe,\n                0xff,\n                0xe0,\n                0xe1,\n                0xe2,\n                0xe3,\n                0xe4,\n                0xe5,\n                0xe6,\n                0xe7,\n                0xe8,\n                0xe9,\n                0xea,\n                0xeb,\n                0xec,\n                0xed,\n                0xee,\n                0xef,\n                0xf0,\n                0xf1,\n                0xf2,\n                0xf3,\n                0xf4,\n                0xf5,\n                0xf6,\n                0xf7,\n                0xf8,\n                0xf9,\n                0xfa,\n                0xfb,\n                0xfc,\n                0xfd,\n                0xfe,\n                0xff\n            ]\n        }\n        this.ngrams = function () {\n            return [\n                0x20e220,\n                0x20e2ee,\n                0x20e4ee,\n                0x20e7e0,\n                0x20e820,\n                0x20eae0,\n                0x20eaee,\n                0x20ede0,\n                0x20ede5,\n                0x20eee1,\n                0x20efee,\n                0x20eff0,\n                0x20f0e0,\n                0x20f1ee,\n                0x20f1f2,\n                0x20f2ee,\n                0x20f7f2,\n                0x20fdf2,\n                0xe0ede8,\n                0xe0f2fc,\n                0xe3ee20,\n                0xe5ebfc,\n                0xe5ede8,\n                0xe5f1f2,\n                0xe5f220,\n                0xe820ef,\n                0xe8e520,\n                0xe8e820,\n                0xe8ff20,\n                0xebe5ed,\n                0xebe820,\n                0xebfced,\n                0xede020,\n                0xede520,\n                0xede8e5,\n                0xede8ff,\n                0xedee20,\n                0xedeee2,\n                0xee20e2,\n                0xee20ef,\n                0xee20f1,\n                0xeee220,\n                0xeee2e0,\n                0xeee3ee,\n                0xeee920,\n                0xeeebfc,\n                0xeeec20,\n                0xeef1f2,\n                0xefeeeb,\n                0xeff0e5,\n                0xeff0e8,\n                0xeff0ee,\n                0xf0e0e2,\n                0xf0e5e4,\n                0xf1f2e0,\n                0xf1f2e2,\n                0xf1f2e8,\n                0xf1ff20,\n                0xf2e5eb,\n                0xf2ee20,\n                0xf2eef0,\n                0xf2fc20,\n                0xf7f2ee,\n                0xfbf520\n            ]\n        }\n        this.name = function (det) {\n            return 'windows-1251'\n        }\n        this.language = function () {\n            return 'ru'\n        }\n    }\n}\nclass windows_1256 extends sbcs {\n    constructor() {\n        super()\n        this.byteMap = function () {\n            return [\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x00,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x61,\n                0x62,\n                0x63,\n                0x64,\n                0x65,\n                0x66,\n                0x67,\n                0x68,\n                0x69,\n                0x6a,\n                0x6b,\n                0x6c,\n                0x6d,\n                0x6e,\n                0x6f,\n                0x70,\n                0x71,\n                0x72,\n                0x73,\n                0x74,\n                0x75,\n                0x76,\n                0x77,\n                0x78,\n                0x79,\n                0x7a,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x61,\n                0x62,\n                0x63,\n                0x64,\n                0x65,\n                0x66,\n                0x67,\n                0x68,\n                0x69,\n                0x6a,\n                0x6b,\n                0x6c,\n                0x6d,\n                0x6e,\n                0x6f,\n                0x70,\n                0x71,\n                0x72,\n                0x73,\n                0x74,\n                0x75,\n                0x76,\n                0x77,\n                0x78,\n                0x79,\n                0x7a,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x81,\n                0x20,\n                0x83,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x88,\n                0x20,\n                0x8a,\n                0x20,\n                0x9c,\n                0x8d,\n                0x8e,\n                0x8f,\n                0x90,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x98,\n                0x20,\n                0x9a,\n                0x20,\n                0x9c,\n                0x20,\n                0x20,\n                0x9f,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0xaa,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0xb5,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0xc0,\n                0xc1,\n                0xc2,\n                0xc3,\n                0xc4,\n                0xc5,\n                0xc6,\n                0xc7,\n                0xc8,\n                0xc9,\n                0xca,\n                0xcb,\n                0xcc,\n                0xcd,\n                0xce,\n                0xcf,\n                0xd0,\n                0xd1,\n                0xd2,\n                0xd3,\n                0xd4,\n                0xd5,\n                0xd6,\n                0x20,\n                0xd8,\n                0xd9,\n                0xda,\n                0xdb,\n                0xdc,\n                0xdd,\n                0xde,\n                0xdf,\n                0xe0,\n                0xe1,\n                0xe2,\n                0xe3,\n                0xe4,\n                0xe5,\n                0xe6,\n                0xe7,\n                0xe8,\n                0xe9,\n                0xea,\n                0xeb,\n                0xec,\n                0xed,\n                0xee,\n                0xef,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0xf4,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0xf9,\n                0x20,\n                0xfb,\n                0xfc,\n                0x20,\n                0x20,\n                0xff\n            ]\n        }\n        this.ngrams = function () {\n            return [\n                0x20c7e1,\n                0x20c7e4,\n                0x20c8c7,\n                0x20dae1,\n                0x20dded,\n                0x20e1e1,\n                0x20e3e4,\n                0x20e6c7,\n                0xc720c7,\n                0xc7c120,\n                0xc7ca20,\n                0xc7d120,\n                0xc7e120,\n                0xc7e1c3,\n                0xc7e1c7,\n                0xc7e1c8,\n                0xc7e1ca,\n                0xc7e1cc,\n                0xc7e1cd,\n                0xc7e1cf,\n                0xc7e1d3,\n                0xc7e1da,\n                0xc7e1de,\n                0xc7e1e3,\n                0xc7e1e6,\n                0xc7e1ed,\n                0xc7e320,\n                0xc7e420,\n                0xc7e4ca,\n                0xc820c7,\n                0xc920c7,\n                0xc920dd,\n                0xc920e1,\n                0xc920e3,\n                0xc920e6,\n                0xca20c7,\n                0xcf20c7,\n                0xcfc920,\n                0xd120c7,\n                0xd1c920,\n                0xd320c7,\n                0xda20c7,\n                0xdae1ec,\n                0xdded20,\n                0xe120c7,\n                0xe1c920,\n                0xe1ec20,\n                0xe1ed20,\n                0xe320c7,\n                0xe3c720,\n                0xe3c920,\n                0xe3e420,\n                0xe420c7,\n                0xe520c7,\n                0xe5c720,\n                0xe6c7e1,\n                0xe6e420,\n                0xec20c7,\n                0xed20c7,\n                0xed20e3,\n                0xed20e6,\n                0xedc920,\n                0xedd120,\n                0xede420\n            ]\n        }\n        this.name = function (det) {\n            return 'windows-1256'\n        }\n        this.language = function () {\n            return 'ar'\n        }\n    }\n}\nclass KOI8_R extends sbcs {\n    constructor() {\n        super()\n        this.byteMap = function () {\n            return [\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x00,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x61,\n                0x62,\n                0x63,\n                0x64,\n                0x65,\n                0x66,\n                0x67,\n                0x68,\n                0x69,\n                0x6a,\n                0x6b,\n                0x6c,\n                0x6d,\n                0x6e,\n                0x6f,\n                0x70,\n                0x71,\n                0x72,\n                0x73,\n                0x74,\n                0x75,\n                0x76,\n                0x77,\n                0x78,\n                0x79,\n                0x7a,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x61,\n                0x62,\n                0x63,\n                0x64,\n                0x65,\n                0x66,\n                0x67,\n                0x68,\n                0x69,\n                0x6a,\n                0x6b,\n                0x6c,\n                0x6d,\n                0x6e,\n                0x6f,\n                0x70,\n                0x71,\n                0x72,\n                0x73,\n                0x74,\n                0x75,\n                0x76,\n                0x77,\n                0x78,\n                0x79,\n                0x7a,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0xa3,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0xa3,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0x20,\n                0xc0,\n                0xc1,\n                0xc2,\n                0xc3,\n                0xc4,\n                0xc5,\n                0xc6,\n                0xc7,\n                0xc8,\n                0xc9,\n                0xca,\n                0xcb,\n                0xcc,\n                0xcd,\n                0xce,\n                0xcf,\n                0xd0,\n                0xd1,\n                0xd2,\n                0xd3,\n                0xd4,\n                0xd5,\n                0xd6,\n                0xd7,\n                0xd8,\n                0xd9,\n                0xda,\n                0xdb,\n                0xdc,\n                0xdd,\n                0xde,\n                0xdf,\n                0xc0,\n                0xc1,\n                0xc2,\n                0xc3,\n                0xc4,\n                0xc5,\n                0xc6,\n                0xc7,\n                0xc8,\n                0xc9,\n                0xca,\n                0xcb,\n                0xcc,\n                0xcd,\n                0xce,\n                0xcf,\n                0xd0,\n                0xd1,\n                0xd2,\n                0xd3,\n                0xd4,\n                0xd5,\n                0xd6,\n                0xd7,\n                0xd8,\n                0xd9,\n                0xda,\n                0xdb,\n                0xdc,\n                0xdd,\n                0xde,\n                0xdf\n            ]\n        }\n        this.ngrams = function () {\n            return [\n                0x20c4cf,\n                0x20c920,\n                0x20cbc1,\n                0x20cbcf,\n                0x20cec1,\n                0x20cec5,\n                0x20cfc2,\n                0x20d0cf,\n                0x20d0d2,\n                0x20d2c1,\n                0x20d3cf,\n                0x20d3d4,\n                0x20d4cf,\n                0x20d720,\n                0x20d7cf,\n                0x20dac1,\n                0x20dcd4,\n                0x20ded4,\n                0xc1cec9,\n                0xc1d4d8,\n                0xc5ccd8,\n                0xc5cec9,\n                0xc5d3d4,\n                0xc5d420,\n                0xc7cf20,\n                0xc920d0,\n                0xc9c520,\n                0xc9c920,\n                0xc9d120,\n                0xccc5ce,\n                0xccc920,\n                0xccd8ce,\n                0xcec120,\n                0xcec520,\n                0xcec9c5,\n                0xcec9d1,\n                0xcecf20,\n                0xcecfd7,\n                0xcf20d0,\n                0xcf20d3,\n                0xcf20d7,\n                0xcfc7cf,\n                0xcfca20,\n                0xcfccd8,\n                0xcfcd20,\n                0xcfd3d4,\n                0xcfd720,\n                0xcfd7c1,\n                0xd0cfcc,\n                0xd0d2c5,\n                0xd0d2c9,\n                0xd0d2cf,\n                0xd2c1d7,\n                0xd2c5c4,\n                0xd3d120,\n                0xd3d4c1,\n                0xd3d4c9,\n                0xd3d4d7,\n                0xd4c5cc,\n                0xd4cf20,\n                0xd4cfd2,\n                0xd4d820,\n                0xd9c820,\n                0xded4cf\n            ]\n        }\n        this.name = function (det) {\n            return 'KOI8-R'\n        }\n        this.language = function () {\n            return 'ru'\n        }\n    }\n}\n;('use strict')\nclass UTF_16BE {\n    name() {\n        return 'UTF-16BE'\n    }\n    match(det) {\n        var input = det.fRawInput\n        if (input.length >= 2 && (input[0] & 0xff) == 0xfe && (input[1] & 0xff) == 0xff) {\n            return new Match(det, this, 100)\n        }\n        return null\n    }\n}\nclass UTF_16LE {\n    name() {\n        return 'UTF-16LE'\n    }\n    match(det) {\n        var input = det.fRawInput\n        if (input.length >= 2 && (input[0] & 0xff) == 0xff && (input[1] & 0xff) == 0xfe) {\n            if (input.length >= 4 && input[2] == 0x00 && input[3] == 0x00) {\n                return null\n            }\n            return new Match(det, this, 100)\n        }\n        return null\n    }\n}\nclass UTF_32 {\n    match(det) {\n        var input = det.fRawInput,\n            limit = (det.fRawLength / 4) * 4,\n            numValid = 0,\n            numInvalid = 0,\n            hasBOM = false,\n            confidence = 0\n        if (limit == 0) {\n            return null\n        }\n        if (this.getChar(input, 0) == 0x0000feff) {\n            hasBOM = true\n        }\n        for (var i = 0; i < limit; i += 4) {\n            var ch = this.getChar(input, i)\n            if (ch < 0 || ch >= 0x10ffff || (ch >= 0xd800 && ch <= 0xdfff)) {\n                numInvalid += 1\n            } else {\n                numValid += 1\n            }\n        }\n        if (hasBOM && numInvalid == 0) {\n            confidence = 100\n        } else if (hasBOM && numValid > numInvalid * 10) {\n            confidence = 80\n        } else if (numValid > 3 && numInvalid == 0) {\n            confidence = 100\n        } else if (numValid > 0 && numInvalid == 0) {\n            confidence = 80\n        } else if (numValid > numInvalid * 10) {\n            confidence = 25\n        }\n        return confidence == 0 ? null : new Match(det, this, confidence)\n    }\n}\nclass UTF_32BE extends UTF_32 {\n    constructor() {\n        super()\n        this.name = function () {\n            return 'UTF-32BE'\n        }\n        this.getChar = function (input, index) {\n            return (\n                ((input[index + 0] & 0xff) << 24) |\n                ((input[index + 1] & 0xff) << 16) |\n                ((input[index + 2] & 0xff) << 8) |\n                (input[index + 3] & 0xff)\n            )\n        }\n    }\n}\nclass UTF_32LE extends UTF_32 {\n    constructor() {\n        super()\n        this.name = function () {\n            return 'UTF-32LE'\n        }\n        this.getChar = function (input, index) {\n            return (\n                ((input[index + 3] & 0xff) << 24) |\n                ((input[index + 2] & 0xff) << 16) |\n                ((input[index + 1] & 0xff) << 8) |\n                (input[index + 0] & 0xff)\n            )\n        }\n    }\n}\nclass UTF_8 {\n    name() {\n        return 'UTF-8'\n    }\n    match(det) {\n        var hasBOM = false,\n            numValid = 0,\n            numInvalid = 0,\n            input = det.fRawInput,\n            trailBytes = 0,\n            confidence\n        if (\n            det.fRawLength >= 3 &&\n            (input[0] & 0xff) == 0xef &&\n            (input[1] & 0xff) == 0xbb &&\n            (input[2] & 0xff) == 0xbf\n        ) {\n            hasBOM = true\n        }\n        for (var i = 0; i < det.fRawLength; i++) {\n            var b = input[i]\n            if ((b & 0x80) == 0) continue\n            if ((b & 0x0e0) == 0x0c0) {\n                trailBytes = 1\n            } else if ((b & 0x0f0) == 0x0e0) {\n                trailBytes = 2\n            } else if ((b & 0x0f8) == 0xf0) {\n                trailBytes = 3\n            } else {\n                numInvalid++\n                if (numInvalid > 5) break\n                trailBytes = 0\n            }\n            for (;;) {\n                i++\n                if (i >= det.fRawLength) break\n                if ((input[i] & 0xc0) != 0x080) {\n                    numInvalid++\n                    break\n                }\n                if (--trailBytes == 0) {\n                    numValid++\n                    break\n                }\n            }\n        }\n        confidence = 0\n        if (hasBOM && numInvalid == 0) confidence = 100\n        else if (hasBOM && numValid > numInvalid * 10) confidence = 80\n        else if (numValid > 3 && numInvalid == 0) confidence = 100\n        else if (numValid > 0 && numInvalid == 0) confidence = 80\n        else if (numValid == 0 && numInvalid == 0) confidence = 10\n        else if (numValid > numInvalid * 10) confidence = 25\n        else return null\n        return new Match(det, this, confidence)\n    }\n}\nvar fs = (() => {\n    const AD_TYPE_BINARY = 1\n    const readByteFileSync = (path) => {\n        const ADODB = require('ADODB.stream')\n        let byte = ''\n        try {\n            ADODB.Type = AD_TYPE_BINARY\n            ADODB.Open()\n            ADODB.LoadFromFile(path)\n            byte = ADODB.Read()\n        } catch (error) {\n            console.log(`error readByteFileSync ${error} ${path}`)\n        } finally {\n            ADODB.Close()\n        }\n        return byte\n    }\n    const readFileSync = (path) => {\n        const byte = readByteFileSync(path)\n        return new Buffer(byte)\n    }\n    return { readFileSync }\n})()\n\nvar recognisers = [\n    new UTF_8(),\n    new UTF_16BE(),\n    new UTF_16LE(),\n    new UTF_32BE(),\n    new UTF_32LE(),\n    new sjis(),\n    new big5(),\n    new euc_jp(),\n    new euc_kr(),\n    new gb_18030(),\n    new ISO_2022_JP(),\n    new ISO_2022_KR(),\n    new ISO_2022_CN(),\n    new ISO_8859_1(),\n    new ISO_8859_2(),\n    new ISO_8859_5(),\n    new ISO_8859_6(),\n    new ISO_8859_7(),\n    new ISO_8859_8(),\n    new ISO_8859_9(),\n    new windows_1251(),\n    new windows_1256(),\n    new KOI8_R()\n]\nfunction detect(buffer, opts) {\n    var fByteStats = []\n    for (var i = 0; i < 256; i++) fByteStats[i] = 0\n    for (var i = buffer.length - 1; i >= 0; i--) fByteStats[buffer[i] & 0x00ff]++\n    var fC1Bytes = false\n    for (var i = 0x80; i <= 0x9f; i += 1) {\n        if (fByteStats[i] != 0) {\n            fC1Bytes = true\n            break\n        }\n    }\n    var context = {\n        fByteStats: fByteStats,\n        fC1Bytes: fC1Bytes,\n        fRawInput: buffer,\n        fRawLength: buffer.length,\n        fInputBytes: buffer,\n        fInputLen: buffer.length\n    }\n    var matches = recognisers\n        .map(function (rec) {\n            return rec.match(context)\n        })\n        .filter(function (match) {\n            return !!match\n        })\n        .sort(function (a, b) {\n            return b.confidence - a.confidence\n        })\n    if (opts && opts.returnAllMatches === true) {\n        return matches\n    } else {\n        return matches.length > 0 ? matches[0].name : null\n    }\n}\nfunction detectFile(filepath, opts, cb) {\n    if (typeof opts === 'function') {\n        cb = opts\n        opts = undefined\n    }\n    var fd\n    var handler = function (err, buffer) {\n        if (fd) {\n            fs.closeSync(fd)\n        }\n        if (err) return cb(err, null)\n        cb(null, detect(buffer, opts))\n    }\n    if (opts && opts.sampleSize) {\n        ;(fd = fs.openSync(filepath, 'r')), (sample = Buffer.allocUnsafe(opts.sampleSize))\n        fs.read(fd, sample, 0, opts.sampleSize, null, function (err) {\n            handler(err, sample)\n        })\n        return\n    }\n    fs.readFile(filepath, handler)\n}\nfunction detectFileSync(filepath, opts) {\n    /*\n  if (opts && opts.sampleSize) {\n      var fd = fs.openSync(filepath, \"r\"),\n          sample = Buffer.allocUnsafe(opts.sampleSize);\n      fs.readSync(fd, sample, 0, opts.sampleSize);\n      fs.closeSync(fd);\n      return detect(sample, opts);\n  }\n  */\n    return detect(fs.readFileSync(filepath), opts)\n}\nfunction detectAll(buffer, opts) {\n    if (typeof opts !== 'object') {\n        opts = {}\n    }\n    opts.returnAllMatches = true\n    return detect(buffer, opts)\n}\nfunction detectFileAll(filepath, opts, cb) {\n    if (typeof opts === 'function') {\n        cb = opts\n        opts = undefined\n    }\n    if (typeof opts !== 'object') {\n        opts = {}\n    }\n    opts.returnAllMatches = true\n    detectFile(filepath, opts, cb)\n}\nfunction detectFileAllSync(filepath, opts) {\n    if (typeof opts !== 'object') {\n        opts = {}\n    }\n    opts.returnAllMatches = true\n    return detectFileSync(filepath, opts)\n}\nmodule.exports = { detect, detectFileSync }\n",
                "mapping": {},
                "path": "{wes}/chardet"
            },
            "console": {
                "source": "var NONE = ''\nvar SPACE = ' '\nvar rSPECIFIER = /(%[sdfoj])/i\nvar rSEQ = /\\u001B\\[[\\d;]+m/g\n\nfunction color(red, green, blue) {\n    var args = Array.prototype.slice.call(arguments)\n    if (args.length === 1 && args[0].startsWith('#')) {\n        red = parseInt(args[0].slice(1, 3), 16)\n        green = parseInt(args[0].slice(3, 5), 16)\n        blue = parseInt(args[0].slice(5, 7), 16)\n    }\n    return '\\u001B[38;2;' + red + ';' + green + ';' + blue + 'm'\n}\n\nfunction bgColor(red, green, blue) {\n    var args = Array.prototype.slice.call(arguments)\n    if (args.length === 1 && args[0].startsWith('#')) {\n        red = parseInt(args[0].slice(1, 3), 16)\n        green = parseInt(args[0].slice(3, 5), 16)\n        blue = parseInt(args[0].slice(5, 7), 16)\n    }\n    return '\\u001B[48;2;' + red + ';' + green + ';' + blue + 'm'\n}\n\nfunction cursorUp(line) {\n    return `\\u001B[${line}A`\n}\n\nfunction cursorDown(line) {\n    return `\\u001B[${line}B`\n}\n\nfunction cursorForward(character) {\n    return `\\u001B[${character}C`\n}\n\nfunction cursorBack(character) {\n    return `\\u001B[${character}D`\n}\n\nvar ansi = {\n    clear: '\\u001B[0m',\n    bold: '\\u001B[1m',\n    underscore: '\\u001B[4m',\n    blink: '\\u001B[5m',\n    reverse: '\\u001B[7m',\n    concealed: '\\u001B[8m',\n\n    black: '\\u001B[30m',\n    red: '\\u001B[31m',\n    green: '\\u001B[32m',\n    yellow: '\\u001B[33m',\n    blue: '\\u001B[34m',\n    magenta: '\\u001B[35m',\n    cyan: '\\u001B[36m',\n    silver: '\\u001B[37m',\n\n    gray: '\\u001B[90m',\n    brightRed: '\\u001B[91m',\n    brightGreen: '\\u001B[92m',\n    brightYellow: '\\u001B[93m',\n    brightBlue: '\\u001B[94m',\n    brightMagenta: '\\u001B[95m',\n    brightCyan: '\\u001B[96m',\n    white: '\\u001B[97m',\n\n    bgBlack: '\\u001B[40m',\n    bgRed: '\\u001B[41m',\n    bgGreen: '\\u001B[42m',\n    bgYellow: '\\u001B[43m',\n    bgBlue: '\\u001B[44m',\n    bgMagenta: '\\u001B[45m',\n    bgCyan: '\\u001B[46m',\n    bgSilver: '\\u001B[47m',\n\n    bgGray: '\\u001B[100m',\n    bgBrightRed: '\\u001B[101m',\n    bgBrightGreen: '\\u001B[102m',\n    bgBrightYellow: '\\u001B[103m',\n    bgBrightBlue: '\\u001B[104m',\n    bgBrightMagenta: '\\u001B[105m',\n    bgBrightCyan: '\\u001B[106m',\n    bgWhite: '\\u001B[107m',\n\n    color: color,\n    bgColor: bgColor,\n    cursorUp: cursorUp,\n    cursorDown: cursorDown,\n    cursorForward: cursorForward,\n    cursorBack: cursorBack\n}\n\nfunction normalize(arg) {\n    var args = Array.prototype.slice.call(arg)\n    if (args.length === 0) return\n    var message = args.shift()\n    if (args.length === 0) return message\n    while (rSPECIFIER.test(message) && args.length > 0) {\n        var val = args.shift()\n        message = message.replace(rSPECIFIER, function ($1) {\n            if ($1 === '%s' || $1 === '%S') return String(val)\n            if ($1 === '%d' || $1 === '%D') return parseInt(val, 10)\n            if ($1 === '%f' || $1 === '%F') return Number(val)\n            if ($1 === '%o') return req('inspect')(val)\n            if ($1 === '%O') return req('inspect')(val, { indent: true, colors: true })\n            if ($1 === '%j') {\n                try {\n                    return JSON.stringify(val)\n                } catch (error) {\n                    return val\n                }\n            }\n            if ($1 === '%J') {\n                try {\n                    return JSON.stringify(val, null, 2)\n                } catch (error) {\n                    return val\n                }\n            }\n            return $1\n        })\n    }\n    if (argv.length > 0) message += args.join(SPACE)\n    return message\n}\n\nfunction log() {\n    var message = normalize(arguments)\n    var monotoneMessage = removeColor(message)\n    if (argv.has('monotone')) WScript.StdOut.WriteLine(monotoneMessage)\n    else WScript.StdErr.WriteLine(message + ansi.clear)\n    return monotoneMessage\n}\n\nfunction print() {\n    var message = normalize(arguments)\n    var monotoneMessage = removeColor(message)\n    if (argv.has('monotone')) WScript.StdOut.Write(monotoneMessage)\n    else WScript.StdErr.Write(message + ansi.clear)\n    return monotoneMessage\n}\n\nfunction debug() {\n    var isDebugOption = argv.has('debug')\n    if (!isDebugOption) return\n    var message = normalize(arguments)\n    var monotoneMessage = removeColor(message)\n    if (argv.has('monotone')) WScript.StdOut.WriteLine('DEBUG: ' + monotoneMessage)\n    else WScript.StdErr.WriteLine('\\u001B[91m\\u001B[7mDEBUG:\\u001B[0m ' + message + ansi.clear)\n    return monotoneMessage\n}\n\nfunction removeColor(message) {\n    if (typeof message === 'string') return message.replace(rSEQ, NONE)\n    return message\n}\n\nmodule.exports = {\n    log: log,\n    print: print,\n    debug: debug,\n    normalize: normalize,\n    ansi: ansi\n}\n",
                "mapping": {},
                "path": "{wes}/console"
            },
            "day": {
                "source": "const zoro = '0'\nconst doubleZero = '00'\n\nclass Day extends Date {\n    [Symbol.toPrimitive](hint) {\n        if (hint === 'number') return this.getTime()\n        else {\n            let year = this.getFullYear()\n            let month = (zoro + (this.getMonth() + 1)).slice(-2)\n            let date = (zoro + this.getDate()).slice(-2)\n            let hours = (zoro + this.getHours()).slice(-2)\n            let minutes = (zoro + this.getMinutes()).slice(-2)\n            let seconds = (zoro + this.getSeconds()).slice(-2)\n            let milliseconds = (doubleZero + this.getMilliseconds()).slice(-3)\n            return `${year}/${month}/${date} ${hours}:${minutes}:${seconds}.${milliseconds}`\n        }\n    }\n}\n\nmodule.exports = Day\n",
                "mapping": {},
                "path": "{wes}/day"
            },
            "debug": {
                "source": "const argv = require('argv')\nconst inspect = require('inspect')\nconst { brightRed, reverse, clear } = console\n\nconst isDebugOprion = argv.has('debug')\n\nconst debug = function debug_debug(expression) {\n    if (isDebugOprion) {\n        console.log(`${brightRed + reverse}DEBUG${clear}: ${inspect(expression)}`)\n    }\n    return expression\n}\ndebug.isDebugOption = isDebugOprion\n\nmodule.exports = debug\n",
                "mapping": {},
                "path": "{wes}/debug"
            },
            "filesystem": {
                "source": "const ADODB = require('ADODB.Stream')\nconst FSO = require('Scripting.FileSystemObject')\nconst { toWin32Sep, posixSep, split, absolute, relative, CurrentDirectory: cd, resolve } = require('pathname')\nconst chardet = require('chardet')\nconst { Type } = require('VBScript')\nconst http = require('Msxml2.XMLHTTP')\nconst { Enumerator } = require('JScript')\nconst { NONE } = require('text')\nconst genUUID = require('genUUID')\nconst argv = require('argv')\nconst { security } = argv\n\nconst { ByteToHex, HexToByte, Uint8ToHex } = require('hex')\nconst VB_BYTE = 'vbByte[]'\n\nconst AD_TYPE_BINARY = 1\nconst AD_TYPE_TEXT = 2\nconst AD_SAVE_CREATE_OVER_WRITE = 2\nconst UTF_8 = 'UTF-8'\nconst UTF_8BOM = 'UTF-8BOM'\nconst UTF_8N = 'UTF-8N'\n\nconst readFileSync = function filesystem_readFileSync(filespec, encode) {\n    // (filespec: string, encode?: string): string\n\n    if (encode == null) return new Buffer(readByteFileSync(filespec))\n    return readTextFileSync(filespec, encode)\n}\n\nconst readTextFileSync = function filesystem_readTextFileSync(filespec, encode) {\n    // (filespec: string, encode?: string): string\n\n    let byte = readByteFileSync(filespec)\n    if (byte === null) return ''\n    let buffer = new Buffer(byte)\n    let encoding = null\n    if (buffer.length >= 3) encoding = encode != null ? encode : chardet.detect(buffer)\n    else encoding = UTF_8\n    if (encoding.toUpperCase().startsWith(UTF_8)) {\n        encoding = UTF_8\n    }\n    if (encoding === UTF_8 && buffer[0] === 0xef && buffer[1] === 0xbb && buffer[2] === 0xbf) {\n        byte = HexToByte(ByteToHex(byte).replace(/^efbbbf/, NONE))\n    }\n    return ByteToText(byte, encoding)\n}\n\nconst writeFileSync = function filesystem_writeFileSync(filespec, data, encode) {\n    // (filespec: string, data: Buffer|byte|string, encode?: string): string\n\n    if (data instanceof Buffer) data = data.toByte()\n    if (Type(data) === VB_BYTE) {\n        try {\n            ADODB.Open()\n            ADODB.Position = 0\n            ADODB.SetEOS()\n            ADODB.Type = AD_TYPE_BINARY\n            ADODB.Write(data)\n            ADODB.SaveToFile(filespec, AD_SAVE_CREATE_OVER_WRITE)\n            ADODB.Close()\n            return `Save operation succeeded '${filespec}'`\n        } catch (error) {\n            error.message += `\\nSave operation failed. filespec: ${filespec}`\n            throw error\n        }\n    }\n    return writeTextFileSync(filespec, data, encode)\n}\n\nconst writeTextFileSync = function filesystem_writeTextFileSync(filespec, text, encode) {\n    // (filespec: string, text: string, encode?: string): string\n\n    let spliBbom = false\n    try {\n        ADODB.Open()\n        ADODB.Position = 0\n        ADODB.SetEOS()\n        ADODB.Type = AD_TYPE_TEXT\n        if (encode != null) {\n            const _enc = encode.toUpperCase()\n            if (_enc.startsWith(UTF_8)) ADODB.CharSet = UTF_8\n            else ADODB.CharSet = encode\n            if (_enc === UTF_8BOM) spliBbom = false\n            else if (_enc === UTF_8N) spliBbom = true\n            else spliBbom = false\n        }\n        ADODB.WriteText(text)\n        if (spliBbom) {\n            ADODB.Position = 0\n            ADODB.Type = AD_TYPE_BINARY\n            ADODB.Position = 3\n            let bytes = ADODB.Read()\n            ADODB.Position = 0\n            ADODB.SetEOS()\n            ADODB.Write(bytes)\n        }\n        ADODB.SaveToFile(filespec, AD_SAVE_CREATE_OVER_WRITE)\n        return `Save operation succeeded. '${filespec}'`\n    } catch (error) {\n        error.message += `\\nSave operation failed. filespec: ${filespec}`\n        return error\n    } finally {\n        ADODB.Close()\n    }\n}\n\n// util\nconst readByteFileSync = function filesystem_readByteFileSync(filespec) {\n    // (filespec: string): byte\n\n    let byte = NONE\n    try {\n        ADODB.Type = AD_TYPE_BINARY\n        ADODB.Open()\n        ADODB.LoadFromFile(filespec)\n        byte = ADODB.Read()\n    } catch (error) {\n        error.message += `\\n   (readByteFileSync filespec: ${filespec})`\n        throw error\n    } finally {\n        ADODB.Close()\n    }\n    return byte\n}\n\nconst ByteToText = function filesystem_ByteToText(byte, encode) {\n    // (byte: byte, encode?: string): string\n\n    try {\n        ADODB.Open()\n        ADODB.Type = AD_TYPE_BINARY\n        ADODB.Write(byte)\n        ADODB.Position = 0\n        ADODB.Type = AD_TYPE_TEXT\n        if (encode != null) ADODB.Charset = encode\n        return ADODB.ReadText()\n    } catch (error) {\n        error.message += `\\n   (ByteToText encode: ${encode})`\n        throw error\n    } finally {\n        ADODB.Close()\n    }\n}\n\nconst BufferToText = function filesystem_BufferToText(buff, encode) {\n    // (buff: Buffer, encode?: string): string\n\n    if (!(buff instanceof Buffer)) throw new Error('A parameter other than a buffer is passed as an argument')\n    if (buff.length === 0) return NONE\n    const byte = HexToByte(Uint8ToHex(buff))\n    return ByteToText(byte, encode || chardet.detect(buff))\n}\n\nconst exists = function filesystem_exists(filespec) {\n    // (filespec: string): bool\n\n    return FSO.FileExists(toWin32Sep(filespec))\n}\n\nconst existsFileSync = function filesystem_existsFileSync(filespec) {\n    // (filespec: string): bool\n\n    return FSO.FileExists(toWin32Sep(filespec))\n}\n\nconst existsdirSync = function filesystem_existsdirSync(dirspec) {\n    // (dirspec: string): bool\n    return FSO.FolderExists(dirspec)\n}\n\nconst copyFileSync = function filesystem_copyFileSync(from, to) {\n    // (from: string, to: string): string\n\n    FSO.CopyFile(from, to)\n    return `copyFileSync operation succeeded. '${from}' => '${to}'`\n}\n\nconst moveFileSync = function filesystem_moveFileSync(from, to) {\n    // (from: string, to: string): string\n\n    FSO.MoveFile(from, to)\n    return `moveFileSync operation succeeded. '${from}' => '${to}'`\n}\n\nconst deleteFileSync = function filesystem_deleteFileSync(filespec) {\n    // (filespec: string): string\n\n    if (FSO.FileExists(filespec)) {\n        FSO.DeleteFile(filespec)\n        return `deleteFileSync operation succeeded. '${filespec}'`\n    }\n    return `deleteFileSync operation failed. '${filespec}'`\n}\n\nconst mkdirSync = function filesystem_mkdirSync(dirspec) {\n    // (dirspec: string): string\n    if (!FSO.FolderExists(dirspec)) {\n        FSO.CreateFolder(dirspec)\n        return `mkdirSync operation succeeded. '${dirspec}'`\n    }\n    return `mkdirSync operation failed. '${dirspec}'`\n}\n\nconst mkdirsSync = function filesystem_mkdirsSync(spec) {\n    // (spec: string): string\n\n    let dirs = split(absolute(spec))\n    dirs.reduce((acc, curr) => {\n        if (!/^[A-z]:/.test(acc)) throw new Error('A drive that does not exist is specified. => %s', spec)\n        let specs = acc + posixSep + curr\n        if (!existsdirSync(specs)) mkdirSync(specs)\n        return specs\n    })\n    return `mkdirsSync operation succeeded '${spec}'`\n}\n\nconst copydirSync = function filesystem_copydirSync(from, to) {\n    // (from: string, to: string): string\n\n    FSO.CopyFolder(from, to)\n    return `copydirSync operation succeeded '${dirspec}'`\n}\n\nconst download = function filesystem_download(url, saveFile) {\n    // (url: string, saveFile?: string): Buffer\n\n    http.Open('GET', url, false)\n    http.Send()\n    if (http.status === 200) {\n        if (saveFile != null) return writeFileSync(saveFile, http.responseBody)\n        else return http.responseBody\n    } else throw new Error(`filesystem_download Error status: ${http.status}`)\n}\n\nconst readdirsSync = function filesystem_readdirsSync(spec, callback) {\n    // (spec: string, callback: function): any[]\n    let children = []\n\n    let files = new Enumerator(FSO.GetFolder(spec).Files)\n    let dirs = new Enumerator(FSO.GetFolder(spec).SubFolders)\n\n    if (typeof callback === 'function') {\n        files.forEach((node) => children.push(callback(node, null)))\n        dirs.forEach((node) => children.push(callback(null, node)))\n        return children\n    } else {\n        files.forEach((node) =>\n            children.push({\n                name: node.Name,\n                path: absolute(node.Path),\n                type: 'file'\n            })\n        )\n        dirs.forEach((node) =>\n            children.push({\n                name: node.Name,\n                path: absolute(node.path),\n                type: 'directory',\n                children: readdirsSync(absolute(node.path))\n            })\n        )\n        return children.sort((a, b) => (a.name.toLowerCase() > b.name.toLowerCase() ? 1 : -1))\n    }\n}\n\nconst readdirSync = function filesystem_readdirSync(spec) {\n    // (spec: string): string[]\n    return readdirsSync(spec, (file, dir) => {\n        if (file) return file.name\n        else return dir.name\n    })\n}\n\nconst deletedirSync = function filesystem_deletedirSync(dirspec) {\n    // (dirspec: string): string\n\n    if (relative(cd, dirspec).startsWith('..') && !argv.allow(security.unsafe))\n        throw new Error(\n            '`--unsafe` or `--danger` command line arguments are required to delete outside the current directory'\n        )\n    try {\n        FSO.DeleteFolder(dirspec)\n        return `deletedirSync operation succeeded '${dirspec}'`\n    } catch (err) {\n        return `deletedirSync operation failed '${dirspec}'`\n    }\n}\n\nconst deletedirsSync = function filesystem_deletedirsSync(dirspec) {\n    return deletedirSync(dirspec)\n}\n\nconst encodeBuffer = function filesystem_encodeBuffer(buff, output_encode, input_encode) {\n    // (buff: Buffer, output_encode: string, input_encode?: string): Buffer\n\n    const spec = resolve(process.cwd(), genUUID())\n    try {\n        writeFileSync(spec, buff)\n        const text = readTextFileSync(spec, input_encode || null)\n        writeTextFileSync(spec, text, output_encode)\n        const res = readFileSync(spec)\n        deleteFileSync(spec)\n        return res\n    } catch (err) {\n        throw err\n    } finally {\n        if (existsFileSync(spec)) deleteFileSync(spec)\n    }\n}\n\nmodule.exports = {\n    readFileSync,\n    readTextFileSync,\n    readByteFileSync,\n    readdirsSync,\n    readdirSync,\n\n    writeFileSync,\n    writeTextFileSync,\n\n    exists,\n    existsFileSync,\n    existsdirSync,\n\n    copyFileSync,\n    copydirSync,\n\n    moveFileSync,\n\n    deleteFileSync,\n    deletedirSync,\n    deletedirsSync,\n\n    mkdirSync,\n    mkdirsSync,\n\n    download,\n    BufferToText,\n    ByteToText,\n    encodeBuffer\n}\n",
                "mapping": {},
                "path": "{wes}/filesystem"
            },
            "genUUID": {
                "source": "const genUUID = function genUUID_genUUID() {\n    var typelib = WScript.CreateObject('Scriptlet.Typelib')\n    return typelib.GUID.replace(/[^\\}]+$/, '')\n}\n\nmodule.exports = genUUID\n",
                "mapping": {},
                "path": "{wes}/genUUID"
            },
            "hex": {
                "source": "const ByteToHex = function hex_ByteToHex(byte) {\n    let elm = require('Msxml2.DOMDocument').createElement('elm')\n    elm.dataType = 'bin.hex'\n    elm.nodeTypedValue = byte\n    return elm.text\n}\n\nconst HexToByte = function hex_HexToByte(hex) {\n    let elm = require('Msxml2.DOMDocument').createElement('elm')\n    elm.dataType = 'bin.hex'\n    elm.text = hex\n    return elm.nodeTypedValue\n}\n\nconst Uint8ToHex = function hex_Uint8ToHex(buffer) {\n    let res = []\n    buffer.forEach((v) => res.push(('0' + v.toString(16)).slice(-2)))\n    return res.join('')\n}\n\nconst HexToUint8 = function hex_HexToUint8(hex) {\n    return new Uint8Array(hex.match(/.{1,2}/g).map((v) => parseInt(v, 16)))\n}\n\nmodule.exports = {\n    ByteToHex,\n    HexToByte,\n    Uint8ToHex,\n    HexToUint8\n}\n",
                "mapping": {},
                "path": "{wes}/hex"
            },
            "httprequest": {
                "source": "const fs = require('filesystem')\n\nconst options = {\n    async: false,\n    user: null,\n    password: null,\n    params: {},\n    exception(error, app) {\n        console.log(error.stack)\n    },\n    execute(app, opt = {}) {\n        if (app.status !== 200) throw new Error('http status:%s statusText: \"%s\"', app.status, app.statusText)\n        return fs.ByteToText(app.responseBody, opt.charset)\n    }\n}\n\nconst httprequest = function httprequest_httprequest(method, url, opt) {\n    opt = opt != null ? Object.assign(options, opt) : options\n    try {\n        var http = require('Msxml2.ServerXMLHTTP')\n        if (method.toLowerCase() === 'post') {\n            http.open(method.toUpperCase(), url, opt.async, opt.user, opt.password)\n            http.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded')\n            http.send(escapeParams(opt.params))\n        } else {\n            if (Object.keys(opt.params).length) url = url + '?' + escapeParams(opt.params)\n            http.open(method.toUpperCase(), url, opt.async, opt.user, opt.password)\n            http.send()\n        }\n        return opt.execute(http, opt)\n    } catch (error) {\n        opt.exception(error, http)\n    }\n}\n\nfunction escapeParams(params) {\n    function enc(value) {\n        return escape(value).split('%20').join('+')\n    }\n    return Object.keys(params)\n        .map((key) => {\n            return key + '=' + enc(params[key])\n        })\n        .join('&')\n}\n\nmodule.exports = httprequest\n",
                "mapping": {},
                "path": "{wes}/httprequest"
            },
            "inspect": {
                "source": "var ansi = console.ansi\n\nfunction toStringCall(value) {\n    return Object.prototype.toString.call(value)\n}\n\nfunction toSliceCall(value) {\n    return Array.prototype.slice.call(value)\n}\n\nfunction instanceOf(value, Class) {\n    return value instanceof Class\n}\n\nfunction doubleDigit(value) {\n    return toSliceCall('0' + value)\n        .slice(-2)\n        .join('')\n}\n\nfunction tripleDigit(value) {\n    return toSliceCall('00' + value)\n        .slice(-3)\n        .join('')\n}\n\nfunction wrap(value, header, footer) {\n    if (footer == null) return header + value + header\n    else return header + value + footer\n}\n\nfunction toDateString(date) {\n    return (\n        'new Data(\"' +\n        date.getFullYear() +\n        '/' +\n        doubleDigit(date.getMonth() + 1) +\n        '/' +\n        doubleDigit(date.getDate()) +\n        ' ' +\n        doubleDigit(date.getHours()) +\n        ':' +\n        doubleDigit(date.getSeconds()) +\n        ':' +\n        doubleDigit(date.getMinutes()) +\n        '.' +\n        tripleDigit(date.getMilliseconds()) +\n        ')'\n    )\n}\n\nfunction include(string, symbol) {\n    if (toStringCall(symbol) === '[object RegExp]') return symbol.test(string)\n    else return !!~string.indexOf(String(symbol))\n}\n\nfunction replace(string, pattern, replacement) {\n    return string.split(pattern).join(replacement)\n}\n\nfunction toString(value) {\n    if (include(value, rCRLF)) {\n    } else if (!include(value, DOUBLE_QUOTE)) return wrap(value, DOUBLE_QUOTE)\n    else if (!include(value, SINGLE_QUOTE)) return wrap(value, SINGLE_QUOTE)\n    value = replace(value, BACK_QUOTE, BACK_SLASH + BACK_QUOTE)\n    return wrap(value, BACK_QUOTE)\n}\n\nfunction toFunctionString(value, opt) {\n    var tabWidth = 'tabWidth' in opt && opt.tabWidth > 0 ? opt.tabWidth : 4\n    var code = replace(String(value), TAB, repeat(SPACE, tabWidth))\n    var line = code.split(rCRLF)\n    var indents = []\n    for (var l = 1; l < line.length; l++) {\n        indents[l] = rINDENTS.test(line[l]) ? line[l].match(rINDENTS)[0].length : 0\n    }\n    var min = Math.min.apply(null, indents.slice(1))\n    for (var l = 1; l < indents.length; l++) {\n        line[l] = line[l].substring(min)\n    }\n    return line.join(indent(opt))\n}\n\nfunction repeat(string, number) {\n    var res = ''\n    while (number > 0) {\n        res += string\n        number--\n    }\n    return res\n}\n\nfunction indent(opt) {\n    var tabWidth = 'tabWidth' in opt ? opt.tabWidth : 4\n    if (!('indent' in opt && opt.indent)) return ''\n    return CRLF + repeat(SPACE, tabWidth * level)\n}\n\nfunction toKeyString(value, opt) {\n    if (typeof value != 'string') return wrap(inspect(value, opt), '[', ']')\n    else return inspect(value, opt)\n}\n\nvar NONE = ''\nvar TAB = '\\t'\nvar CRLF = '\\r\\n'\nvar rCRLF = /\\r?\\n/\nvar rINDENTS = /(^ *)/\nvar SPACE = ' '\nvar CAMMA = ', '\nvar SEP = ': '\nvar ARROW = ' => '\nvar BACK_QUOTE = '`'\nvar SINGLE_QUOTE = \"'\"\nvar DOUBLE_QUOTE = '\"'\nvar BACK_SLASH = '\\\\'\n\nvar level = 0\nvar data = []\n\nconst inspect = function inspect_inspect(value, opt) {\n    if (opt == null) opt = {}\n    var colors = 'colors' in opt ? opt.colors : false\n    var color = {\n        String: colors ? ansi.green : NONE,\n        Number: colors ? ansi.yellow : NONE,\n        Boolean: colors ? ansi.cyan : NONE,\n        Function: colors ? ansi.brightBlue : NONE,\n        Uint8Array: colors ? ansi.gray : NONE,\n        Date: colors ? ansi.magenta : NONE,\n        Regexp: colors ? ansi.red : NONE,\n        Symbol: colors ? ansi.brightGreen : NONE,\n        Null: colors ? ansi.yellow : NONE,\n        Undefined: colors ? ansi.gray : NONE,\n        CircularReference: colors ? ansi.gray : NONE,\n        clear: colors ? ansi.clear : NONE\n    }\n\n    if (value === undefined) return color.Undefined + String(value) + color.clear\n    if (value === null) return color.Null + String(value) + color.clear\n    if (typeof value === 'string') return color.String + toString(value) + color.clear\n    if (typeof value === 'number') return color.Number + String(value) + color.clear\n    if (typeof value === 'boolean') return color.Boolean + String(value) + color.clear\n    if (toStringCall(value) === '[object Symbol]') return color.Symbol + 'symbol()' + color.clear\n\n    if (~data.indexOf(value)) {\n        if (~data.indexOf(value, data.indexOf(value) + 1)) return color.CircularReference + '[Circular]' + color.clear\n    }\n    data.push(value)\n\n    if (typeof value === 'function') return color.Function + toFunctionString(value, opt) + color.clear\n    if (toStringCall(value) === '[object Date]') return color.Date + toDateString(value) + color.clear\n    if (toStringCall(value) === '[object RegExp]') return color.Regexp + String(value) + color.clear\n    if (toStringCall(value) === '[object Uint8Array]') {\n        let res = []\n        for (var k = 0; k < value.length; k++) {\n            res.push(doubleDigit(value[k].toString(16)))\n        }\n        return color.Uint8Array + wrap(res.join(SPACE), '<Buffer ', '>')\n    }\n    if (toStringCall(value) === '[object Array]') {\n        level++\n        var res = []\n        for (var i = 0; i < value.length; i++) {\n            res.push(indent(opt) + inspect(value[i], opt))\n        }\n        level--\n        data.pop()\n        return wrap(res.join(CAMMA) + indent(opt), '[', ']')\n    }\n    if (toStringCall(value) === '[object Object]') {\n        level++\n        var res = []\n        for (var key in value) {\n            res.push(indent(opt) + toKeyString(key, opt) + SEP + inspect(value[key], opt))\n        }\n        level--\n        data.pop()\n        return wrap(res.join(CAMMA) + indent(opt), '{', '}')\n    }\n    if (toStringCall(value) === '[object Set]') {\n        level++\n        var res = []\n        value.forEach(function (val) {\n            res.push(indent(opt) + inspect(val, opt))\n        })\n        level--\n        return wrap(res.join(CAMMA) + indent(opt), 'Set {', '}')\n    }\n    if (toStringCall(value) === '[object Map]') {\n        level++\n        var res = []\n        value.forEach(function (value, key) {\n            res.push(indent(opt) + inspect(key, opt) + ARROW + inspect(value, opt))\n        })\n        level--\n        return wrap(res.join(CAMMA) + indent(opt), 'Map {', '}')\n    }\n    if (toStringCall(value) === '[object WeakMap]') {\n        level++\n        var res = indent(opt) + '<items unknown>'\n        level--\n        return wrap(res + indent(opt), 'WeakMap {', '}')\n    }\n}\n\nmodule.exports = inspect\n",
                "mapping": {},
                "path": "{wes}/inspect"
            },
            "install": {
                "source": "const argv = require('argv')\nconst { security } = argv\n\nif (argv.has('bare') || argv.has('b') || argv.has('global') || argv.has('g')) {\n    if (!argv.allow(security.unsafe))\n        throw new Error(\n            'If you specify \"--bare\" or \"--global\", the security setting requires \"--unsafe\" or \"--dangerous\".'\n        )\n}\n\nconst { dirname, join, toPosixSep, posixSep } = require('pathname')\nconst fs = require('filesystem')\n\nconst global_install = argv.allow(security.unsafe) && (argv.has('global') || argv.has('g'))\nconst bare_install = argv.allow(security.unsafe) && (argv.has('bare') || argv.has('b'))\n\nconst cd = process.cwd()\nconst gd = dirname(WScript.ScriptFullName)\nconst ext_js = '.js'\nconst index_js = 'index' + ext_js\nconst ext_json = '.json'\nconst atmark = '@'\nconst modules = 'node_modules'\nconst modules_dir = global_install ? join(gd, modules) : join(cd, modules)\n\nfunction splitArg(arg) {\n    const exp = /^@(.+)\\/([^?]+)(\\?token=.+)?$/\n    if (exp.test(arg)) return exp.exec(arg).slice(1)\n    throw new Error('@author/repository')\n}\n\nfunction genSpec(arg) {\n    const [author, repository, token] = splitArg(arg)\n    const script_raw = `https://raw.githubusercontent.com/${author}/${repository}/master/${repository}.json${\n        token != null ? token : ''\n    }`\n    const module_dir = bare_install ? modules_dir : join(modules_dir, atmark + author)\n    const repository_spec = join(module_dir, repository)\n    const script_spec = join(repository_spec, index_js)\n    const json_spec = join(repository_spec, repository + ext_json)\n\n    return {\n        author,\n        repository,\n        script_raw,\n        module_dir,\n        repository_spec,\n        script_spec,\n        json_spec\n    }\n}\n\nfunction genSource(author, repository, script) {\n    const exp = new RegExp(`^\\\\{${repository}\\\\}`)\n    Object.keys(script).map((key) => {\n        script[key].path = script[key].path.replace(exp, `{${atmark + author + posixSep + repository}}`)\n    })\n    let source = JSON.stringify(script, null, 4)\n    const parent = getMainScript(script)\n\n    return `// source: https://github.com/${author}/${repository}\nconst mods = ${source}\nif ( wes.Modules[wes.main].path === __filename ) wes.main = '${parent}'\nObject.keys(mods).forEach(key => wes.Modules[key] = mods[key])\nmodule.exports = require( '${parent}' )\n`\n}\n\nfunction getMainScript(script) {\n    return Object.keys(script)[0]\n}\n\nfunction install(arg) {\n    const { author, repository, script_raw, module_dir, repository_spec, script_spec, json_spec } = genSpec(arg)\n\n    if (!fs.existsdirSync(modules_dir)) fs.mkdirSync(modules_dir)\n    if (!fs.existsdirSync(module_dir)) fs.mkdirSync(module_dir)\n    if (!fs.existsdirSync(repository_spec)) fs.mkdirSync(repository_spec)\n    fs.download(script_raw, json_spec)\n\n    const script = JSON.parse(fs.readTextFileSync(json_spec), null, 4)\n    const source = genSource(author, repository, script)\n\n    fs.writeFileSync(script_spec, source, 'UTF-8N')\n    fs.deleteFileSync(json_spec)\n    console.log('%sInstalled %s', console.ansi.cyan, arg)\n}\n\nargv.unnamed.slice(1).forEach((mod) => install(mod))\n",
                "mapping": {},
                "path": "{wes}/install"
            },
            "JScript": {
                "source": "const JScript = (function (language) {\n    const sc = require('ScriptControl')\n    sc.Language = language\n    return {\n        AddCode(code) {\n            sc.AddCode(code)\n        },\n        Run(name, ...args) {\n            return sc.run(name, ...args)\n        }\n    }\n})('JScript')\n\nconst { TypeName } = require('VBScript')\n\nJScript.AddCode(`\nfunction enumerator ( collection ) {\n    return new Enumerator( collection )\n}`)\n\nconst toArray = function JScript_toArray(col) {\n    let res = []\n    let Enum = JScript.Run('enumerator', col)\n    for (; !Enum.atEnd(); Enum.moveNext()) {\n        res.push(Enum.item())\n    }\n    Enum.moveFirst()\n    return res\n}\n\nclass Enumerator {\n    constructor(collection) {\n        let res = []\n        if (TypeName(collection) === 'Long') {\n            res = collection\n        } else {\n            res = toArray(collection)\n        }\n        return res\n    }\n}\n\nclass ActiveXObject {\n    constructor(progID) {\n        return WScript.CreateObject(progID)\n    }\n}\n\nmodule.exports = {\n    JScript,\n    Enumerator,\n    ActiveXObject\n}\n",
                "mapping": {},
                "path": "{wes}/JScript"
            },
            "log": {
                "source": "const inspect = require('inspect')\nconst { gray, silver, clear } = console.ansi\n\nconst opt = { colors: true, indent: true }\n\nconst log = function log(code) {\n    let res = inspect(code(), opt)\n    console.log(silver + 'log(' + inspect(code, opt) + silver + ')' + gray + ' // => ' + clear + res)\n}\n\nmodule.exports = log\n",
                "mapping": {},
                "path": "{wes}/log"
            },
            "minitest": {
                "source": "const { LF, TAB, rCRLF, SPACE, INDNT, NONE } = require('text')\n\nlet depth = 0\nlet indent = NONE\nlet rate = 4\nlet n = LF\nlet pass = [0, 0]\n\nconst checkMark = '\\u2713' // '\\u221a'\n\nconst { brightRed: red, brightGreen: green, brightYellow: yellow, brightMagenta: pink, gray } = console.ansi\n\nconst describe = function minitest_describe(title, fn) {\n    depth++\n    indent = SPACE.repeat(depth * rate)\n    console.log(LF + indent + title)\n    fn()\n    depth--\n}\n\nconst it = function minitest_it(message, fn) {\n    depth++\n    indent = SPACE.repeat(depth * rate)\n    const printCode = (code) => {\n        let source = code.toString().split(TAB).join('    ').split(rCRLF)\n        if (source.length < 2) return `${SPACE.repeat(indent + rate)}${source[0]}`\n        source[0] = `${source[source.length - 1].match(INDNT)[0]}${source[0]}`\n        const sp = source.map((v) => v.match(INDNT)[0].length)\n        const min = Math.min.apply(null, sp)\n        return source\n            .map((v) => {\n                return `${SPACE.repeat((depth + 1) * rate)}${v.replace(SPACE.repeat(min), NONE)}`\n            })\n            .join('\\n')\n    }\n\n    try {\n        pass[0]++\n        fn()\n        pass[1]++\n        console.log(`${indent}${gray}${message} ${green}${checkMark}`)\n    } catch (e) {\n        console.log(`${indent}${pink}${message}${n}${yellow}${printCode(fn)} ${red}// => ${e.message}${n}`)\n    } finally {\n        depth--\n    }\n}\n\nconst assert = function minitest_assert(assertion) {\n    return assert.ok(assertion)\n}\nassert.ok = function minitest_assert_ok(assertion) {\n    let res = typeof assertion === 'function' ? assertion() : assertion\n    if (!res) throw new Error(res)\n}\nassert.ng = function minitest_assert_ng(assertion) {\n    let res = typeof assertion === 'function' ? assertion() : assertion\n    if (res) throw new Error(res)\n}\n\nmodule.exports = {\n    describe,\n    it,\n    assert,\n    pass\n}\n",
                "mapping": {},
                "path": "{wes}/minitest"
            },
            "pathname": {
                "source": "const WShell = require('WScript.Shell')\n\nconst NONE = ''\nconst Current = '.'\nconst Parent = '..'\nconst posixSep = '/'\nconst win32Sep = '\\\\'\n\nconst toPosixSep = function pathname_toPosixSep(path) {\n    return path.split(win32Sep).join(posixSep)\n}\n\nconst toWin32Sep = function pathname_toWin32Sep(path) {\n    return path.split(posixSep).join(win32Sep)\n}\n\nconst CurrentDirectory = toPosixSep(WShell.CurrentDirectory)\n\nconst split = function pathname_split(path) {\n    return toPosixSep(path).split(posixSep)\n}\n\nconst UNC = /^(\\/\\/[^\\/]+\\/[^\\/]+\\/)(|.+)$/\nconst SCHEME = /^([A-z]{2,}:\\/\\/[^\\/]+\\/)(|.+)$/\nconst DRIVE = /^([A-z]:\\/)(|.+)$/\nconst CWD = /^(?!\\/\\/)(\\/)(.+)$/\nconst RELATIVE = ''\n\nconst _normalize = function pathname_normalize(path) {\n    const paths = path.split(posixSep)\n    const res = []\n    for (let dir of paths) {\n        if (dir === Current || dir === NONE) continue\n        if (dir === Parent) {\n            if (res.length === 0 || res[res.length - 1] === Parent) res.push(Parent)\n            else res.pop()\n        } else res.push(dir)\n    }\n    return res.join(posixSep)\n}\n\nconst parse = function pathname_parse(path) {\n    path = toPosixSep(path)\n\n    let res = null\n\n    if (UNC.test(path)) {\n        let [, root, body] = UNC.exec(path)\n        body = body.replace(/^\\/+/g, '')\n        res = { type: UNC, root, body }\n    } else if (SCHEME.test(path)) {\n        let [, root, body] = SCHEME.exec(path)\n        body = body.replace(/^\\/+/g, '')\n        res = { type: SCHEME, root, body }\n    } else if (DRIVE.test(path)) {\n        let [, root, body] = DRIVE.exec(path)\n        root = root.replace(/^([A-z])/, ($1) => $1.toUpperCase())\n        body = body.replace(/^\\/+/g, '')\n        res = { type: DRIVE, root, body }\n    } else if (CWD.test(path)) {\n        let [, , _body] = CWD.exec(path)\n        let [, root, body] = DRIVE.exec(process.cwd())\n        res = { type: DRIVE, root, body: body + posixSep + _body }\n    } else res = { type: RELATIVE, root: '', body: path }\n\n    res.body = res.type == RELATIVE ? _normalize(res.body) : _normalize(res.body).replace(/^(\\.\\.\\/)+/, '')\n\n    let paths = res.body.split(posixSep)\n    let _dir = ''\n    let base = ''\n    if (paths.length === 1) base = paths[0]\n    else [_dir, base] = [paths.slice(0, -1).join(posixSep), paths[paths.length - 1]]\n\n    let dir = res.root + _dir\n\n    const dot = '.'\n    let name = NONE\n    let ext = NONE\n    let bases = base.split(dot)\n\n    if ((bases.length === 2 && bases[0] === NONE) || bases.length === 1) [name, ext] = [base, '']\n    else [name, ext] = [bases.slice(0, -1).join(dot), dot + bases[bases.length - 1]]\n\n    res.dir = dir\n    res.base = base\n    res.name = name\n    res.ext = ext\n\n    return res\n}\n\nconst isAbsolute = function pathname_isAbsolute(path) {\n    const { root } = parse(path)\n    return !!root\n}\n\nconst dirname = function pathname_dirname(path) {\n    const { root, body } = parse(path)\n    return split([root, body].join(NONE)).slice(0, -1).join(posixSep)\n}\n\nconst extname = function pathname_extname(path) {\n    return parse(path).ext\n}\n\nconst basename = function pathname_basename(path, ext) {\n    let { base } = parse(path)\n    if (ext != null && base.endsWith(ext)) {\n        base = Array.from(base)\n            .slice(0, ext.length * -1)\n            .join(NONE)\n    }\n    return base\n}\n\nconst normalize = function pathname_normalize(path) {\n    let { root, body } = parse(path)\n    return [root, body].join(NONE)\n}\n\nconst absolute = function pathname_absolute(path) {\n    const { root, body } = parse(path)\n    if (!!root) return [root, body].join(NONE)\n    else return normalize([CurrentDirectory, body].join(posixSep))\n}\n\nconst join = function pathname_join(...paths) {\n    return paths.reverse().reduce((acc, curr) => {\n        return normalize([curr, acc].join(posixSep))\n    })\n}\n\nconst resolve = function pathname_resolve(...paths) {\n    let acc = paths[paths.length - 1]\n    let res = normalize(acc)\n    if (parse(acc).root) return res\n    for (let i = paths.length - 2; i > -1; i--) {\n        let curr = paths[i]\n        if (parse(curr).root) {\n            res = normalize(join(curr, res))\n            break\n        }\n        res = join(curr, res)\n    }\n    if (!parse(res).root) return join(CurrentDirectory, res)\n    return res\n}\n\nconst relative = function pathname_relative(from, to) {\n    if (parse(from).root !== parse(to).root) return normalize(to)\n    const genUUID = require('genUUID')\n    let _from = split(resolve(from, genUUID()))\n    let _to = split(resolve(to))\n    let count = 0\n    while (count < _from.length) {\n        if (_from[count] !== _to[count]) break\n        count++\n    }\n    return '../'.repeat(_from.length - count - 1) + _to.slice(count).join(posixSep)\n}\n\nmodule.exports = {\n    CurrentDirectory,\n    WorkingDirectory: CurrentDirectory,\n    win32Sep,\n    posixSep,\n    toWin32Sep,\n    toPosixSep,\n    split,\n    parse,\n    dirname,\n    extname,\n    basename,\n    normalize,\n    isAbsolute,\n    absolute,\n    join,\n    resolve,\n    relative\n}\n",
                "mapping": {},
                "path": "{wes}/pathname"
            },
            "pipe": {
                "source": "function pipe() {\n    const translators = []\n    function process(\n        data,\n        callback = (err, res) => {\n            if (err) throw err\n            else return res\n        }\n    ) {\n        let res = data\n        let err = null\n        try {\n            for (let i = 0; i < translators.length; i++) {\n                res = translators[i](res)\n            }\n        } catch (error) {\n            err = error\n        } finally {\n            callback(err, res)\n        }\n    }\n    function use(fn) {\n        translators.push(fn)\n        return {\n            use,\n            process\n        }\n    }\n    return use((data) => data)\n}\nmodule.exports = pipe\n",
                "mapping": {},
                "path": "{wes}/pipe"
            },
            "REPL": {
                "source": "const CLI = wes.Modules[wes.main].path === __filename\nif (!CLI) throw new Error('REPL can only be used on the command line')\n\nconsole.log(console.ansi.brightBlue + 'wes REPL mode:')\n\nconst stdin = {\n    event: {},\n    on(type, callback) {\n        const ev = this.event\n        ev[type] = ev[type] || []\n        ev[type].push(callback)\n    },\n    emit(type, ...args) {\n        if (!this.event[type]) return\n        const evs = this.event[type]\n        return evs.map((ev) => ev(...args))\n    }\n}\n\nlet input_string = ''\n\nstdin.on('data', (chunk) => {\n    input_string += chunk + '\\n'\n})\n\nstdin.on('end', () => {\n    console.print('\\u001B[1A')\n    const id = require('genUUID')()\n    wes.Modules[id] = {\n        source: input_string,\n        path: require('pathname').resolve(process.cwd(), id),\n        mapping: {}\n    }\n\n    console.log(console.ansi.magenta + 'result:')\n    const result = require(id)\n\n    if (Object.prototype.toString.call(result) === '[object Object]' && Object.keys(result).length === 0) {\n    } else console.log('%O', result)\n})\n\nwhile (true) {\n    if (WScript.StdIn.AtEndOfStream) {\n        stdin.emit('end')\n        break\n    } else {\n        const data = WScript.StdIn.ReadLine()\n        if (data === '') {\n            const data = WScript.StdIn.ReadLine()\n            if (data === '') {\n                stdin.emit('end')\n                break\n            } else stdin.emit('data', '\\n' + data)\n        }\n        stdin.emit('data', data)\n    }\n}\n",
                "mapping": {},
                "path": "{wes}/REPL"
            },
            "text": {
                "source": "const LF = '\\n'\nconst CR = '\\r'\nconst CRLF = CR + LF\nconst SPACE = ' '\nconst TAB = '\\t'\nconst NONE = ''\n\nconst rLINE_SEP = /\\r?\\n/g\nconst rLF = /\\n/g\nconst rCR = /\\r/g\nconst rCRLF = /\\r\\n/g\nconst rSPACE = /\\s/g\nconst rSPACES = /\\s+/g\nconst rBLANK_LINE = /^\\s+$/\nconst rTAB = /\\t/g\nconst rTABS = /\\t+/g\nconst INDNT = /^\\s+/\n\nconst trimStarts = function text_trimStarts(string) {\n    return string.replace(/^([\\s\\r\\n]+\\n)/, NONE)\n}\nconst trimEnds = function text_trimEnds(string) {\n    return string.replace(/(\\n[\\s\\r\\n]+)$/, NONE)\n}\nconst trim = function text_trimEnds(string) {\n    return trimStarts(trimEnds(string))\n}\nconst splitLines = function text_splitLines(string, mod, start, end) {\n    const sep = rCRLF.test(string) ? CRLF : LF\n    return string\n        .split(rLINE_SEP)\n        .filter((value, i) => (start < i % mod && i % mod < end) || rBLANK_LINE.test(value))\n        .join(sep)\n}\n\nconst unindent = function text_unindent(text) {\n    const lineBreak = text.includes(CRLF) ? CRLF : LF\n    let line = text.split(rLINE_SEP)\n    const lastLineSpace = line[line.length - 1].match(INDNT)\n    if (lastLineSpace == null) return text\n    return line\n        .map((v) => {\n            return v.replace(lastLineSpace, '')\n        })\n        .join(lineBreak)\n        .replace(/^\\s+/, '')\n}\n\nmodule.exports = {\n    LF,\n    CR,\n    CRLF,\n    SPACE,\n    TAB,\n    NONE,\n\n    rLINE_SEP,\n    rLF,\n    rCR,\n    rCRLF,\n    rSPACE,\n    rSPACES,\n    rBLANK_LINE,\n    rTAB,\n    rTABS,\n\n    trimStarts,\n    trimEnds,\n    trim,\n    splitLines,\n    unindent\n}\n",
                "mapping": {},
                "path": "{wes}/text"
            },
            "typecheck": {
                "source": "const toStringCall = function typecheck_toStringCall(type) {\n    return type != null && Object.prototype.toString.call(type)\n}\nconst isClass = function typecheck_isClass(val, constructor) {\n    return val != null && val instanceof constructor\n}\n\nconst isNull = function typecheck_isNull(val) {\n    return val === null\n}\n\nconst isString = function typecheck_isString(val) {\n    return (val != null && typeof val === 'string') || toStringCall(val) === '[object String]'\n}\n\nconst isNumber = function typecheck_isNumber(val) {\n    return (val != null && typeof val === 'number') || toStringCall(val) === '[object Number]'\n}\n\nconst isFunction = function typecheck_isFunction(val) {\n    return val != null && typeof val === 'function'\n}\n\nconst isBoolean = function typecheck_isBoolen(val) {\n    return val != null && typeof val === 'boolean'\n}\n\nconst isSymbol = function typecheck_isSymbol(val) {\n    return val != null && typeof val === 'symbol'\n}\n\nconst isDate = function typecheck_isDate(val) {\n    return isClass(val, Date)\n}\n\nconst isRegExp = function typecheck_isRegExp(val) {\n    return isClass(val, RegExp)\n}\n\nconst isArray = function typecheck_isArray(val) {\n    return Array.isArray(val)\n}\n\nconst isObject = function typecheck_isObject(val) {\n    return val != null && toStringCall(val) === '[object Object]'\n}\n\nconst isInt8Array = function typechack_isInt8Array(val) {\n    return isClass(val, Int8Array)\n}\n\nconst isUint8Array = function typechack_isUint8Array(val) {\n    return isClass(val, Uint8Array)\n}\n\nconst isUint8ClampedArray = function typechack_isUint8ClampedArray(val) {\n    return isClass(val, Uint8ClampedArray)\n}\nconst isInt16Array = function typechack_isInt16Array(val) {\n    return isClass(val, Int16Array)\n}\n\nconst isUint16Array = function typechack_isUint16Array(val) {\n    return isClass(val, Uint16Array)\n}\n\nconst isInt32Array = function typechack_isInt32Array(val) {\n    return isClass(val, Int32Array)\n}\n\nconst isUint32Array = function typechack_isUint32Array(val) {\n    return isClass(val, Uint32Array)\n}\n\nconst isFloat32Array = function typechack_isFloat32Array(val) {\n    return isClass(val, Float32Array)\n}\n\nconst isFloat64Array = function typechack_isFloat64Array(val) {\n    return isClass(val, Float64Array)\n}\n\nmodule.exports = {\n    isNull,\n    isString,\n    isNumber,\n    isFunction,\n    isBoolean,\n    isSymbol,\n    isDate,\n    isRegExp,\n    isArray,\n    isObject,\n    isClass,\n    isInt8Array,\n    isUint8Array,\n    isUint8ClampedArray,\n    isInt16Array,\n    isUint16Array,\n    isInt32Array,\n    isUint32Array,\n    isFloat32Array,\n    isFloat64Array\n}\n",
                "mapping": {},
                "path": "{wes}/typecheck"
            },
            "VBScript": {
                "source": "const VBScript = (function (language) {\n    const sc = require('ScriptControl')\n    sc.Language = language\n    return {\n        AddCode(code) {\n            sc.AddCode(code)\n        },\n        Run(name, ...args) {\n            return sc.run(name, ...args)\n        }\n    }\n})('VBScript')\n\nVBScript.AddCode(`\nFunction getTypeName( obj )\n    getTypeName = TypeName( obj )\nEnd Function\n`)\nconst TypeName = function VBScript_TypeName(object) {\n    return VBScript.Run('getTypeName', object)\n}\n\nVBScript.AddCode(`\nFunction getVarType( obj )\n    getVarType = VarType( obj )\nEnd Function\n`)\nconst VarType = function VBScript_VarType(object) {\n    return VBScript.Run('getVarType', object)\n}\n\nconst Type = function VBScript_Type(object) {\n    let constant = [\n        'vbEmpty', // 0\n        'vbNull', // 1\n        'vbInteger', // 2\n        'vbLong', // 3\n        'vbSingle', // 4\n        'vbDouble', // 5\n        'vbCurrency', // 6\n        'vbDate', // 7\n        'vbString', // 8\n        'vbObject', // 9\n        'vbError', // 10\n        'vbBoolean', // 11\n        'vbVariant', // 12\n        'vbDataObject' // 13\n    ]\n    constant[17] = 'vbByte'\n    constant[8192] = 'vbArray'\n    let num = VarType(object)\n    return num > 8192 ? `${constant[num - 8192]}[]` : constant[num]\n}\n\nmodule.exports = {\n    VBScript,\n    TypeName,\n    VarType,\n    Type\n}\n",
                "mapping": {},
                "path": "{wes}/VBScript"
            },
            "version": {
                "source": "module.exports = console.log('0.8.55')",
                "mapping": {},
                "path": "{wes}/version"
            }
        }

        // util
        function genUUID() {
            var typelib = WScript.CreateObject('Scriptlet.Typelib')
            return typelib.GUID.replace(/[^\}]+$/, '')
        }

        function has(cls, prop) {
            if (cls == null) throw new Error(prop + ' is null')
            return cls.hasOwnProperty(prop)
        }

        function starts(str, word) {
            return str.startsWith(word)
        }

        function getPathToModule(filespec) {
            var mod = Object.keys(Modules).find(function (key) {
                if (!!Modules[key].path) return Modules[key].path === filespec
                return false
            })
            return Modules[mod]
        }

        function getAreas(caller, _query) {
            var pathname = req('pathname')
            var CurrentDirectory = pathname.CurrentDirectory
            var join = pathname.join
            var dirname = pathname.dirname
            var rd = '/' // root directory
            var cd = './' // current directory
            var pd = '../' // parent directory
            var query = _query.replace(/\\/g, '/')

            var areas = []

            // Replace '/' with Current Directory if query starts with '/'
            if (starts(query, rd)) {
                areas.push(join(CurrentDirectory, query.replace(rd, '')))

                // combine the caller's path and the query, if relative path
            } else if (starts(query, cd) || starts(query, pd)) {
                areas.push(join(dirname(caller), query))
            } else {
                areas.push(join(dirname(caller), query))

                // Otherwise, combine node_module while going back directory
                var hierarchy = dirname(caller)
                var node_modules = 'node_modules'

                while (hierarchy !== '') {
                    areas.push(join(hierarchy, node_modules, query))
                    hierarchy = dirname(hierarchy)
                }
                var ScriptFullName = WScript.ScriptFullName
                areas.push(join(dirname(ScriptFullName), node_modules, query))
            }
            return areas
        }

        function getEntry(areas) {
            var join = req('pathname').join
            var filesystem = req('filesystem')
            var exists = filesystem.exists
            var readTextFileSync = filesystem.readTextFileSync
            var parse = JSON.parse
            var js = '.js'
            var json = '.json'
            var index = 'index.js'
            var indexjson = 'index.json'
            var packagejson = 'package.json'

            var entry = null
            while (areas.length) {
                var area = areas.shift()
                var temp
                if (exists((temp = area))) {
                    entry = temp
                    break
                }
                if (exists((temp = area + js))) {
                    entry = temp
                    break
                }
                if (exists((temp = area + json))) {
                    entry = temp
                    break
                }
                if (exists((temp = join(area, index)))) {
                    entry = temp
                    break
                }
                if (exists((temp = join(area, indexjson)))) {
                    entry = temp
                    break
                }
                if (exists((temp = join(area, packagejson)))) {
                    var main = parse(readTextFileSync(temp)).main
                    if (main == null) continue
                    areas.unshift(join(area, main))
                }
            }
            return entry
        }

        function createModule(GUID, entry, query, parentModule, encode) {
            var pathname = req('pathname')
            var dirname = pathname.dirname
            var basename = pathname.basename
            var extname = pathname.extname
            var parse = JSON.parse
            var readTextFileSync = req('filesystem').readTextFileSync

            if (parentModule) parentModule.mapping[query] = GUID

            var mod = {
                source: readTextFileSync(entry, encode != null ? encode : null),
                module: {
                    exports: {}
                },
                path: entry,
                mapping: {}
            }

            Modules[GUID] = mod

            var js = '.js'
            var json = '.json'

            switch (extname(entry)) {
                case js:
                    var name = entry
                        .split('')
                        .map(function (ch) {
                            return '$' + ch.codePointAt().toString(16).toUpperCase()
                        })
                        .join('')
                    wes.filestack.push(entry)
                    var code = new Function(
                        'require',
                        'module',
                        'exports',
                        'console',
                        '__dirname',
                        '__filename',
                        'wes',
                        'Buffer',
                        '(function ' + name + '() { ' + '"use strict";' + mod.source + '} )()'
                    )
                    code(
                        require.bind(null, entry),
                        mod.module,
                        mod.module.exports,
                        console,
                        dirname(entry),
                        entry,
                        wes,
                        entry === 'buffer' ? null : req('buffer')
                    )
                    wes.filestack.pop()
                    break
                case json:
                    mod.module.exports = parse(mod.source)
                    break
                default:
                    mod.module.exports = mod.source
            }
            return mod
        }

        // local require
        var process = {
            env: { NODE_ENV: '' },
            cwd: function () {
                return req('pathname').CurrentDirectory
            },
            platform: 'win32'
        }
        function req(moduleID) {
            var mod = Modules[moduleID]
            var entry = mod.path || '/'
            if (!has(mod, 'exports')) {
                if (!has(mod, 'module')) {
                    var dirname = entry //.split( '/' )
                    mod.module = { exports: {} }
                    mod.mapping = mod.mapping || {}
                    new Function(
                        'require',
                        'module',
                        'exports',
                        'console',
                        '__dirname',
                        '__filename',
                        'wes',
                        'process',
                        'Buffer',
                        '"use strict";' + mod.source
                    )(
                        require.bind(null, entry),
                        mod.module,
                        mod.module.exports,
                        console,
                        dirname,
                        entry,
                        wes,
                        process,
                        entry === 'buffer' ? null : req('buffer')
                    )
                }
                mod.exports = mod.module.exports
            }
            return mod.exports
        }

        // require
        function require(caller, query, encode) {
            var posixSep = req('pathname').posixSep

            // execute req function, if it is a core module
            if (!query.includes(posixSep)) {
                if (has(Modules, query)) {
                    return req(query)
                }
            }

            // execute OLE, if it is OLE
            try {
                return WScript.CreateObject(query)
            } catch (e) {}

            // execute req function, if it is a mapping[ query ]
            var parentModule = getPathToModule(caller)
            var mappingID
            if (parentModule) {
                if ((mappingID = parentModule.mapping[query])) {
                    return req(mappingID)
                }
            }

            var isAbsolute = req('pathname').isAbsolute
            var resolve = req('pathname').resolve
            var areas = []
            if (isAbsolute(query)) areas = [resolve(query)]
            else areas = getAreas(caller, query)

            var entry = getEntry(areas)
            if (entry == null)
                throw new Error(
                    'no module:\n' + 'caller: ' + caller + '\nquery: ' + query + '\n' + JSON.stringify(areas, null, 2)
                )

            var modId = genUUID()
            if (wes.main == null) wes.main = modId
            var mod = createModule(modId, entry, query, parentModule, encode)
            mod.exports = mod.module.exports

            return mod.exports
        }

        wes.Modules = Modules
        var path = req('pathname')

        var main = argv.unnamed[0] != null ? argv.unnamed[0] : 'REPL'
        if (main in wes.Modules) wes.main = main
        require(path.join(path.CurrentDirectory, '_'), main, argv.get('encode'))
    }
} catch (error) {
    if (!!console) {
        var errorStack = unescape(error.stack.split('$').join('%'))
        errorStack = errorStack.split(/\r?\n/).filter(function (line) {
            return !(
                line.startsWith('   at Function code (Function code:') ||
                line.startsWith('   at createModule (') ||
                line.startsWith('   at require (') ||
                line.startsWith('   at req (')
            )
        })
        var current = wes.filestack.slice(-1)

        console.log(console.ansi.color(255, 165, 0) + errorStack.join('\r\n').split('Function code:').join(''))

        if (error instanceof SyntaxError) {
            var fmt
            try {
                fmt = require('*', 'fmt')
            } catch (error1) {
                try {
                    fmt = require('*', '@wachaon/fmt')
                } catch (error2) {
                    fmt = null
                }
            }
            if (fmt != null) {
                var source
                if (wes.main === 'REPL') {
                    var file = Object.keys(wes.Modules).filter(function (key) {
                        return key.startsWith('{')
                    })[0]
                    source = wes.Modules[file].source
                } else {
                    var fs = require('*', 'filesystem')
                    source = fs.readTextFileSync(current)
                    console.log('\n' + console.ansi.yellow + current)
                }
                fmt.format(source)
            }
        }
    } else WScript.Popup('[error]' + error.message)
}
