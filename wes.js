try {
    var WShell = WScript.CreateObject('WScript.Shell')
    var formatConsoleString = function () {
        var args = Array.prototype.slice.call( arguments )
        if( args.length && typeof args[0] === 'string' && args[0].includes( '%' ) ) {
            var message = args.shift()
            while( args.length ) {
                var val = args.shift()
                var type = /(%[sdifjo])/.test( message ) ? message.match( /(%[sdifjo])/ )[0]: null
                switch( type ) {
                    case null: break;
                    case '%s': message = message.replace( '%s', '' + val ); break
                    case '%d': message = message.replace( '%d', val - 0 ); break
                    case '%f': message = message.replace( '%f', val - 0 ); break
                    case '%i': message = message.replace( '%i', parseInt( val ) ); break
                    case '%j': message = message.replace( '%j', JSON.stringify( val ) ); break
                    case '%o': message = message.replace( '%o', val ); break
                    default: break
                }
            }
            return  message
        } else return args.join( ' ' )
    }
    var normalizeConsoleString = function ( message ){
        message =  WScript.Arguments.Named.Exists( 'monotone' )
        ? message.replace( /(\x9B|\x1B\[)[0-?]*[ -\/]*[@-~]/g, "" )
        : message + console.ansi.clear
        return message
    }
    var console = {
        debugLog: [],
        log: function () {
            var args = Array.prototype.slice.call( arguments )
            var message = formatConsoleString.apply( null, args )
            message = normalizeConsoleString( message )
            if ( WScript.Arguments.Named.Exists( 'debug' ) ) console.logPush( message )
            WScript.StdErr.WriteLine( message )
        },
        logPush: function() {
            var args = Array.prototype.slice.call( arguments )
            var message = formatConsoleString.apply( null, args )
            message = normalizeConsoleString( message )
            console.debugLog.push( message )
        },
        print: function () {
            var args = Array.prototype.slice.call( arguments )
            var message = normalizeConsoleString( args.join('') )
            WScript.StdErr.Write( message )
        },
        ansi: {
            clear: '\u001B[0m',
            bold: '\u001B[1m',
            underscore: '\u001B[4m',
            blink: '\u001B[5m',
            reverse: '\u001B[7m',
            concealed: '\u001B[8m',

            black: '\u001B[30m',
            red: '\u001B[31m',
            green: '\u001B[32m',
            yellow: '\u001B[33m',
            blue: '\u001B[34m',
            magenta: '\u001B[35m',
            cyan: '\u001B[36m',
            silver: '\u001B[37m',

            gray: '\u001B[90m',
            brightRed: '\u001B[91m',
            brightGreen: '\u001B[92m',
            brightYellow: '\u001B[93m',
            brightBlue: '\u001B[94m',
            brightMagenta: '\u001B[95m',
            brightCyan: '\u001B[96m',
            white: '\u001B[97m',

            bgBlack: '\u001B[40m',
            bgRed: '\u001B[41m',
            bgGreen: '\u001B[42m',
            bgYellow: '\u001B[43m',
            bgBlue: '\u001B[44m',
            bgMagenta: '\u001B[45m',
            bgCyan: '\u001B[46m',
            bgSlver: '\u001B[47m',

            bgGray: '\u001B[100m',
            bgBrightRed: '\u001B[101m',
            bgBrightGreen: '\u001B[102m',
            bgBrightYellow: '\u001B[103m',
            bgBrightBlue: '\u001B[104m',
            bgBrightMagenta: '\u001B[105m',
            bgBrightCyan: '\u001B[106m',
            bgWhite: '\u001B[107m'
        }
    }
    if (!WScript.Arguments.Named.Exists('Engine')) {
        var WScriptArguments = (function() {
            var results = []
            for (var i = 0, args = WScript.Arguments; i < args.length; i++) {
                results.push(args.Item(i))
            }
            return results
        })()
        var ScriptHost =
            WShell.ExpandEnvironmentStrings('%PROCESSOR_ARCHITECTURE%') !==
            'x86'
                ? '{%}windir{%}\\SysWOW64\\cscript'
                : 'cscript'
        var Nologo = '//nologo'
        var Engin = '/Engine:Chakra'
        var Chakra = '//E:{{}1b7cd997-e5ff-4932-a7a6-2a9e636da385{}}'
        var Monotone = WScript.Arguments.Named.Exists('monotone')
            ? ''
            : '| echo off'
        var Enter = '{ENTER}'
        WShell.SendKeys(
            [
                ScriptHost,
                WScript.ScriptFullName,
                WScriptArguments.join(' '),
                Nologo,
                Chakra,
                Engin,
                Monotone,
                Enter
            ].join(' ')
        )
        WScript.Quit()
    } else {
        var history = []
        var stack = []
        var graph = ( {}
            ,{
    "argv": {
        "source": "const { Enumerator } = require( 'JScript' )\nconst program = [ 'wes' ]\nconst args = program.concat( new Enumerator( WScript.Arguments ) )\nconst unnamed = new Enumerator( WScript.Arguments.unnamed )\nconst named = ( () => {\nlet res = {}\nlet named = new Enumerator(WScript.Arguments.named)\nnamed.forEach(v => {\nlet named = WScript.Arguments.named.item(v)\nres[v] = named || \"\"\n} )\nreturn res\n} )()\nmodule.exports = {\nargs,\nunnamed,\nnamed\n}",
        "mapping": {},
        "name": "wes/argv"
    },
    "buffer": {
        "source": "class Buffer {\nconstructor( byte ) {\nreturn Hex2Buffer( Byte2Hex( byte ) )\n}\nstatic toHex ( buffer ) {\nreturn Buffer2Hex( buffer )\n}\n}\nconst Byte2Hex = ( byte ) => {\nlet elm = require('MSXML2.DOMDocument.6.0').createElement('elm')\nelm.dataType = 'bin.hex'\nelm.nodeTypedValue = byte\nreturn elm.text\n}\nconst Hex2Buffer = ( hex ) => new Uint8Array( hex.match( /.{1,2}/g ).map( v => parseInt( v, 16 ) ) )\nconst Buffer2Hex = ( buffer ) => {\nlet res = []\nbuffer.forEach( v => res.push( v.toString( 16 ) ) )\nreturn res.join( '' )\n}\nmodule.exports = Buffer\n",
        "mapping": {},
        "name": "wes/buffer"
    },
    "chardet": {
        "source": "var Match = function(det, rec, confidence, name, lang) {\nthis.confidence = confidence;\nthis.name = name || rec.name(det);\nthis.lang = lang;\n};\nclass ISO_2022 {\nmatch (det) {\nvar i, j;\nvar escN;\nvar hits   = 0;\nvar misses = 0;\nvar shifts = 0;\nvar quality;\nvar text = det.fInputBytes;\nvar textLen = det.fInputLen;\nscanInput:\nfor (i = 0; i < textLen; i++) {\nif (text[i] == 0x1b) {\ncheckEscapes:\nfor (escN = 0; escN < this.escapeSequences.length; escN++) {\nvar seq = this.escapeSequences[escN];\nif ((textLen - i) < seq.length)\ncontinue checkEscapes;\nfor (j = 1; j < seq.length; j++)\nif (seq[j] != text[i + j])\ncontinue checkEscapes;\nhits++;\ni += seq.length - 1;\ncontinue scanInput;\n}\nmisses++;\n}\nif (text[i] == 0x0e || text[i] == 0x0f)\nshifts++;\n}\nif (hits == 0)\nreturn null;\nquality = (100 * hits - 100 * misses) / (hits + misses);\nif (hits + shifts < 5)\nquality -= (5 - (hits + shifts)) * 10;\nreturn quality <= 0 ? null : new Match(det, this, quality);\n}\n}\nclass ISO_2022_JP extends ISO_2022 {\nconstructor() {\nsuper()\nthis.name = function() {\nreturn 'ISO-2022-JP';\n};\nthis.escapeSequences = [\n[ 0x1b, 0x24, 0x28, 0x43 ],\n[ 0x1b, 0x24, 0x28, 0x44 ],\n[ 0x1b, 0x24, 0x40 ],\n[ 0x1b, 0x24, 0x41 ],\n[ 0x1b, 0x24, 0x42 ],\n[ 0x1b, 0x26, 0x40 ],\n[ 0x1b, 0x28, 0x42 ],\n[ 0x1b, 0x28, 0x48 ],\n[ 0x1b, 0x28, 0x49 ],\n[ 0x1b, 0x28, 0x4a ],\n[ 0x1b, 0x2e, 0x41 ],\n[ 0x1b, 0x2e, 0x46 ]\n];\n}\n};\nclass ISO_2022_KR extends ISO_2022 {\nconstructor() {\nsuper()\nthis.name = function() {\nreturn 'ISO-2022-KR';\n};\nthis.escapeSequences = [\n[ 0x1b, 0x24, 0x29, 0x43 ]\n];\n}\n};\nclass ISO_2022_CN extends ISO_2022 {\nconstructor() {\nsuper()\nthis.name = function() {\nreturn 'ISO-2022-CN';\n};\nthis.escapeSequences = [\n[ 0x1b, 0x24, 0x29, 0x41 ],\n[ 0x1b, 0x24, 0x29, 0x47 ],\n[ 0x1b, 0x24, 0x2A, 0x48 ],\n[ 0x1b, 0x24, 0x29, 0x45 ],\n[ 0x1b, 0x24, 0x2B, 0x49 ],\n[ 0x1b, 0x24, 0x2B, 0x4A ],\n[ 0x1b, 0x24, 0x2B, 0x4B ],\n[ 0x1b, 0x24, 0x2B, 0x4C ],\n[ 0x1b, 0x24, 0x2B, 0x4D ],\n[ 0x1b, 0x4e ],\n[ 0x1b, 0x4f ]\n];\n}\n};\nfunction binarySearch(arr, searchValue) {\nfunction find(arr, searchValue, left, right) {\nif (right < left)\nreturn -1;\nvar mid = Math.floor((left + right) >>> 1);\nif (searchValue > arr[mid])\nreturn find(arr, searchValue, mid + 1, right);\nif (searchValue < arr[mid])\nreturn find(arr, searchValue, left, mid - 1);\nreturn mid;\n};\nreturn find(arr, searchValue, 0, arr.length - 1);\n};\nfunction IteratedChar() {\nthis.charValue = 0; \nthis.index     = 0;\nthis.nextIndex = 0;\nthis.error     = false;\nthis.done      = false;\nthis.reset = function() {\nthis.charValue = 0;\nthis.index     = -1;\nthis.nextIndex = 0;\nthis.error     = false;\nthis.done      = false;\n};\nthis.nextByte = function(det) {\nif (this.nextIndex >= det.fRawLength) {\nthis.done = true;\nreturn -1;\n}\nvar byteValue = det.fRawInput[this.nextIndex++] & 0x00ff;\nreturn byteValue;\n};\n};\nclass mbcs {\nmatch (det) {\nvar singleByteCharCount = 0,\ndoubleByteCharCount = 0,\ncommonCharCount     = 0,\nbadCharCount        = 0,\ntotalCharCount      = 0,\nconfidence          = 0;\nvar iter = new IteratedChar();\ndetectBlock: {\nfor (iter.reset(); this.nextChar(iter, det);) {\ntotalCharCount++;\nif (iter.error) {\nbadCharCount++;\n} else {\nvar cv = iter.charValue & 0xFFFFFFFF;\nif (cv <= 0xff) {\nsingleByteCharCount++;\n} else {\ndoubleByteCharCount++;\nif (this.commonChars != null) {\nif (binarySearch(this.commonChars, cv) >= 0) {\ncommonCharCount++;\n}\n}\n}\n}\nif (badCharCount >= 2 && badCharCount * 5 >= doubleByteCharCount) {\nbreak detectBlock;\n}\n}\nif (doubleByteCharCount <= 10 && badCharCount== 0) {\nif (doubleByteCharCount == 0 && totalCharCount < 10) {\nconfidence = 0;\n}\nelse {\nconfidence = 10;\n}\nbreak detectBlock;\n}\nif (doubleByteCharCount < 20 * badCharCount) {\nconfidence = 0;\nbreak detectBlock;\n}\nif (this.commonChars == null) {\nconfidence = 30 + doubleByteCharCount - 20 * badCharCount;\nif (confidence > 100) {\nconfidence = 100;\n}\n} else {\nvar maxVal = Math.log(parseFloat(doubleByteCharCount) / 4);\nvar scaleFactor = 90.0 / maxVal;\nconfidence = Math.floor(Math.log(commonCharCount + 1) * scaleFactor + 10);\nconfidence = Math.min(confidence, 100);\n}\n}\nreturn confidence == 0 ? null : new Match(det, this, confidence);\n}\nnextChar (iter, det) {};\n}\nclass sjis extends mbcs {\nconstructor () {\nsuper()\nthis.name = function() {\nreturn 'Shift-JIS';\n};\nthis.language = function() {\nreturn 'ja';\n};\nthis.commonChars = [\n0x8140, 0x8141, 0x8142, 0x8145, 0x815b, 0x8169, 0x816a, 0x8175, 0x8176, 0x82a0,\n0x82a2, 0x82a4, 0x82a9, 0x82aa, 0x82ab, 0x82ad, 0x82af, 0x82b1, 0x82b3, 0x82b5,\n0x82b7, 0x82bd, 0x82be, 0x82c1, 0x82c4, 0x82c5, 0x82c6, 0x82c8, 0x82c9, 0x82cc,\n0x82cd, 0x82dc, 0x82e0, 0x82e7, 0x82e8, 0x82e9, 0x82ea, 0x82f0, 0x82f1, 0x8341,\n0x8343, 0x834e, 0x834f, 0x8358, 0x835e, 0x8362, 0x8367, 0x8375, 0x8376, 0x8389,\n0x838a, 0x838b, 0x838d, 0x8393, 0x8e96, 0x93fa, 0x95aa\n];\nthis.nextChar = function(iter, det) {\niter.index = iter.nextIndex;\niter.error = false;\nvar firstByte;\nfirstByte = iter.charValue = iter.nextByte(det);\nif (firstByte < 0)\nreturn false;\nif (firstByte <= 0x7f || (firstByte > 0xa0 && firstByte <= 0xdf))\nreturn true;\nvar secondByte = iter.nextByte(det);\nif (secondByte < 0)\nreturn false;\niter.charValue = (firstByte << 8) | secondByte;\nif (! ((secondByte >= 0x40 && secondByte <= 0x7f) || (secondByte >= 0x80 && secondByte <= 0xff))) {\niter.error = true;\n}\nreturn true;\n};\n}\n}\nclass big5 extends mbcs {\nconstructor () {\nsuper()\nthis.name = function() {\nreturn 'Big5';\n};\nthis.language = function() {\nreturn 'zh';\n};\nthis.commonChars = [\n0xa140, 0xa141, 0xa142, 0xa143, 0xa147, 0xa149, 0xa175, 0xa176, 0xa440, 0xa446,\n0xa447, 0xa448, 0xa451, 0xa454, 0xa457, 0xa464, 0xa46a, 0xa46c, 0xa477, 0xa4a3,\n0xa4a4, 0xa4a7, 0xa4c1, 0xa4ce, 0xa4d1, 0xa4df, 0xa4e8, 0xa4fd, 0xa540, 0xa548,\n0xa558, 0xa569, 0xa5cd, 0xa5e7, 0xa657, 0xa661, 0xa662, 0xa668, 0xa670, 0xa6a8,\n0xa6b3, 0xa6b9, 0xa6d3, 0xa6db, 0xa6e6, 0xa6f2, 0xa740, 0xa751, 0xa759, 0xa7da,\n0xa8a3, 0xa8a5, 0xa8ad, 0xa8d1, 0xa8d3, 0xa8e4, 0xa8fc, 0xa9c0, 0xa9d2, 0xa9f3,\n0xaa6b, 0xaaba, 0xaabe, 0xaacc, 0xaafc, 0xac47, 0xac4f, 0xacb0, 0xacd2, 0xad59,\n0xaec9, 0xafe0, 0xb0ea, 0xb16f, 0xb2b3, 0xb2c4, 0xb36f, 0xb44c, 0xb44e, 0xb54c,\n0xb5a5, 0xb5bd, 0xb5d0, 0xb5d8, 0xb671, 0xb7ed, 0xb867, 0xb944, 0xbad8, 0xbb44,\n0xbba1, 0xbdd1, 0xc2c4, 0xc3b9, 0xc440, 0xc45f\n];\nthis.nextChar = function(iter, det) {\niter.index = iter.nextIndex;\niter.error = false;\nvar firstByte = iter.charValue = iter.nextByte(det);\nif (firstByte < 0)\nreturn false;\nif (firstByte <= 0x7f || firstByte == 0xff)\nreturn true;\nvar secondByte = iter.nextByte(det);\nif (secondByte < 0)\nreturn false;\niter.charValue = (iter.charValue << 8) | secondByte;\nif (secondByte < 0x40 || secondByte == 0x7f || secondByte == 0xff)\niter.error = true;\nreturn true;\n}\n}\n};\nfunction eucNextChar(iter, det) {\niter.index = iter.nextIndex;\niter.error = false;\nvar firstByte  = 0;\nvar secondByte = 0;\nvar thirdByte  = 0;\nbuildChar: {\nfirstByte = iter.charValue = iter.nextByte(det);\nif (firstByte < 0) {\niter.done = true;\nbreak buildChar;\n}\nif (firstByte <= 0x8d) {\nbreak buildChar;\n}\nsecondByte = iter.nextByte(det);\niter.charValue = (iter.charValue << 8) | secondByte;\nif (firstByte >= 0xA1 && firstByte <= 0xfe) {\nif (secondByte < 0xa1) {\niter.error = true;\n}\nbreak buildChar;\n}\nif (firstByte == 0x8e) {\nif (secondByte < 0xa1) {\niter.error = true;\n}\nbreak buildChar;\n}\nif (firstByte == 0x8f) {\nthirdByte = iter.nextByte(det);\niter.charValue = (iter.charValue << 8) | thirdByte;\nif (thirdByte < 0xa1) {\niter.error = true;\n}\n}\n}\nreturn iter.done == false;\n};\nclass euc_jp extends mbcs {\nconstructor () {\nsuper()\nthis.name = function() {\nreturn 'EUC-JP';\n};\nthis.language = function() {\nreturn 'ja';\n};\nthis.commonChars = [\n0xa1a1, 0xa1a2, 0xa1a3, 0xa1a6, 0xa1bc, 0xa1ca, 0xa1cb, 0xa1d6, 0xa1d7, 0xa4a2,\n0xa4a4, 0xa4a6, 0xa4a8, 0xa4aa, 0xa4ab, 0xa4ac, 0xa4ad, 0xa4af, 0xa4b1, 0xa4b3,\n0xa4b5, 0xa4b7, 0xa4b9, 0xa4bb, 0xa4bd, 0xa4bf, 0xa4c0, 0xa4c1, 0xa4c3, 0xa4c4,\n0xa4c6, 0xa4c7, 0xa4c8, 0xa4c9, 0xa4ca, 0xa4cb, 0xa4ce, 0xa4cf, 0xa4d0, 0xa4de,\n0xa4df, 0xa4e1, 0xa4e2, 0xa4e4, 0xa4e8, 0xa4e9, 0xa4ea, 0xa4eb, 0xa4ec, 0xa4ef,\n0xa4f2, 0xa4f3, 0xa5a2, 0xa5a3, 0xa5a4, 0xa5a6, 0xa5a7, 0xa5aa, 0xa5ad, 0xa5af,\n0xa5b0, 0xa5b3, 0xa5b5, 0xa5b7, 0xa5b8, 0xa5b9, 0xa5bf, 0xa5c3, 0xa5c6, 0xa5c7,\n0xa5c8, 0xa5c9, 0xa5cb, 0xa5d0, 0xa5d5, 0xa5d6, 0xa5d7, 0xa5de, 0xa5e0, 0xa5e1,\n0xa5e5, 0xa5e9, 0xa5ea, 0xa5eb, 0xa5ec, 0xa5ed, 0xa5f3, 0xb8a9, 0xb9d4, 0xbaee,\n0xbbc8, 0xbef0, 0xbfb7, 0xc4ea, 0xc6fc, 0xc7bd, 0xcab8, 0xcaf3, 0xcbdc, 0xcdd1\n];\nthis.nextChar = eucNextChar;\n}\n}\nclass euc_kr extends mbcs {\nconstructor () {\nsuper()\nthis.name = function() {\nreturn 'EUC-KR';\n};\nthis.language = function() {\nreturn 'ko';\n};\nthis.commonChars = [\n0xb0a1, 0xb0b3, 0xb0c5, 0xb0cd, 0xb0d4, 0xb0e6, 0xb0ed, 0xb0f8, 0xb0fa, 0xb0fc,\n0xb1b8, 0xb1b9, 0xb1c7, 0xb1d7, 0xb1e2, 0xb3aa, 0xb3bb, 0xb4c2, 0xb4cf, 0xb4d9,\n0xb4eb, 0xb5a5, 0xb5b5, 0xb5bf, 0xb5c7, 0xb5e9, 0xb6f3, 0xb7af, 0xb7c2, 0xb7ce,\n0xb8a6, 0xb8ae, 0xb8b6, 0xb8b8, 0xb8bb, 0xb8e9, 0xb9ab, 0xb9ae, 0xb9cc, 0xb9ce,\n0xb9fd, 0xbab8, 0xbace, 0xbad0, 0xbaf1, 0xbbe7, 0xbbf3, 0xbbfd, 0xbcad, 0xbcba,\n0xbcd2, 0xbcf6, 0xbdba, 0xbdc0, 0xbdc3, 0xbdc5, 0xbec6, 0xbec8, 0xbedf, 0xbeee,\n0xbef8, 0xbefa, 0xbfa1, 0xbfa9, 0xbfc0, 0xbfe4, 0xbfeb, 0xbfec, 0xbff8, 0xc0a7,\n0xc0af, 0xc0b8, 0xc0ba, 0xc0bb, 0xc0bd, 0xc0c7, 0xc0cc, 0xc0ce, 0xc0cf, 0xc0d6,\n0xc0da, 0xc0e5, 0xc0fb, 0xc0fc, 0xc1a4, 0xc1a6, 0xc1b6, 0xc1d6, 0xc1df, 0xc1f6,\n0xc1f8, 0xc4a1, 0xc5cd, 0xc6ae, 0xc7cf, 0xc7d1, 0xc7d2, 0xc7d8, 0xc7e5, 0xc8ad\n];\nthis.nextChar = eucNextChar;\n}\n}\nclass gb_18030 extends mbcs {\nconstructor () {\nsuper()\nthis.name = function() {\nreturn 'GB18030';\n};\nthis.language = function() {\nreturn 'zh';\n};\nthis.nextChar = function(iter, det) {\niter.index = iter.nextIndex;\niter.error = false;\nvar firstByte  = 0;\nvar secondByte = 0;\nvar thirdByte  = 0;\nvar fourthByte = 0;\nbuildChar: {\nfirstByte = iter.charValue = iter.nextByte(det);\nif (firstByte < 0) {\niter.done = true;\nbreak buildChar;\n}\nif (firstByte <= 0x80) {\nbreak buildChar;\n}\nsecondByte = iter.nextByte(det);\niter.charValue = (iter.charValue << 8) | secondByte;\nif (firstByte >= 0x81 && firstByte <= 0xFE) {\nif ((secondByte >= 0x40 && secondByte <= 0x7E) || (secondByte >=80 && secondByte <= 0xFE)) {\nbreak buildChar;\n}\nif (secondByte >= 0x30 && secondByte <= 0x39) {\nthirdByte = iter.nextByte(det);\nif (thirdByte >= 0x81 && thirdByte <= 0xFE) {\nfourthByte = iter.nextByte(det);\nif (fourthByte >= 0x30 && fourthByte <= 0x39) {\niter.charValue = (iter.charValue << 16) | (thirdByte << 8) | fourthByte;\nbreak buildChar;\n}\n}\n}\niter.error = true;\nbreak buildChar;\n}\n}\nreturn iter.done == false;\n};\nthis.commonChars = [\n0xa1a1, 0xa1a2, 0xa1a3, 0xa1a4, 0xa1b0, 0xa1b1, 0xa1f1, 0xa1f3, 0xa3a1, 0xa3ac,\n0xa3ba, 0xb1a8, 0xb1b8, 0xb1be, 0xb2bb, 0xb3c9, 0xb3f6, 0xb4f3, 0xb5bd, 0xb5c4,\n0xb5e3, 0xb6af, 0xb6d4, 0xb6e0, 0xb7a2, 0xb7a8, 0xb7bd, 0xb7d6, 0xb7dd, 0xb8b4,\n0xb8df, 0xb8f6, 0xb9ab, 0xb9c9, 0xb9d8, 0xb9fa, 0xb9fd, 0xbacd, 0xbba7, 0xbbd6,\n0xbbe1, 0xbbfa, 0xbcbc, 0xbcdb, 0xbcfe, 0xbdcc, 0xbecd, 0xbedd, 0xbfb4, 0xbfc6,\n0xbfc9, 0xc0b4, 0xc0ed, 0xc1cb, 0xc2db, 0xc3c7, 0xc4dc, 0xc4ea, 0xc5cc, 0xc6f7,\n0xc7f8, 0xc8ab, 0xc8cb, 0xc8d5, 0xc8e7, 0xc9cf, 0xc9fa, 0xcab1, 0xcab5, 0xcac7,\n0xcad0, 0xcad6, 0xcaf5, 0xcafd, 0xccec, 0xcdf8, 0xceaa, 0xcec4, 0xced2, 0xcee5,\n0xcfb5, 0xcfc2, 0xcfd6, 0xd0c2, 0xd0c5, 0xd0d0, 0xd0d4, 0xd1a7, 0xd2aa, 0xd2b2,\n0xd2b5, 0xd2bb, 0xd2d4, 0xd3c3, 0xd3d0, 0xd3fd, 0xd4c2, 0xd4da, 0xd5e2, 0xd6d0\n];\n}\n};\nfunction NGramParser(theNgramList, theByteMap) {\nvar N_GRAM_MASK = 0xFFFFFF;\nthis.byteIndex = 0;\nthis.ngram = 0;\nthis.ngramList = theNgramList;\nthis.byteMap = theByteMap;\nthis.ngramCount = 0;\nthis.hitCount = 0;\nthis.spaceChar;\nthis.search = function(table, value) {\nvar index = 0;\nif (table[index + 32] <= value) index += 32;\nif (table[index + 16] <= value) index += 16;\nif (table[index + 8]  <= value) index += 8;\nif (table[index + 4]  <= value) index += 4;\nif (table[index + 2]  <= value) index += 2;\nif (table[index + 1]  <= value) index += 1;\nif (table[index]      > value)  index -= 1;\nif (index < 0 || table[index] != value)\nreturn -1;\nreturn index;\n};\nthis.lookup = function(thisNgram) {\nthis.ngramCount += 1;\nif (this.search(this.ngramList, thisNgram) >= 0) {\nthis.hitCount += 1;\n}\n};\nthis.addByte = function(b) {\nthis.ngram = ((this.ngram << 8) + (b & 0xFF)) & N_GRAM_MASK;\nthis.lookup(this.ngram);\n}\nthis.nextByte = function(det) {\nif (this.byteIndex >= det.fInputLen)\nreturn -1;\nreturn det.fInputBytes[this.byteIndex++] & 0xFF;\n}\nthis.parse = function(det, spaceCh) {\nvar b, ignoreSpace = false;\nthis.spaceChar = spaceCh;\nwhile ((b = this.nextByte(det)) >= 0) {\nvar mb = this.byteMap[b];\nif (mb != 0) {\nif (!(mb == this.spaceChar && ignoreSpace)) {\nthis.addByte(mb);\n}\nignoreSpace = (mb == this.spaceChar);\n}\n}\nthis.addByte(this.spaceChar);\nvar rawPercent = this.hitCount / this.ngramCount;\nif (rawPercent > 0.33)\nreturn 98;\nreturn Math.floor(rawPercent * 300.0);\n};\n};\nfunction NGramsPlusLang(la, ng) {\nthis.fLang = la;\nthis.fNGrams = ng;\n};\nclass sbcs {\nconstructor () {\nthis.spaceChar = 0x20;\n} \nngrams () {}\nbyteMap () {}\nmatch (det) {\nvar ngrams = this.ngrams();\nvar multiple = (Array.isArray(ngrams) && ngrams[0] instanceof NGramsPlusLang);\nif (!multiple) {\nvar parser = new NGramParser(ngrams, this.byteMap());\nvar confidence = parser.parse(det, this.spaceChar);\nreturn confidence <= 0 ? null : new Match(det, this, confidence);\n}\nvar bestConfidenceSoFar = -1;\nvar lang = null;\nfor (var i = ngrams.length - 1; i >= 0; i--) {\nvar ngl = ngrams[i];\nvar parser = new NGramParser(ngl.fNGrams, this.byteMap());\nvar confidence = parser.parse(det, this.spaceChar);\nif (confidence > bestConfidenceSoFar) {\nbestConfidenceSoFar = confidence;\nlang = ngl.fLang;\n}\n}\nvar name = this.name(det);\nreturn bestConfidenceSoFar <= 0 ? null : new Match(det, this, bestConfidenceSoFar, name, lang);\n}\n}\nclass ISO_8859_1 extends sbcs {\nconstructor () {\nsuper()\nthis.byteMap = function() {\nreturn [\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,\n0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,\n0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,\n0x78, 0x79, 0x7A, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,\n0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,\n0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,\n0x78, 0x79, 0x7A, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0xAA, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0xB5, 0x20, 0x20,\n0x20, 0x20, 0xBA, 0x20, 0x20, 0x20, 0x20, 0x20,\n0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7,\n0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF,\n0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0x20,\n0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xDF,\n0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7,\n0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF,\n0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0x20,\n0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF\n];\n};\nthis.ngrams = function() {\nreturn [\nnew NGramsPlusLang('da', [\n0x206166, 0x206174, 0x206465, 0x20656E, 0x206572, 0x20666F, 0x206861, 0x206920,\n0x206D65, 0x206F67, 0x2070E5, 0x207369, 0x207374, 0x207469, 0x207669, 0x616620,\n0x616E20, 0x616E64, 0x617220, 0x617420, 0x646520, 0x64656E, 0x646572, 0x646574,\n0x652073, 0x656420, 0x656465, 0x656E20, 0x656E64, 0x657220, 0x657265, 0x657320,\n0x657420, 0x666F72, 0x676520, 0x67656E, 0x676572, 0x696765, 0x696C20, 0x696E67,\n0x6B6520, 0x6B6B65, 0x6C6572, 0x6C6967, 0x6C6C65, 0x6D6564, 0x6E6465, 0x6E6520,\n0x6E6720, 0x6E6765, 0x6F6720, 0x6F6D20, 0x6F7220, 0x70E520, 0x722064, 0x722065,\n0x722073, 0x726520, 0x737465, 0x742073, 0x746520, 0x746572, 0x74696C, 0x766572\n]),\nnew NGramsPlusLang('de', [\n0x20616E, 0x206175, 0x206265, 0x206461, 0x206465, 0x206469, 0x206569, 0x206765,\n0x206861, 0x20696E, 0x206D69, 0x207363, 0x207365, 0x20756E, 0x207665, 0x20766F,\n0x207765, 0x207A75, 0x626572, 0x636820, 0x636865, 0x636874, 0x646173, 0x64656E,\n0x646572, 0x646965, 0x652064, 0x652073, 0x65696E, 0x656974, 0x656E20, 0x657220,\n0x657320, 0x67656E, 0x68656E, 0x687420, 0x696368, 0x696520, 0x696E20, 0x696E65,\n0x697420, 0x6C6963, 0x6C6C65, 0x6E2061, 0x6E2064, 0x6E2073, 0x6E6420, 0x6E6465,\n0x6E6520, 0x6E6720, 0x6E6765, 0x6E7465, 0x722064, 0x726465, 0x726569, 0x736368,\n0x737465, 0x742064, 0x746520, 0x74656E, 0x746572, 0x756E64, 0x756E67, 0x766572\n]),\nnew NGramsPlusLang('en', [\n0x206120, 0x20616E, 0x206265, 0x20636F, 0x20666F, 0x206861, 0x206865, 0x20696E,\n0x206D61, 0x206F66, 0x207072, 0x207265, 0x207361, 0x207374, 0x207468, 0x20746F,\n0x207768, 0x616964, 0x616C20, 0x616E20, 0x616E64, 0x617320, 0x617420, 0x617465,\n0x617469, 0x642061, 0x642074, 0x652061, 0x652073, 0x652074, 0x656420, 0x656E74,\n0x657220, 0x657320, 0x666F72, 0x686174, 0x686520, 0x686572, 0x696420, 0x696E20,\n0x696E67, 0x696F6E, 0x697320, 0x6E2061, 0x6E2074, 0x6E6420, 0x6E6720, 0x6E7420,\n0x6F6620, 0x6F6E20, 0x6F7220, 0x726520, 0x727320, 0x732061, 0x732074, 0x736169,\n0x737420, 0x742074, 0x746572, 0x746861, 0x746865, 0x74696F, 0x746F20, 0x747320\n]),\nnew NGramsPlusLang('es', [\n0x206120, 0x206361, 0x20636F, 0x206465, 0x20656C, 0x20656E, 0x206573, 0x20696E,\n0x206C61, 0x206C6F, 0x207061, 0x20706F, 0x207072, 0x207175, 0x207265, 0x207365,\n0x20756E, 0x207920, 0x612063, 0x612064, 0x612065, 0x61206C, 0x612070, 0x616369,\n0x61646F, 0x616C20, 0x617220, 0x617320, 0x6369F3, 0x636F6E, 0x646520, 0x64656C,\n0x646F20, 0x652064, 0x652065, 0x65206C, 0x656C20, 0x656E20, 0x656E74, 0x657320,\n0x657374, 0x69656E, 0x69F36E, 0x6C6120, 0x6C6F73, 0x6E2065, 0x6E7465, 0x6F2064,\n0x6F2065, 0x6F6E20, 0x6F7220, 0x6F7320, 0x706172, 0x717565, 0x726120, 0x726573,\n0x732064, 0x732065, 0x732070, 0x736520, 0x746520, 0x746F20, 0x756520, 0xF36E20\n]),\nnew NGramsPlusLang('fr', [\n0x206175, 0x20636F, 0x206461, 0x206465, 0x206475, 0x20656E, 0x206574, 0x206C61,\n0x206C65, 0x207061, 0x20706F, 0x207072, 0x207175, 0x207365, 0x20736F, 0x20756E,\n0x20E020, 0x616E74, 0x617469, 0x636520, 0x636F6E, 0x646520, 0x646573, 0x647520,\n0x652061, 0x652063, 0x652064, 0x652065, 0x65206C, 0x652070, 0x652073, 0x656E20,\n0x656E74, 0x657220, 0x657320, 0x657420, 0x657572, 0x696F6E, 0x697320, 0x697420,\n0x6C6120, 0x6C6520, 0x6C6573, 0x6D656E, 0x6E2064, 0x6E6520, 0x6E7320, 0x6E7420,\n0x6F6E20, 0x6F6E74, 0x6F7572, 0x717565, 0x72206C, 0x726520, 0x732061, 0x732064,\n0x732065, 0x73206C, 0x732070, 0x742064, 0x746520, 0x74696F, 0x756520, 0x757220\n]),\nnew NGramsPlusLang('it', [\n0x20616C, 0x206368, 0x20636F, 0x206465, 0x206469, 0x206520, 0x20696C, 0x20696E,\n0x206C61, 0x207065, 0x207072, 0x20756E, 0x612063, 0x612064, 0x612070, 0x612073,\n0x61746F, 0x636865, 0x636F6E, 0x64656C, 0x646920, 0x652061, 0x652063, 0x652064,\n0x652069, 0x65206C, 0x652070, 0x652073, 0x656C20, 0x656C6C, 0x656E74, 0x657220,\n0x686520, 0x692061, 0x692063, 0x692064, 0x692073, 0x696120, 0x696C20, 0x696E20,\n0x696F6E, 0x6C6120, 0x6C6520, 0x6C6920, 0x6C6C61, 0x6E6520, 0x6E6920, 0x6E6F20,\n0x6E7465, 0x6F2061, 0x6F2064, 0x6F2069, 0x6F2073, 0x6F6E20, 0x6F6E65, 0x706572,\n0x726120, 0x726520, 0x736920, 0x746120, 0x746520, 0x746920, 0x746F20, 0x7A696F\n]),\nnew NGramsPlusLang('nl', [\n0x20616C, 0x206265, 0x206461, 0x206465, 0x206469, 0x206565, 0x20656E, 0x206765,\n0x206865, 0x20696E, 0x206D61, 0x206D65, 0x206F70, 0x207465, 0x207661, 0x207665,\n0x20766F, 0x207765, 0x207A69, 0x61616E, 0x616172, 0x616E20, 0x616E64, 0x617220,\n0x617420, 0x636874, 0x646520, 0x64656E, 0x646572, 0x652062, 0x652076, 0x65656E,\n0x656572, 0x656E20, 0x657220, 0x657273, 0x657420, 0x67656E, 0x686574, 0x696520,\n0x696E20, 0x696E67, 0x697320, 0x6E2062, 0x6E2064, 0x6E2065, 0x6E2068, 0x6E206F,\n0x6E2076, 0x6E6465, 0x6E6720, 0x6F6E64, 0x6F6F72, 0x6F7020, 0x6F7220, 0x736368,\n0x737465, 0x742064, 0x746520, 0x74656E, 0x746572, 0x76616E, 0x766572, 0x766F6F\n]),\nnew NGramsPlusLang('no', [\n0x206174, 0x206176, 0x206465, 0x20656E, 0x206572, 0x20666F, 0x206861, 0x206920,\n0x206D65, 0x206F67, 0x2070E5, 0x207365, 0x20736B, 0x20736F, 0x207374, 0x207469,\n0x207669, 0x20E520, 0x616E64, 0x617220, 0x617420, 0x646520, 0x64656E, 0x646574,\n0x652073, 0x656420, 0x656E20, 0x656E65, 0x657220, 0x657265, 0x657420, 0x657474,\n0x666F72, 0x67656E, 0x696B6B, 0x696C20, 0x696E67, 0x6B6520, 0x6B6B65, 0x6C6520,\n0x6C6C65, 0x6D6564, 0x6D656E, 0x6E2073, 0x6E6520, 0x6E6720, 0x6E6765, 0x6E6E65,\n0x6F6720, 0x6F6D20, 0x6F7220, 0x70E520, 0x722073, 0x726520, 0x736F6D, 0x737465,\n0x742073, 0x746520, 0x74656E, 0x746572, 0x74696C, 0x747420, 0x747465, 0x766572\n]),\nnew NGramsPlusLang('pt', [\n0x206120, 0x20636F, 0x206461, 0x206465, 0x20646F, 0x206520, 0x206573, 0x206D61,\n0x206E6F, 0x206F20, 0x207061, 0x20706F, 0x207072, 0x207175, 0x207265, 0x207365,\n0x20756D, 0x612061, 0x612063, 0x612064, 0x612070, 0x616465, 0x61646F, 0x616C20,\n0x617220, 0x617261, 0x617320, 0x636F6D, 0x636F6E, 0x646120, 0x646520, 0x646F20,\n0x646F73, 0x652061, 0x652064, 0x656D20, 0x656E74, 0x657320, 0x657374, 0x696120,\n0x696361, 0x6D656E, 0x6E7465, 0x6E746F, 0x6F2061, 0x6F2063, 0x6F2064, 0x6F2065,\n0x6F2070, 0x6F7320, 0x706172, 0x717565, 0x726120, 0x726573, 0x732061, 0x732064,\n0x732065, 0x732070, 0x737461, 0x746520, 0x746F20, 0x756520, 0xE36F20, 0xE7E36F\n]),\nnew NGramsPlusLang('sv', [\n0x206174, 0x206176, 0x206465, 0x20656E, 0x2066F6, 0x206861, 0x206920, 0x20696E,\n0x206B6F, 0x206D65, 0x206F63, 0x2070E5, 0x20736B, 0x20736F, 0x207374, 0x207469,\n0x207661, 0x207669, 0x20E472, 0x616465, 0x616E20, 0x616E64, 0x617220, 0x617474,\n0x636820, 0x646520, 0x64656E, 0x646572, 0x646574, 0x656420, 0x656E20, 0x657220,\n0x657420, 0x66F672, 0x67656E, 0x696C6C, 0x696E67, 0x6B6120, 0x6C6C20, 0x6D6564,\n0x6E2073, 0x6E6120, 0x6E6465, 0x6E6720, 0x6E6765, 0x6E696E, 0x6F6368, 0x6F6D20,\n0x6F6E20, 0x70E520, 0x722061, 0x722073, 0x726120, 0x736B61, 0x736F6D, 0x742073,\n0x746120, 0x746520, 0x746572, 0x74696C, 0x747420, 0x766172, 0xE47220, 0xF67220,\n])\n];\n};\nthis.name = function(det) {\nreturn (det && det.fC1Bytes) ? 'windows-1252' : 'ISO-8859-1';\n};\n}\n};\nclass ISO_8859_2 extends sbcs {\nconstructor () {\nsuper()\nthis.byteMap = function() {\nreturn [\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,\n0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,\n0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,\n0x78, 0x79, 0x7A, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,\n0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,\n0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,\n0x78, 0x79, 0x7A, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0xB1, 0x20, 0xB3, 0x20, 0xB5, 0xB6, 0x20,\n0x20, 0xB9, 0xBA, 0xBB, 0xBC, 0x20, 0xBE, 0xBF,\n0x20, 0xB1, 0x20, 0xB3, 0x20, 0xB5, 0xB6, 0xB7,\n0x20, 0xB9, 0xBA, 0xBB, 0xBC, 0x20, 0xBE, 0xBF,\n0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7,\n0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF,\n0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0x20,\n0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xDF,\n0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7,\n0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF,\n0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0x20,\n0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x20\n];\n}\nthis.ngrams = function() {\nreturn [\nnew NGramsPlusLang('cs', [\n0x206120, 0x206279, 0x20646F, 0x206A65, 0x206E61, 0x206E65, 0x206F20, 0x206F64,\n0x20706F, 0x207072, 0x2070F8, 0x20726F, 0x207365, 0x20736F, 0x207374, 0x20746F,\n0x207620, 0x207679, 0x207A61, 0x612070, 0x636520, 0x636820, 0x652070, 0x652073,\n0x652076, 0x656D20, 0x656EED, 0x686F20, 0x686F64, 0x697374, 0x6A6520, 0x6B7465,\n0x6C6520, 0x6C6920, 0x6E6120, 0x6EE920, 0x6EEC20, 0x6EED20, 0x6F2070, 0x6F646E,\n0x6F6A69, 0x6F7374, 0x6F7520, 0x6F7661, 0x706F64, 0x706F6A, 0x70726F, 0x70F865,\n0x736520, 0x736F75, 0x737461, 0x737469, 0x73746E, 0x746572, 0x746EED, 0x746F20,\n0x752070, 0xBE6520, 0xE16EED, 0xE9686F, 0xED2070, 0xED2073, 0xED6D20, 0xF86564,\n]),\nnew NGramsPlusLang('hu', [\n0x206120, 0x20617A, 0x206265, 0x206567, 0x20656C, 0x206665, 0x206861, 0x20686F,\n0x206973, 0x206B65, 0x206B69, 0x206BF6, 0x206C65, 0x206D61, 0x206D65, 0x206D69,\n0x206E65, 0x20737A, 0x207465, 0x20E973, 0x612061, 0x61206B, 0x61206D, 0x612073,\n0x616B20, 0x616E20, 0x617A20, 0x62616E, 0x62656E, 0x656779, 0x656B20, 0x656C20,\n0x656C65, 0x656D20, 0x656E20, 0x657265, 0x657420, 0x657465, 0x657474, 0x677920,\n0x686F67, 0x696E74, 0x697320, 0x6B2061, 0x6BF67A, 0x6D6567, 0x6D696E, 0x6E2061,\n0x6E616B, 0x6E656B, 0x6E656D, 0x6E7420, 0x6F6779, 0x732061, 0x737A65, 0x737A74,\n0x737AE1, 0x73E967, 0x742061, 0x747420, 0x74E173, 0x7A6572, 0xE16E20, 0xE97320,\n]),\nnew NGramsPlusLang('pl', [\n0x20637A, 0x20646F, 0x206920, 0x206A65, 0x206B6F, 0x206D61, 0x206D69, 0x206E61,\n0x206E69, 0x206F64, 0x20706F, 0x207072, 0x207369, 0x207720, 0x207769, 0x207779,\n0x207A20, 0x207A61, 0x612070, 0x612077, 0x616E69, 0x636820, 0x637A65, 0x637A79,\n0x646F20, 0x647A69, 0x652070, 0x652073, 0x652077, 0x65207A, 0x65676F, 0x656A20,\n0x656D20, 0x656E69, 0x676F20, 0x696120, 0x696520, 0x69656A, 0x6B6120, 0x6B6920,\n0x6B6965, 0x6D6965, 0x6E6120, 0x6E6961, 0x6E6965, 0x6F2070, 0x6F7761, 0x6F7769,\n0x706F6C, 0x707261, 0x70726F, 0x70727A, 0x727A65, 0x727A79, 0x7369EA, 0x736B69,\n0x737461, 0x776965, 0x796368, 0x796D20, 0x7A6520, 0x7A6965, 0x7A7920, 0xF37720,\n]),\nnew NGramsPlusLang('ro', [\n0x206120, 0x206163, 0x206361, 0x206365, 0x20636F, 0x206375, 0x206465, 0x206469,\n0x206C61, 0x206D61, 0x207065, 0x207072, 0x207365, 0x2073E3, 0x20756E, 0x20BA69,\n0x20EE6E, 0x612063, 0x612064, 0x617265, 0x617420, 0x617465, 0x617520, 0x636172,\n0x636F6E, 0x637520, 0x63E320, 0x646520, 0x652061, 0x652063, 0x652064, 0x652070,\n0x652073, 0x656120, 0x656920, 0x656C65, 0x656E74, 0x657374, 0x692061, 0x692063,\n0x692064, 0x692070, 0x696520, 0x696920, 0x696E20, 0x6C6120, 0x6C6520, 0x6C6F72,\n0x6C7569, 0x6E6520, 0x6E7472, 0x6F7220, 0x70656E, 0x726520, 0x726561, 0x727520,\n0x73E320, 0x746520, 0x747275, 0x74E320, 0x756920, 0x756C20, 0xBA6920, 0xEE6E20,\n])\n];\n};\nthis.name = function(det) {\nreturn (det && det.fC1Bytes) ? 'windows-1250' : 'ISO-8859-2';\n};\n}\n};\nclass ISO_8859_5 extends sbcs {\nconstructor () {\nsuper()\nthis.byteMap = function() {\nreturn [\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,\n0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,\n0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,\n0x78, 0x79, 0x7A, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,\n0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,\n0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,\n0x78, 0x79, 0x7A, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7,\n0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0x20, 0xFE, 0xFF,\n0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7,\n0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0xDF,\n0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7,\n0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF,\n0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7,\n0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0xDF,\n0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7,\n0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF,\n0x20, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7,\n0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0x20, 0xFE, 0xFF\n];\n};\nthis.ngrams = function() {\nreturn [\n0x20D220, 0x20D2DE, 0x20D4DE, 0x20D7D0, 0x20D820, 0x20DAD0, 0x20DADE, 0x20DDD0,\n0x20DDD5, 0x20DED1, 0x20DFDE, 0x20DFE0, 0x20E0D0, 0x20E1DE, 0x20E1E2, 0x20E2DE,\n0x20E7E2, 0x20EDE2, 0xD0DDD8, 0xD0E2EC, 0xD3DE20, 0xD5DBEC, 0xD5DDD8, 0xD5E1E2,\n0xD5E220, 0xD820DF, 0xD8D520, 0xD8D820, 0xD8EF20, 0xDBD5DD, 0xDBD820, 0xDBECDD,\n0xDDD020, 0xDDD520, 0xDDD8D5, 0xDDD8EF, 0xDDDE20, 0xDDDED2, 0xDE20D2, 0xDE20DF,\n0xDE20E1, 0xDED220, 0xDED2D0, 0xDED3DE, 0xDED920, 0xDEDBEC, 0xDEDC20, 0xDEE1E2,\n0xDFDEDB, 0xDFE0D5, 0xDFE0D8, 0xDFE0DE, 0xE0D0D2, 0xE0D5D4, 0xE1E2D0, 0xE1E2D2,\n0xE1E2D8, 0xE1EF20, 0xE2D5DB, 0xE2DE20, 0xE2DEE0, 0xE2EC20, 0xE7E2DE, 0xEBE520\n];\n};\nthis.name = function(det) {\nreturn 'ISO-8859-5';\n};\nthis.language = function() {\nreturn 'ru';\n};\n}\n};\nclass ISO_8859_6 extends sbcs {\nconstructor() {\nsuper()\nthis.byteMap = function() {\nreturn [\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,\n0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,\n0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,\n0x78, 0x79, 0x7A, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,\n0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,\n0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,\n0x78, 0x79, 0x7A, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7,\n0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF,\n0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7,\n0xD8, 0xD9, 0xDA, 0x20, 0x20, 0x20, 0x20, 0x20,\n0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7,\n0xE8, 0xE9, 0xEA, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20\n];\n};\nthis.ngrams = function() {\nreturn [\n0x20C7E4, 0x20C7E6, 0x20C8C7, 0x20D9E4, 0x20E1EA, 0x20E4E4, 0x20E5E6, 0x20E8C7,\n0xC720C7, 0xC7C120, 0xC7CA20, 0xC7D120, 0xC7E420, 0xC7E4C3, 0xC7E4C7, 0xC7E4C8,\n0xC7E4CA, 0xC7E4CC, 0xC7E4CD, 0xC7E4CF, 0xC7E4D3, 0xC7E4D9, 0xC7E4E2, 0xC7E4E5,\n0xC7E4E8, 0xC7E4EA, 0xC7E520, 0xC7E620, 0xC7E6CA, 0xC820C7, 0xC920C7, 0xC920E1,\n0xC920E4, 0xC920E5, 0xC920E8, 0xCA20C7, 0xCF20C7, 0xCFC920, 0xD120C7, 0xD1C920,\n0xD320C7, 0xD920C7, 0xD9E4E9, 0xE1EA20, 0xE420C7, 0xE4C920, 0xE4E920, 0xE4EA20,\n0xE520C7, 0xE5C720, 0xE5C920, 0xE5E620, 0xE620C7, 0xE720C7, 0xE7C720, 0xE8C7E4,\n0xE8E620, 0xE920C7, 0xEA20C7, 0xEA20E5, 0xEA20E8, 0xEAC920, 0xEAD120, 0xEAE620\n];\n};\nthis.name = function(det) {\nreturn 'ISO-8859-6';\n};\nthis.language = function() {\nreturn 'ar';\n};\n}\n};\nclass ISO_8859_7 extends sbcs {\nconstructor () {\nsuper()\nthis.byteMap = function() {\nreturn [\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,\n0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,\n0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,\n0x78, 0x79, 0x7A, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,\n0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,\n0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,\n0x78, 0x79, 0x7A, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0xA1, 0xA2, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0xDC, 0x20,\n0xDD, 0xDE, 0xDF, 0x20, 0xFC, 0x20, 0xFD, 0xFE,\n0xC0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7,\n0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF,\n0xF0, 0xF1, 0x20, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7,\n0xF8, 0xF9, 0xFA, 0xFB, 0xDC, 0xDD, 0xDE, 0xDF,\n0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7,\n0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF,\n0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7,\n0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x20\n];\n};\nthis.ngrams = function() {\nreturn [\n0x20E1ED, 0x20E1F0, 0x20E3E9, 0x20E4E9, 0x20E5F0, 0x20E720, 0x20EAE1, 0x20ECE5,\n0x20EDE1, 0x20EF20, 0x20F0E1, 0x20F0EF, 0x20F0F1, 0x20F3F4, 0x20F3F5, 0x20F4E7,\n0x20F4EF, 0xDFE120, 0xE120E1, 0xE120F4, 0xE1E920, 0xE1ED20, 0xE1F0FC, 0xE1F220,\n0xE3E9E1, 0xE5E920, 0xE5F220, 0xE720F4, 0xE7ED20, 0xE7F220, 0xE920F4, 0xE9E120,\n0xE9EADE, 0xE9F220, 0xEAE1E9, 0xEAE1F4, 0xECE520, 0xED20E1, 0xED20E5, 0xED20F0,\n0xEDE120, 0xEFF220, 0xEFF520, 0xF0EFF5, 0xF0F1EF, 0xF0FC20, 0xF220E1, 0xF220E5,\n0xF220EA, 0xF220F0, 0xF220F4, 0xF3E520, 0xF3E720, 0xF3F4EF, 0xF4E120, 0xF4E1E9,\n0xF4E7ED, 0xF4E7F2, 0xF4E9EA, 0xF4EF20, 0xF4EFF5, 0xF4F9ED, 0xF9ED20, 0xFEED20\n];\n};\nthis.name = function(det) {\nreturn (det && det.fC1Bytes) ? 'windows-1253' : 'ISO-8859-7';\n};\nthis.language = function() {\nreturn 'el';\n};\n}\n};\nclass ISO_8859_8 extends sbcs {\nconstructor () {\nsuper()\nthis.byteMap = function() {\nreturn [\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,\n0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,\n0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,\n0x78, 0x79, 0x7A, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,\n0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,\n0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,\n0x78, 0x79, 0x7A, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0xB5, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7,\n0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF,\n0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7,\n0xF8, 0xF9, 0xFA, 0x20, 0x20, 0x20, 0x20, 0x20\n];\n};\nthis.ngrams = function() {\nreturn [\nnew NGramsPlusLang('he', [\n0x20E0E5, 0x20E0E7, 0x20E0E9, 0x20E0FA, 0x20E1E9, 0x20E1EE, 0x20E4E0, 0x20E4E5,\n0x20E4E9, 0x20E4EE, 0x20E4F2, 0x20E4F9, 0x20E4FA, 0x20ECE0, 0x20ECE4, 0x20EEE0,\n0x20F2EC, 0x20F9EC, 0xE0FA20, 0xE420E0, 0xE420E1, 0xE420E4, 0xE420EC, 0xE420EE,\n0xE420F9, 0xE4E5E0, 0xE5E020, 0xE5ED20, 0xE5EF20, 0xE5F820, 0xE5FA20, 0xE920E4,\n0xE9E420, 0xE9E5FA, 0xE9E9ED, 0xE9ED20, 0xE9EF20, 0xE9F820, 0xE9FA20, 0xEC20E0,\n0xEC20E4, 0xECE020, 0xECE420, 0xED20E0, 0xED20E1, 0xED20E4, 0xED20EC, 0xED20EE,\n0xED20F9, 0xEEE420, 0xEF20E4, 0xF0E420, 0xF0E920, 0xF0E9ED, 0xF2EC20, 0xF820E4,\n0xF8E9ED, 0xF9EC20, 0xFA20E0, 0xFA20E1, 0xFA20E4, 0xFA20EC, 0xFA20EE, 0xFA20F9,\n]),\nnew NGramsPlusLang('he', [\n0x20E0E5, 0x20E0EC, 0x20E4E9, 0x20E4EC, 0x20E4EE, 0x20E4F0, 0x20E9F0, 0x20ECF2,\n0x20ECF9, 0x20EDE5, 0x20EDE9, 0x20EFE5, 0x20EFE9, 0x20F8E5, 0x20F8E9, 0x20FAE0,\n0x20FAE5, 0x20FAE9, 0xE020E4, 0xE020EC, 0xE020ED, 0xE020FA, 0xE0E420, 0xE0E5E4,\n0xE0EC20, 0xE0EE20, 0xE120E4, 0xE120ED, 0xE120FA, 0xE420E4, 0xE420E9, 0xE420EC,\n0xE420ED, 0xE420EF, 0xE420F8, 0xE420FA, 0xE4EC20, 0xE5E020, 0xE5E420, 0xE7E020,\n0xE9E020, 0xE9E120, 0xE9E420, 0xEC20E4, 0xEC20ED, 0xEC20FA, 0xECF220, 0xECF920,\n0xEDE9E9, 0xEDE9F0, 0xEDE9F8, 0xEE20E4, 0xEE20ED, 0xEE20FA, 0xEEE120, 0xEEE420,\n0xF2E420, 0xF920E4, 0xF920ED, 0xF920FA, 0xF9E420, 0xFAE020, 0xFAE420, 0xFAE5E9,\n])\n];\n};\nthis.name = function(det) {\nreturn (det && det.fC1Bytes) ? 'windows-1255' : 'ISO-8859-8';\n};\nthis.language = function() {\nreturn 'he';\n}\n}\n}\nclass ISO_8859_9 extends sbcs {\nconstructor () {\nsuper()\nthis.byteMap = function() {\nreturn [\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,\n0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,\n0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,\n0x78, 0x79, 0x7A, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,\n0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,\n0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,\n0x78, 0x79, 0x7A, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0xAA, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0xB5, 0x20, 0x20,\n0x20, 0x20, 0xBA, 0x20, 0x20, 0x20, 0x20, 0x20,\n0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7,\n0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF,\n0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0x20,\n0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0x69, 0xFE, 0xDF,\n0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7,\n0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF,\n0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0x20,\n0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF\n];\n};\nthis.ngrams = function() {\nreturn [\n0x206261, 0x206269, 0x206275, 0x206461, 0x206465, 0x206765, 0x206861, 0x20696C,\n0x206B61, 0x206B6F, 0x206D61, 0x206F6C, 0x207361, 0x207461, 0x207665, 0x207961,\n0x612062, 0x616B20, 0x616C61, 0x616D61, 0x616E20, 0x616EFD, 0x617220, 0x617261,\n0x6172FD, 0x6173FD, 0x617961, 0x626972, 0x646120, 0x646520, 0x646920, 0x652062,\n0x65206B, 0x656469, 0x656E20, 0x657220, 0x657269, 0x657369, 0x696C65, 0x696E20,\n0x696E69, 0x697220, 0x6C616E, 0x6C6172, 0x6C6520, 0x6C6572, 0x6E2061, 0x6E2062,\n0x6E206B, 0x6E6461, 0x6E6465, 0x6E6520, 0x6E6920, 0x6E696E, 0x6EFD20, 0x72696E,\n0x72FD6E, 0x766520, 0x796120, 0x796F72, 0xFD6E20, 0xFD6E64, 0xFD6EFD, 0xFDF0FD\n];\n};\nthis.name = function(det) {\nreturn (det && det.fC1Bytes) ? 'windows-1254' : 'ISO-8859-9';\n};\nthis.language = function() {\nreturn 'tr';\n};\n}\n};\nclass windows_1251 extends sbcs {\nconstructor () {\nsuper()\nthis.byteMap = function() {\nreturn [\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,\n0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,\n0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,\n0x78, 0x79, 0x7A, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,\n0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,\n0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,\n0x78, 0x79, 0x7A, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x90, 0x83, 0x20, 0x83, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x9A, 0x20, 0x9C, 0x9D, 0x9E, 0x9F,\n0x90, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x9A, 0x20, 0x9C, 0x9D, 0x9E, 0x9F,\n0x20, 0xA2, 0xA2, 0xBC, 0x20, 0xB4, 0x20, 0x20,\n0xB8, 0x20, 0xBA, 0x20, 0x20, 0x20, 0x20, 0xBF,\n0x20, 0x20, 0xB3, 0xB3, 0xB4, 0xB5, 0x20, 0x20,\n0xB8, 0x20, 0xBA, 0x20, 0xBC, 0xBE, 0xBE, 0xBF,\n0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7,\n0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF,\n0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7,\n0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF,\n0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7,\n0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF,\n0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7,\n0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF\n];\n};\nthis.ngrams = function() {\nreturn [\n0x20E220, 0x20E2EE, 0x20E4EE, 0x20E7E0, 0x20E820, 0x20EAE0, 0x20EAEE, 0x20EDE0,\n0x20EDE5, 0x20EEE1, 0x20EFEE, 0x20EFF0, 0x20F0E0, 0x20F1EE, 0x20F1F2, 0x20F2EE,\n0x20F7F2, 0x20FDF2, 0xE0EDE8, 0xE0F2FC, 0xE3EE20, 0xE5EBFC, 0xE5EDE8, 0xE5F1F2,\n0xE5F220, 0xE820EF, 0xE8E520, 0xE8E820, 0xE8FF20, 0xEBE5ED, 0xEBE820, 0xEBFCED,\n0xEDE020, 0xEDE520, 0xEDE8E5, 0xEDE8FF, 0xEDEE20, 0xEDEEE2, 0xEE20E2, 0xEE20EF,\n0xEE20F1, 0xEEE220, 0xEEE2E0, 0xEEE3EE, 0xEEE920, 0xEEEBFC, 0xEEEC20, 0xEEF1F2,\n0xEFEEEB, 0xEFF0E5, 0xEFF0E8, 0xEFF0EE, 0xF0E0E2, 0xF0E5E4, 0xF1F2E0, 0xF1F2E2,\n0xF1F2E8, 0xF1FF20, 0xF2E5EB, 0xF2EE20, 0xF2EEF0, 0xF2FC20, 0xF7F2EE, 0xFBF520\n];\n};\nthis.name = function(det) {\nreturn 'windows-1251';\n};\nthis.language = function() {\nreturn 'ru';\n};\n}\n};\nclass windows_1256 extends sbcs {\nconstructor () {\nsuper()\nthis.byteMap = function() {\nreturn [\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,\n0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,\n0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,\n0x78, 0x79, 0x7A, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,\n0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,\n0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,\n0x78, 0x79, 0x7A, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x81, 0x20, 0x83, 0x20, 0x20, 0x20, 0x20,\n0x88, 0x20, 0x8A, 0x20, 0x9C, 0x8D, 0x8E, 0x8F,\n0x90, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x98, 0x20, 0x9A, 0x20, 0x9C, 0x20, 0x20, 0x9F,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0xAA, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0xB5, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7,\n0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF,\n0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0x20,\n0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0xDF,\n0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7,\n0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF,\n0x20, 0x20, 0x20, 0x20, 0xF4, 0x20, 0x20, 0x20,\n0x20, 0xF9, 0x20, 0xFB, 0xFC, 0x20, 0x20, 0xFF\n];\n};\nthis.ngrams = function() {\nreturn [\n0x20C7E1, 0x20C7E4, 0x20C8C7, 0x20DAE1, 0x20DDED, 0x20E1E1, 0x20E3E4, 0x20E6C7,\n0xC720C7, 0xC7C120, 0xC7CA20, 0xC7D120, 0xC7E120, 0xC7E1C3, 0xC7E1C7, 0xC7E1C8,\n0xC7E1CA, 0xC7E1CC, 0xC7E1CD, 0xC7E1CF, 0xC7E1D3, 0xC7E1DA, 0xC7E1DE, 0xC7E1E3,\n0xC7E1E6, 0xC7E1ED, 0xC7E320, 0xC7E420, 0xC7E4CA, 0xC820C7, 0xC920C7, 0xC920DD,\n0xC920E1, 0xC920E3, 0xC920E6, 0xCA20C7, 0xCF20C7, 0xCFC920, 0xD120C7, 0xD1C920,\n0xD320C7, 0xDA20C7, 0xDAE1EC, 0xDDED20, 0xE120C7, 0xE1C920, 0xE1EC20, 0xE1ED20,\n0xE320C7, 0xE3C720, 0xE3C920, 0xE3E420, 0xE420C7, 0xE520C7, 0xE5C720, 0xE6C7E1,\n0xE6E420, 0xEC20C7, 0xED20C7, 0xED20E3, 0xED20E6, 0xEDC920, 0xEDD120, 0xEDE420\n];\n};\nthis.name = function(det) {\nreturn 'windows-1256';\n};\nthis.language = function() {\nreturn 'ar';\n};\n}\n};\nclass KOI8_R extends sbcs {\nconstructor () {\nsuper()\nthis.byteMap = function() {\nreturn [\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,\n0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,\n0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,\n0x78, 0x79, 0x7A, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,\n0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,\n0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,\n0x78, 0x79, 0x7A, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0xA3, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0xA3, 0x20, 0x20, 0x20, 0x20,\n0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,\n0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7,\n0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF,\n0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7,\n0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0xDF,\n0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7,\n0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF,\n0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7,\n0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0xDF\n];\n};\nthis.ngrams = function() {\nreturn [\n0x20C4CF, 0x20C920, 0x20CBC1, 0x20CBCF, 0x20CEC1, 0x20CEC5, 0x20CFC2, 0x20D0CF,\n0x20D0D2, 0x20D2C1, 0x20D3CF, 0x20D3D4, 0x20D4CF, 0x20D720, 0x20D7CF, 0x20DAC1,\n0x20DCD4, 0x20DED4, 0xC1CEC9, 0xC1D4D8, 0xC5CCD8, 0xC5CEC9, 0xC5D3D4, 0xC5D420,\n0xC7CF20, 0xC920D0, 0xC9C520, 0xC9C920, 0xC9D120, 0xCCC5CE, 0xCCC920, 0xCCD8CE,\n0xCEC120, 0xCEC520, 0xCEC9C5, 0xCEC9D1, 0xCECF20, 0xCECFD7, 0xCF20D0, 0xCF20D3,\n0xCF20D7, 0xCFC7CF, 0xCFCA20, 0xCFCCD8, 0xCFCD20, 0xCFD3D4, 0xCFD720, 0xCFD7C1,\n0xD0CFCC, 0xD0D2C5, 0xD0D2C9, 0xD0D2CF, 0xD2C1D7, 0xD2C5C4, 0xD3D120, 0xD3D4C1,\n0xD3D4C9, 0xD3D4D7, 0xD4C5CC, 0xD4CF20, 0xD4CFD2, 0xD4D820, 0xD9C820, 0xDED4CF\n];\n};\nthis.name = function(det) {\nreturn 'KOI8-R';\n};\nthis.language = function() {\nreturn 'ru';\n};\n}\n};\n'use strict';\nclass UTF_16BE {\nname () {\nreturn 'UTF-16BE';\n}\nmatch (det) {\nvar input = det.fRawInput;\nif (input.length >= 2 && ((input[0] & 0xff) == 0xfe && (input[1] & 0xff) == 0xff)) {\nreturn new Match(det, this, 100);\n}\nreturn null;\n}\n}\nclass UTF_16LE {\nname () {\nreturn 'UTF-16LE';\n}\nmatch (det) {\nvar input = det.fRawInput;\nif (input.length >= 2 && ((input[0] & 0xff) == 0xff && (input[1] & 0xff) == 0xfe)) {\nif (input.length >= 4 && input[2] == 0x00 && input[3] == 0x00) {\nreturn null;\n}\nreturn new Match(det, this, 100);\n}\nreturn null;\n}\n}\nclass UTF_32 {\nmatch (det) {\nvar input      = det.fRawInput,\nlimit      = (det.fRawLength / 4) * 4,\nnumValid   = 0,\nnumInvalid = 0,\nhasBOM     = false,\nconfidence = 0;\nif (limit == 0) {\nreturn null;\n}\nif (this.getChar(input, 0) == 0x0000FEFF) {\nhasBOM = true;\n}\nfor (var i = 0; i < limit; i += 4) {\nvar ch = this.getChar(input, i);\nif (ch < 0 || ch >= 0x10FFFF || (ch >= 0xD800 && ch <= 0xDFFF)) {\nnumInvalid += 1;\n} else {\nnumValid += 1;\n}\n}\nif (hasBOM && numInvalid == 0) {\nconfidence = 100;\n} else if (hasBOM && numValid > numInvalid * 10) {\nconfidence = 80;\n} else if (numValid > 3 && numInvalid == 0) {\nconfidence = 100;\n} else if (numValid > 0 && numInvalid == 0) {\nconfidence = 80;\n} else if (numValid > numInvalid * 10) {\nconfidence = 25;\n}\nreturn confidence == 0 ? null : new Match(det, this, confidence);\n}\n}\nclass UTF_32BE extends UTF_32 {\nconstructor () {\nsuper()\nthis.name = function() {\nreturn 'UTF-32BE';\n};\nthis.getChar = function(input, index) {\nreturn (input[index + 0] & 0xff) << 24 | (input[index + 1] & 0xff) << 16 |\n(input[index + 2] & 0xff) <<  8 | (input[index + 3] & 0xff);\n};\n}\n};\nclass UTF_32LE extends UTF_32 {\nconstructor () {\nsuper()\nthis.name = function() {\nreturn 'UTF-32LE';\n};\nthis.getChar = function(input, index) {\nreturn (input[index + 3] & 0xff) << 24 | (input[index + 2] & 0xff) << 16 |\n(input[index + 1] & 0xff) <<  8 | (input[index + 0] & 0xff);\n};\n}\n};\nclass UTF_8 {\nname () {\nreturn 'UTF-8';\n}\nmatch (det) {\nvar hasBOM = false,\nnumValid = 0,\nnumInvalid = 0,\ninput = det.fRawInput,\ntrailBytes = 0,\nconfidence;\nif (det.fRawLength >= 3 &&\n(input[0] & 0xff) == 0xef && (input[1] & 0xff) == 0xbb && (input[2] & 0xff) == 0xbf) {\nhasBOM = true;\n}\nfor (var i = 0; i < det.fRawLength; i++) {\nvar b = input[i];\nif ((b & 0x80) == 0)\ncontinue;\nif ((b & 0x0e0) == 0x0c0) {\ntrailBytes = 1;\n} else if ((b & 0x0f0) == 0x0e0) {\ntrailBytes = 2;\n} else if ((b & 0x0f8) == 0xf0) {\ntrailBytes = 3;\n} else {\nnumInvalid++;\nif (numInvalid > 5)\nbreak;\ntrailBytes = 0;\n}\nfor (;;) {\ni++;\nif (i >= det.fRawLength)\nbreak;\nif ((input[i] & 0xc0) != 0x080) {\nnumInvalid++;\nbreak;\n}\nif (--trailBytes == 0) {\nnumValid++;\nbreak;\n}\n}\n}\nconfidence = 0;\nif (hasBOM && numInvalid == 0)\nconfidence = 100;\nelse if (hasBOM && numValid > numInvalid * 10)\nconfidence = 80;\nelse if (numValid > 3 && numInvalid == 0)\nconfidence = 100;\nelse if (numValid > 0 && numInvalid == 0)\nconfidence = 80;\nelse if (numValid == 0 && numInvalid == 0)\nconfidence = 10;\nelse if (numValid > numInvalid * 10)\nconfidence = 25;\nelse\nreturn null\nreturn new Match(det, this, confidence);\n}\n}\nvar fs = ( () => {\nvar io = require( 'io' )\nvar readFileSync = ( path ) => {\nvar byte = io.ReadBinaryFile( path )\nconst Buffer = require( 'buffer' )\nreturn new Buffer( byte )\n}\nreturn { readFileSync }\n} )()\nvar recognisers = [\nnew UTF_8,\nnew UTF_16BE,\nnew UTF_16LE,\nnew UTF_32BE,\nnew UTF_32LE,\nnew sjis,\nnew big5,\nnew euc_jp,\nnew euc_kr,\nnew gb_18030,\nnew ISO_2022_JP,\nnew ISO_2022_KR,\nnew ISO_2022_CN,\nnew ISO_8859_1,\nnew ISO_8859_2,\nnew ISO_8859_5,\nnew ISO_8859_6,\nnew ISO_8859_7,\nnew ISO_8859_8,\nnew ISO_8859_9,\nnew windows_1251,\nnew windows_1256,\nnew KOI8_R\n];\nfunction detect (buffer, opts) {\nvar fByteStats = [];\nfor (var i = 0; i < 256; i++)\nfByteStats[i] = 0;\nfor (var i = buffer.length - 1; i >= 0; i--)\nfByteStats[buffer[i] & 0x00ff]++;\nvar fC1Bytes = false;\nfor (var i = 0x80; i <= 0x9F; i += 1) {\nif (fByteStats[i] != 0) {\nfC1Bytes = true;\nbreak;\n}\n}\nvar context = {\nfByteStats:  fByteStats,\nfC1Bytes:    fC1Bytes,\nfRawInput:   buffer,\nfRawLength:  buffer.length,\nfInputBytes: buffer,\nfInputLen:   buffer.length\n};\nvar matches = recognisers.map(function(rec) {\nreturn rec.match(context);\n}).filter(function(match) {\nreturn !!match;\n}).sort(function(a, b) {\nreturn b.confidence - a.confidence;\n});\nif (opts && opts.returnAllMatches === true) {\nreturn matches;\n}\nelse {\nreturn matches.length > 0 ? matches[0].name : null;\n}\n};\nfunction detectFile (filepath, opts, cb) {\nif (typeof opts === 'function') {\ncb = opts;\nopts = undefined;\n}\nvar fd;\nvar handler = function(err, buffer) {\nif (fd) {\nfs.closeSync(fd);\n}\nif (err) return cb(err, null);\ncb(null, detect(buffer, opts));\n};\nif (opts && opts.sampleSize) {\nfd = fs.openSync(filepath, 'r'),\nsample = Buffer.allocUnsafe(opts.sampleSize);\nfs.read(fd, sample, 0, opts.sampleSize, null, function(err) {\nhandler(err, sample);\n});\nreturn;\n}\nfs.readFile(filepath, handler);\n};\nfunction detectFileSync (filepath, opts) {\nif (opts && opts.sampleSize) {\nvar fd = fs.openSync(filepath, 'r'),\nsample = Buffer.allocUnsafe(opts.sampleSize);\nfs.readSync(fd, sample, 0, opts.sampleSize);\nfs.closeSync(fd);\nreturn detect(sample, opts);\n}\nreturn detect(fs.readFileSync(filepath), opts);\n};\nfunction detectAll (buffer, opts) {\nif (typeof opts !== 'object') {\nopts = {};\n}\nopts.returnAllMatches = true;\nreturn detect(buffer, opts);\n}\nfunction detectFileAll (filepath, opts, cb) {\nif (typeof opts === 'function') {\ncb = opts;\nopts = undefined;\n}\nif (typeof opts !== 'object') {\nopts = {};\n}\nopts.returnAllMatches = true;\ndetectFile(filepath, opts, cb);\n}\nfunction detectFileAllSync (filepath, opts) {\nif (typeof opts !== 'object') {\nopts = {};\n}\nopts.returnAllMatches = true;\nreturn detectFileSync(filepath, opts);\n}\nmodule.exports = { detectFileSync }\n",
        "mapping": {},
        "name": "wes/chardet"
    },
    "day": {
        "source": "class Day extends Date {\n[Symbol.toPrimitive] ( hint ) {\nif ( hint === 'number' ) return this.getTime()\nelse {\nlet year = this.getFullYear()\nlet month = ( \"0\" + ( this.getMonth() + 1 ) ).slice( -2 )\nlet date = ( \"0\" + ( this.getDate() ) ).slice( -2 )\nlet hours = ( \"0\" + ( this.getHours() ) ).slice( -2 )\nlet minutes = ( \"0\" + ( this.getMinutes() ) ).slice( -2 )\nlet seconds = ( \"0\" + ( this.getSeconds() ) ).slice( -2 )\nlet milliseconds = ( \"00\" + ( this.getMilliseconds() ) ).slice( -3 )\nreturn `${ year }/${ month }/${ date } ${ hours }:${ minutes }:${ seconds }.${ milliseconds }`\n}\n}\n}\nmodule.exports = Day",
        "mapping": {},
        "name": "wes/day"
    },
    "debug": {
        "source": "const { named } = require( 'argv' )\nconst dump = require( 'dump' )\nconst debug = ( expression ) => {\nif ( 'debug' in named ) {\nconsole.log( `debug( ${ dump( expression ) } )` )\n}\nreturn expression\n}\nmodule.exports = debug",
        "mapping": {},
        "name": "wes/debug"
    },
    "dump": {
        "source": "const dump = ( variable, color = true ) => {\nlet {\nbrightBlue: number,\nbrightCyan: func,\nbrightYellow: string,\nbrightGreen: date,\nbrightRed: circle,\nyellow: regexp,\ngray: nul,\nsilver: uint8array,\nclear\n} = color ? console.ansi : {\nbrightBlue: '',\nbrightCyan: '',\nbrightYellow: '',\nbrightGreen: '',\nbrightRed: '',\nbrightMagenta: '',\ngray: '',\nsilver: '',\nclear: ''\n}\nconst Day = require( 'day' )\nconst { LF, NONE, unindent } = require( 'text' )\nconst TAB = '    '\nlet level = 0\nlet Circle = new Map\nconst print = ( target, key ) => {\nif ( typeof target === 'function' ) return fn( target ) + clear\nif ( typeof target === 'string' ) return str( target )\nif ( typeof target === 'number' ) return number + target + clear\nif ( target instanceof RegExp ) return regexp + target.toString() + clear\nif ( target instanceof Date ) return date + `new Date( '${ new Day( target ) }' )` + clear\nif ( target instanceof Uint8Array ) {\nlet res = []\ntarget.forEach( v => res.push( ( '00' + v.toString( 16 ) ).slice( -2 ) ) )\nreturn uint8array + '<Buffer ' + res.join( ' ' ) + ' >'\n}\nif ( target == null ) return nul + target + clear\nif ( Array.isArray( target ) ) {\nif ( Circle.has( target ) ) {\nlet res = circle + '<Circle::' +  Circle.get( target ) + '>' + clear\nreturn res\n}\nkey = key == null ? 'this' : key\nCircle.set( target, key )\nreturn arr( target, key )\n}\nif ( Object.prototype.toString.call( target ) === '[object Object]' ) {\nif ( Circle.has( target ) ) {\nlet res = circle + '<Circle::' + Circle.get( target ) + '>' + clear\nreturn res\n}\nkey = key == null ? 'this' : key\nCircle.set( target, key )\nreturn obj( target, key )\n}\n}\nconst fn = ( code ) => {\nlet source = unindent( code.toString() ).split( LF )\n.map( ( v, i ) => i === 0 ? v : TAB.repeat( level ) + v )\n.join( LF )\nreturn func + source + clear\n}\nconst str = ( text ) => {\nif ( color ) return string + `\\`${ text.replace( /`/g, '\\\\`' ) }\\`` + clear\nreturn string + `\"${ text.replace( /\\n/g, '\\\\n' ).replace( /\"/g, '\\\\\"' ) }\"` + clear\n}\nconst arr = ( list, key ) => {\nlevel++\nlet res = list.map( ( v, i ) => {\nlet r = TAB.repeat( level ) + print( v, key + `[${ i }]` )\nreturn r\n} )\nlevel--\nlet result =  0 < res.length ? LF + res.join( ',' + LF  ) + LF + TAB.repeat( level ) : NONE\nreturn '[' + result + ']'\n}\nconst obj = ( keys, key ) => {\nconst list = Object.keys( keys )\nlevel++\nlet res = list.map( v => {\nlet r = TAB.repeat( level ) + v + ': ' + print( keys[v], key + `[\"${ v }\"]` )\nreturn r\n} )\nlevel--\nlet result = res.length ? LF + res.join( ',' + LF  ) + LF  + TAB.repeat( level ) : NONE\nreturn '{' + result + '}'\n}\nreturn print( variable )\n}\nmodule.exports = dump\n",
        "mapping": {},
        "name": "wes/dump"
    },
    "enumerator": {
        "source": "const { JScript } = require('sc')\nconst { TypeName } = require('VBScript')\nJScript.AddCode(`\nfunction enumerator ( collection ) {\nreturn new Enumerator( collection )\n}`)\nconst toArray = ( col ) => {\nlet res = []\nlet Enum = JScript.Run( 'enumerator', col )\nfor (; !Enum.atEnd(); Enum.moveNext()) {\nres.push( Enum.item() )\n}\nEnum.moveFirst()\nreturn res\n}\nconst Enumerator = new Proxy( () => {},{\nconstruct( target, args ) {\nconst res = []\nconst e = JScript.Run( 'enumerator', args[0] )\nfor ( ; !e.atEnd(); e.moveNext() ) {\nres.push( e.item() )\n}\nreturn res\n}\n} )\nclass Enumerators extends Array {\nconstructor( collection ) {\nlet res = []\nif (TypeName( collection ) === 'Long') {\nres = collection\n} else {\nres = toArray( collection )\n}\nsuper( ...res )\nlet i = 0\nObject.defineProperties( this, {\nmoveNext: { value() { i++ } },\natEnd: { value() { return !( i < this.length ) } },\nmoveFirst: { value() { return ( i = 0 ) } },\nitem: { value(num) { return num != null ? this[ num ] : this[ i ] } }\n} )\n}\nmap( callback ) {\nvar T, A, k\nif ( this == null ) {\nthrow new TypeError( 'this is null or not defined' )\n}\nvar O = Object( this )\nvar len = O.length >>> 0\nif ( typeof callback !== 'function' ) {\nthrow new TypeError(callback + ' is not a function' )\n}\nif ( arguments.length > 1) {\nT = arguments[1]\n}\nA = new Array(len)\nk = 0\nwhile (k < len) {\nvar kValue, mappedValue\nif ( k in O ) {\nkValue = O[k]\nmappedValue = callback.call(T, kValue, k, O)\nA[k] = mappedValue\n}\nk++\n}\nreturn A\n}\nfilter( func, thisArg ) {\n'use strict'\nif (\n!(\n( typeof func === 'Function' || typeof func === 'function' ) &&\nthis\n)\n)\nthrow new TypeError()\nvar len = this.length >>> 0,\nres = new Array( len ),\nt = this,\nc = 0,\ni = -1\nif ( thisArg === undefined ) {\nwhile ( ++i !== len ) {\nif (i in this) {\nif ( func( t[ i ], i, t ) ) {\nres[ c++ ] = t[ i ]\n}\n}\n}\n} else {\nwhile ( ++i !== len ) {\nif ( i in this ) {\nif ( func.call( thisArg, t[ i ], i, t ) ) {\nres[ c++ ] = t[ i ]\n}\n}\n}\n}\nres.length = c\nreturn res\n}\n}\nEnumerator.Enumerator = Enumerators\nmodule.exports = Enumerator",
        "mapping": {},
        "name": "wes/enumerator"
    },
    "event": {
        "source": "class Event {\nconstructor() {\nthis.state = {}\n}\non(handler, fn) {\nlet state = this.state\nif (state[handler] == null) state[handler] = [fn]\nelse state[handler].push(fn)\nreturn fn\n}\nemit(handler, ...args) {\nlet state = this.state\nif (state[handler] == null) console.log(`handler: ${handler} not State`)\nelse state[handler].forEach((v) => v(...args))\n}\noff(handler, fn) {\nlet state = this.state\nif (state[handler] == null) console.log(`handler: ${handler} not State`)\nelse if (fn == null) state[handler] = null\nelse state[handler] = state[handler].filter((v) => v !== fn)\n}\nonce(handler, fn) {\nlet state = this.state\nconst _once = (...args) => {\nfn(...args)\nthis.off(handler, _once)\n}\nif (state[handler] == null) state[handler] = [_once]\nelse state[handler].push(_once)\nreturn _once\n}\n}\nmodule.exports = Event",
        "mapping": {},
        "name": "wes/event"
    },
    "filesystem": {
        "source": "const ADODB = require('ADODB.Stream')\nconst chardet = require( 'chardet' )\nconst Buffer = require( 'buffer' )\nconst log = require( 'log' )\nconst { Type } = require( 'VBScript' )\nconst VB_STRING = 'vbString'\nconst VB_BYTE = 'vbByte[]'\nconst AD_TYPE_BINARY = 1\nconst AD_TYPE_TEXT = 2\nconst AD_SAVE_CREAE_OVER_WRITE = 2\nconst SHIFT_JIS = 'Shift-JIS'\nconst UTF_8 = 'UTF-8'\nconst UTF_8BOM = 'UTF-8BOM'\nconst UTF_8N = 'UTF-8N'\nconst readFileSync = ( filespec, options ) => {\nif ( options == null ) return new Buffer( readByteFile( filespec ) )\nreturn readTextFileSync( filespec, options )\n}\nconst readTextFileSync = ( filespec, options ) => {\nlet encoding = options != null ? options : chardet.detectFileSync( filespec )\nlet byte = readByteFile( filespec )\nlet buffer = new Buffer( byte )\nif ( encoding.toUpperCase() === UTF_8 && \nbuffer[0] === 0xef && buffer[1] === 0xfb && buffer[2] === 0xbb ) {\nbuffer = splitUtf8Bom( byte )\n}\nreturn Byte2Text( byte, encoding )\n}\nconst writeFileSync = ( filespec, data, options ) => {\nif ( options == null ) {\nlet bytes\nif ( deta instanceof Buffer ) {\nlet hex = Buffer.toHex( data )\nbytes = Hex2Byte( hex )\n} else if ( Type( data ) === VB_BYTE ) {\nbytes = data\n} else if ( typeof data === 'string' ) {\nreturn writeTextFileSync( filespec, data )\n} else throw new Error( 'error writeFileSync: data must be an Buffer or vbByte[] or string' )\nADODB.Open()\nADODB.Type = AD_TYPE_BINARY\nADODB.Write( bytes )\nADODB.SaveToFile( filespec, AD_SAVE_CREAE_OVER_WRITE )\nADODB.Close()\n}\nreturn writeTextFileSync( filespec, data, options )\n}\nconst writeTextFileSync = ( filespec, text, enc ) => {\nlet spliBbom = false\ntry {\nADODB.Open()\nADODB.Position = 0\nADODB.SetEOS()\nADODB.Type = AD_TYPE_TEXT\nif ( enc != null ) {\nconst _enc = enc.toUpperCase()\nif ( _enc.startsWith( UTF_8 ) ) ADODB.CharSet = UTF8\nelse ADODB.CharSet = enc\nif ( _enc === UTF_8BOM ) bom = false\nelse if ( _enc === UTF_8N ) bom = true\nelse bom = false\n}\nADODB.WriteText( text )\nif ( spliBbom ) {\nADODB.Position = 0\nADODB.Type = AD_TYPE_BINARY\nADODB.Position = 3\nlet bytes = ADODB.Read()\nADODB.Position = 0\nADODB.SetEOS()\nADODB.Write( bytes )\n}\nADODB.SaveToFile( filespec, AD_SAVE_CREAE_OVER_WRITE )\n} catch ( error ) {\nreturn console.log( `failed to writing '${ filespec }'\\n${ error }`)\n} finally {\nADODB.Close()\n}\nreturn `succeeded in writing '${ filespec }'`\n}\n// util\nconst readByteFile = ( path ) => {\nlet byte = ''\ntry {\nADODB.Type = AD_TYPE_BINARY\nADODB.Open()\nADODB.LoadFromFile( path )\nbyte = ADODB.Read()\n} catch ( error ) {\nconsole.log( `error readByteFile ${ error } ${ path }` )\n} finally {\nADODB.Close()\n}\nreturn byte\n}\nconst Byte2Hex = ( byte ) => {\nlet elm = require('Msxml2.DOMDocument').createElement('elm')\nelm.dataType = 'bin.hex'\nelm.nodeTypedValue = byte\nreturn elm.text\n}\nconst Hex2Byte = ( hex ) => {\nlet elm = require('Msxml2.DOMDocument').createElement('elm')\nelm.dataType = 'bin.hex'\nelm.text = hex\nreturn elm.nodeTypedValue\n}\nconst splitUtf8Bom = ( byte ) => {\nreturn Hex2Byte( Byte2Hex( byte ).replace(/^efbbbf/, '') )\n}\nconst Byte2Text = ( byte, enc ) => {\ntry {\nADODB.Open()\nADODB.Type = AD_TYPE_BINARY\nADODB.Write( byte )\nADODB.Position = 0\nADODB.Type = AD_TYPE_TEXT\nADODB.Charset = enc\nreturn ADODB.ReadText()\n} catch (error) {\nconsole.log( `error Byte2Text ${ error }` )\n} finally {\nADODB.Close()\n}\n}\nmodule.exports = {\nreadFileSync,\nreadTextFileSync,\nwriteFileSync,\nwriteTextFileSync,\nreadByteFile\n}",
        "mapping": {},
        "name": "wes/filesystem"
    },
    "io": {
        "source": "const UTF8Encoding = require('System.Text.UTF8Encoding')\nconst ADODB = require('ADODB.Stream')\nconst DOMDocument = require('Msxml2.DOMDocument')\nconst SHIFT_JIS = 'Shift-JIS'\nconst UTF_8 = 'UTF-8'\nconst UTF_8BOM = 'UTF-8BOM'\nconst UTF_8N = 'UTF-8N'\nconst AD_TYPE_BINARY = 1\nconst AD_TYPE_TEXT = 2\nconst AD_SAVE_CREAE_OVER_WRITE = 2\nconst binary2UTF8 = ( binary ) => {\nreturn UTF8Encoding.GetString( binary )\n}\nconst binary2SJIS = ( binary ) => {\nlet source = ''\ntry {\nADODB.Open()\nADODB.Type = AD_TYPE_BINARY\nADODB.Write(binary)\nADODB.Position = 0\nADODB.Type = AD_TYPE_TEXT\nADODB.Charset = SHIFT_JIS\nsource = ADODB.ReadText()\n} catch (error) {\nconsole.log( `error binary2SJIS ${ error }` )\n} finally {\nADODB.Close()\n}\nreturn source\n}\nconst binary2Hex = ( binary ) => {\nlet hex = require('Msxml2.DOMDocument').createElement('hex')\nhex.dataType = 'bin.hex'\nhex.nodeTypedValue = binary\nreturn hex.text\n}\nconst Hex2binary = ( text ) => {\nlet hex = require('Msxml2.DOMDocument').createElement('hex')\nhex.dataType = 'bin.hex'\nhex.text = text\nreturn hex.nodeTypedValue\n}\nconst UTF82bynary = ( text ) => require( 'System.Text.UTF8Encoding' ).GetBytes_4( text )\nconst SJIS2binary = ( text ) => {\nconst stream = require( 'ADODB.Stream' )\nstream.Open()\nstream.Type = AD_TYPE_TEXT\nstream.Charset = SHIFT_JIS\nstream.WriteText( text )\nstream.Position = 0\nstream.Type = AD_TYPE_BINARY\nconst res = stream.Read()\nstream.Close()\nreturn res\n}\nconst ReadBinaryFile = ( path ) => {\nlet source = ''\ntry {\nADODB.Type = AD_TYPE_BINARY\nADODB.Open()\nADODB.LoadFromFile( path )\nsource = ADODB.Read()\n} catch ( error ) {\nconsole.log( `error ReadBinaryFile ${ error } ${ path }` )\n} finally {\nADODB.Close()\n}\nreturn source\n}\nconst autoGuessEncode = ( binary ) => {\nlet hex = binary2Hex( binary )\nif ( /^efbbbf.+/.test(hex) ) return UTF_8BOM\nlet hexes = []\nfor ( let i = 0; i < hex.length; i++ ) {\nhexes.push( Number( `0x${ hex[i] }${ hex[i + 1] }` ) )\ni++\n}\nlet len = hexes.length\nif ( len < 2 ) return UTF_8N\nlet sjis = 0\nlet utf8 = 0\nfor ( let i = 0; i < len - 2; i++ ) {\nconst hex1 = hexes[i]\nconst hex2 = hexes[i + 1]\nconst hex3 = hexes[i + 2]\nif (\n( ( 0x81 <= hex1 && hex1 <= 0x9f ) || ( 0xe0 <= hex1 && hex1 <= 0xfc ) ) &&\n( (0x40 <= hex2 && hex2 <= 0x7e ) || ( 0x80 <= hex2 && hex2 <= 0xfc ) )\n) sjis += 2\nif (0xc0 <= hex1 && hex1 <= 0xdf && (0x80 <= hex2 && hex2 <= 0xbf)) utf8 += 2\nelse if (\n0xe0 <= hex1 &&\nhex1 <= 0xef &&\n(0x80 <= hex2 && hex2 <= 0xbf) &&\n(0x80 <= hex3 && hex3 <= 0xbf)\n) {\nutf8 += 3\ni += 2\n}\ni++\n}\nreturn sjis > utf8 ? SHIFT_JIS : UTF_8N\n}\nconst read = ( filespec, enc ) => {\nlet binary = ReadBinaryFile( filespec )\nlet encode = enc || autoGuessEncode( binary )\nif (encode.toLowerCase() === SHIFT_JIS.toLowerCase()) return binary2SJIS( binary )\nif (encode.toLowerCase() === UTF_8BOM.toLowerCase() || encode.toLowerCase() === UTF_8.toLowerCase() ) {\nreturn binary2UTF8( Hex2binary( binary2Hex( binary ).replace(/^efbbbf/, '') ) )\n}\nreturn binary2UTF8(binary)\n}\nconst write = ( filespec, text, enc ) => {\nconst ADODB = require('ADODB.Stream')\ntry {\nADODB.Type = AD_TYPE_TEXT\nif ( enc == null ) ADODB.CharSet = enc = SHIFT_JIS\nelse if ( enc.toLowerCase() === UTF_8N.toLowerCase() ) ADODB.CharSet = UTF_8\nelse ADODB.CharSet = enc\nADODB.Open()\nADODB.WriteText( text )\nif ( enc.toLowerCase() === UTF_8N.toLowerCase() ) {\nADODB.Position = 0\nADODB.Type = AD_TYPE_BINARY\nADODB.Position = 3\nlet bytes = ADODB.Read()\nADODB.Position = 0\nADODB.SetEOS()\nADODB.Write( bytes )\n}\nADODB.SaveToFile( filespec, AD_SAVE_CREAE_OVER_WRITE )\n} catch ( error ) {\nreturn console.log( `failed to writing '${ filespec }'\\n${ error }`)\n} finally {\nADODB.Close()\n}\nreturn `succeeded in writing '${ filespec }'`\n}\nconst win32Sep = '\\\\'\nconst posixSep = '/'\nconst split = ( path ) => toPosixSep( path ).split( posixSep )\nconst toWin32Sep = ( path ) => path.split( posixSep ).join( win32Sep )\nconst toPosixSep = ( path ) => path.split( win32Sep ).join( posixSep )\nconst absolute = ( path ) => toPosixSep( FSO.GetAbsolutePathName( toWin32Sep( path ) ) )\nconst join = ( ...paths ) => absolute( toWin32Sep( paths.reduce( ( acc, curr ) => `${ acc }${ win32Sep }${ curr }` ) ) )\nconst dirname = ( path ) => absolute( FSO.GetParentFolderName( toWin32Sep( path ) ) )\nconst fileExists = ( path ) => FSO.FileExists( toWin32Sep( path ) )\nmodule.exports = {\nreadFileSync: read,\nwriteFileSync: write,\nautoGuessEncode,\nwin32Sep,\nposixSep,\ntoWin32Sep,\ntoPosixSep,\nabsolute,\nsplit,\njoin,\ndirname,\nfileExists,\nReadBinaryFile,\nbinary2UTF8,\nbinary2SJIS,\nbinary2Hex,\nHex2binary,\nUTF82bynary,\nSJIS2binary\n}\n",
        "mapping": {},
        "name": "wes/io"
    },
    "JScript": {
        "source": "const { JScript } = require('sc')\nconst { TypeName } = require('VBScript')\nJScript.AddCode(`\nfunction enumerator ( collection ) {\nreturn new Enumerator( collection )\n}`)\nconst toArray = ( col ) => {\nlet res = []\nlet Enum = JScript.Run( 'enumerator', col )\nfor (; !Enum.atEnd(); Enum.moveNext()) {\nres.push( Enum.item() )\n}\nEnum.moveFirst()\nreturn res\n}\nclass Enumerator {\nconstructor( collection ) {\nlet res = []\nif (TypeName( collection ) === 'Long') {\nres = collection\n} else {\nres = toArray( collection )\n}\nreturn res\n}\n}\nmodule.exports = {\nEnumerator\n}",
        "mapping": {},
        "name": "wes/JScript"
    },
    "log": {
        "source": "const dump = require( 'dump' )\nconst { unindent } = require( 'text' )\nconst { green, clear } = console.ansi\nconst log = ( code ) => {\nlet res = dump( code() )\nconsole.log( 'log( ' + dump( code ) + ' )' + green + ' // => ' + clear + res )\n}\nmodule.exports = log",
        "mapping": {},
        "name": "wes/log"
    },
    "msxml": {
        "source": "const msxmlId = [\n'MSXML2.DOMDocument.6.0',\n'MSXML2.DOMDocument.3.0',\n'Msxml2.DOMDocument',\n'Msxml.DOMDocument',\n'Microsoft.XMLDOM'\n]\nlet MSXML = null\nfor ( let i = 0; i < msxmlId.length; i++ ) {\ntry {\nMSXML = WScript.CreateObject( msxmlId[ i ] )\nbreak\n} catch ( e ) {\ncontinue\n}\n}\nif ( MSXML == null ) WScript.CreateObject( msxmlId[ 0 ] )\nconsole.debug( `${ console.ansi.gray }Get ${ require( 'VBScript' ).TypeName( MSXML ) }`)\nmodule.exports = MSXML\n",
        "mapping": {},
        "name": "wes/msxml"
    },
    "pathname": {
        "source": "const win32Sep = '\\\\'\nconst posixSep = '/'\nconst split = ( path ) => toPosixSep( path ).split( posixSep )\nconst toWin32Sep = ( path ) => path.split( posixSep ).join( win32Sep )\nconst toPosixSep = ( path ) => path.split( win32Sep ).join( posixSep )\nconst absolute = ( path ) => toPosixSep( FSO.GetAbsolutePathName( toWin32Sep( path ) ) )\nconst join = ( ...paths ) => absolute( toWin32Sep( paths.reduce( ( acc, curr ) => `${ acc }${ win32Sep }${ curr }` ) ) )\nconst dirname = ( path ) => absolute( FSO.GetParentFolderName( toWin32Sep( path ) ) )\nconst extname = ( path ) => {\nlet temp = split( path )\nlet res = temp[ temp.length - 1 ].split( '.' )\nif ( res.length > 1 ) return '.' + res[ res.length - 1 ]\nreturn '' \n}\nconst relative = ( from, to ) => {\nlet _from = split( absolute( from ) )\nlet _to = split( absolute( to ) )\nif ( _from[0] !== _to[0] ) return toPosixSep( to )\nwhile ( _from[0] === _to[0] ) {\n_from.shift()\n_to.shift()\n}\n_from = _from.fill( '..' )\nreturn _from.concat( _to ).join( posixSep )\n}\nconst basename = ( path, ext ) => {\nconst temp = split( path )\nconst res = temp[ temp.length - 1 ]\nif ( ext != null && ext[0] === '.' && res.slice( -ext.length ) === ext) {\nreturn res.slice( 0, res.length - ext.length )\n} else {\nreturn res\n}\n}\nconst normalize = ( path ) => {\nlet temp = split( toPosixSep( path ).replace( /\\/+/g, posixSep ) )\nlet res = []\nlet parent = 0\nfor ( let i = temp.length - 1; i > -1 ; i-- ) {\nlet item = temp[i]\nif ( item === '.' ) continue\nelse if ( item === '..' ) parent++\nelse if ( parent ) parent--\nelse res.unshift( item )\n}\nif ( parent > 0 ) res.unshift( ( new Array( parent ) ).fill( '..' ) )\nif ( /^[a-z]:$/.test( res[0] ) ) res[0] = res[0].toUpperCase()\nreturn res.join( posixSep )\n}\nconst isAbsolute = ( path ) => absolute( path ) === normalize( path )\nmodule.exports = {\nwin32Sep,\nposixSep,\nsplit,\ntoWin32Sep,\ntoPosixSep,\nabsolute,\njoin,\ndirname,\nextname,\nrelative,\nbasename,\nnormalize,\nisAbsolute\n}\n",
        "mapping": {},
        "name": "wes/pathname"
    },
    "pipe": {
        "source": "const { named } = require( 'argv' )\nconst dump = require( 'dump' )\nclass Pipe {\nconstructor(){\nlet reslut = ( value ) => {\nconst val = value instanceof Pipe ? value.dist() : value\nconst _pipe = ( v, f ) => new Pipe()( f( v ) )\nlet res = {\ndist() {\nreturn val\n},\nlog( fn ) {\nif ( typeof fn !== 'function' ) console.log( dump( val ) )\nelse fn( val )\nreturn new Pipe()( val )\n},\ndebug( fn ) {\nif ( 'debug' in named ) {\nif ( fn == null ) console.log( dump( val ) )\nelse console.log( fn( val ) )\n}\nreturn new Pipe()( val )\n},\npipe( ...args ) {\nargs.unshift( new Pipe()( val ) )\nreturn args.reduce( ( acc, curr ) => {\nreturn _pipe( acc.dist(), curr )\n} )\n}\n}\nreturn res\n}\nreturn reslut\n}\n}\nmodule.exports = new Pipe",
        "mapping": {},
        "name": "wes/pipe"
    },
    "sc": {
        "source": "const ScriptControl = ( language ) => {\nconst sc = require( 'ScriptControl' )\nsc.Language = language\nreturn {\nAddCode( code ) {\nsc.AddCode( code )\n},\nRun( name, ...args ) {\nreturn sc.run( name, ...args )\n}\n}\n}\nmodule.exports = {\nJScript: ScriptControl( 'JScript' ),\nVBScript: ScriptControl( 'VBScript' )\n}\n",
        "mapping": {},
        "name": "wes/sc"
    },
    "test": {
        "source": "const { LF, TAB, REG_CRLF, SPACE } = require('text')\nlet depth = 0\nlet indent = ''\nlet rate = 4\nlet n = LF\nconst checkMark = '\\u2714'\nconst {\nbrightRed: red,\nbrightGreen: green,\nbrightYellow: yellow,\nbrightMagenta: pink,\ngray\n} = console.ansi\nconst describe = (title, fn) => {\ndepth++\nindent = SPACE.repeat(depth * rate)\nconsole.log(LF + indent + title + LF)\nfn()\ndepth--\n}\nconst it = (message, fn) => {\ndepth++\nindent = SPACE.repeat(depth * rate)\nconst printCode = (code) => {\nlet source = code\n.toString()\n.split(TAB)\n.join('    ')\n.split(REG_CRLF)\nif (source.length < 2)\nreturn `${SPACE.repeat(indent + rate)}${source[0]}`\nsource[0] = `${source[source.length - 1].match(/^\\s+/)[0]}${source[0]}`\nconst sp = source.map((v) => v.match(/^\\s+/)[0].length)\nconst min = Math.min.apply(null, sp)\nreturn source\n.map((v) => {\nreturn `${SPACE.repeat((depth + 1) * rate)}${v.replace(\nSPACE.repeat(min),\n''\n)}`\n})\n.join('\\n')\n}\ntry {\nfn()\nconsole.log(`${indent}${gray}${message} ${green}${checkMark}`)\n} catch (e) {\nconsole.log(\n`${indent}${pink}${message}\\n${yellow}${printCode(\nfn\n)} ${red}// => ${e.message}${n}`\n)\n} finally {\ndepth--\n}\n}\nconst assert = (assertion) => {\nreturn assert.ok(assertion)\n}\nassert.ok = (assertion) => {\nlet res = typeof assertion === 'function' ? assertion() : assertion\nif (!res) throw new Error(res)\n}\nassert.ng = (assertion) => {\nlet res = typeof assertion === 'function' ? assertion() : assertion\nif (res) throw new Error(res)\n}\nmodule.exports = {\ndescribe,\nit,\nassert\n}\n",
        "mapping": {},
        "name": "wes/test"
    },
    "text": {
        "source": "const LF = '\\n'\nconst CR = '\\r'\nconst CRLF = CR + LF\nconst SPACE = ' '\nconst TAB = '\\t'\nconst NONE = ''\nconst REG_LINE_SEP = /\\r?\\n/g\nconst REG_LF = /\\n/g\nconst REG_CRLF = /\\r\\n/g\nconst REG_SPACE = /\\s/g\nconst REG_SPACES = /\\s+/g\nconst REG_BLANK_LINE = /^\\s+$/\nconst REG_TAB = /\\t/g\nconst REG_TABS = /\\t+/g\nconst INDNT = /^\\s+/\nconst trimStarts = (string) => {\nreturn string.replace(/^([\\s\\r\\n]+\\n)/, NONE)\n}\nconst trimEnds = (string) => {\nreturn string.replace(/(\\n[\\s\\r\\n]+)$/, NONE)\n}\nconst trim = (string) => {\nreturn trimStarts(trimEnds(string))\n}\nconst splitLines = (string, mod, start, end) => {\nconst sep = REG_CRLF.test(string) ? CRLF : LF\nreturn string\n.split(REG_LINE_SEP)\n.filter(\n(value, i) =>\n(start < i % mod && i % mod < end) || REG_BLANK_LINE.test(value)\n)\n.join(sep)\n}\nconst unindent = ( text ) => {\nconst lineBreak = text.includes( CRLF ) ? CRLF : LF\nlet line = text.split( REG_LINE_SEP )\nconst lastLineSpace = line[ line.length - 1 ].match( INDNT )\nif ( lastLineSpace == null ) return text\nreturn line.map( v => {\nreturn v.replace( lastLineSpace, '' )\n} ).join( lineBreak ).replace( /^\\s+/, '')\n}\nmodule.exports = {\nLF,\nCR,\nCRLF,\nSPACE,\nTAB,\nNONE,\nREG_LINE_SEP,\nREG_LF,\nREG_CRLF,\nREG_SPACE,\nREG_SPACES,\nREG_BLANK_LINE,\nREG_TAB,\nREG_TABS,\ntrimStarts,\ntrimEnds,\ntrim,\nsplitLines,\nunindent\n}\n",
        "mapping": {},
        "name": "wes/text"
    },
    "validation": {
        "source": "const isValid = ( target, name, fn, throwError ) => {\nif ( fn( target ) ) return target\nif ( throwError ) throw new Error ( `${ target } is not ${ name }` )\nreturn false\n}\nconst isString = ( string, throwError ) => {\nlet fn = ( target ) => typeof target === 'string'\nreturn isValid( string, 'String', fn, throwError )\n}\nconst isNumber = ( number, throwError ) => {\nlet fn = ( target ) =>  typeof target === 'number'\nreturn isValid( number, 'Number', fn, throwError )\n}\nconst isFunction = ( func, throwError ) => {\nlet fn = ( target ) => typeof target === 'function'\nreturn isValid( func, 'Function', fn, throwError )\n}\nconst isArray = ( array, throwError ) => {\nlet fn = ( target ) => Array.isArray( target )\nreturn isValid( array, 'Array', fn, throwError )\n}\nconst isDate = ( date, throwError ) => {\nlet fn = ( target ) => target instanceof Date\nreturn isValid( date, 'Date', fn, throwError )\n}\nconst isRegExp = ( regexp, throwError ) => {\nlet fn = ( target ) => regexp instanceof RegExp\nreturn isValid( regexp, 'RegExp', fn, throwError )\n}\nconst isObject = ( object, throwError ) => {\nlet fn = ( target ) => target != null && Object.prototype.toString.call( target ) === '[object Object]'\nreturn isValid( object, 'Object', fn, throwError )\n}\nconst isClass = ( Class, classConstructor, throwError ) => {\nlet fn = ( target ) => target instanceof classConstructor\nreturn isValid( Class, classConstructor.name, fn, throwError )\n}\nmodule.exports = {\nisValid,\nisString,\nisNumber,\nisFunction,\nisArray,\nisDate,\nisRegExp,\nisObject,\nisClass\n}",
        "mapping": {},
        "name": "wes/validation"
    },
    "VBScript": {
        "source": "const { VBScript } = require( 'sc' )\nVBScript.AddCode(`\nFunction getTypeName( obj )\ngetTypeName = TypeName( obj )\nEnd Function\n`)\nVBScript.AddCode(`\nFunction getVarType( obj )\ngetVarType = VarType( obj )\nEnd Function\n`)\nconst TypeName = ( object ) => VBScript.Run( 'getTypeName', object )\nconst VarType = ( object ) => VBScript.Run( 'getVarType', object )\nconst Type = ( object ) => {\nlet constant = [\n'vbEmpty', // 0\n'vbNull', // 1\n'vbInteger', // 2\n'vbLong', // 3\n'vbSingle', // 4\n'vbDouble', // 5\n'vbCurrency', // 6\n'vbDate', // 7\n'vbString', // 8\n'vbObject', // 9\n'vbError', // 10\n'vbBoolean', // 11\n'vbVariant', // 12\n'vbDataObject', // 13\n]\nconstant[17] = 'vbByte'\nconstant[8192] = 'vbArray'\nlet num = VarType( object )\nreturn  num > 8192 ? `${ constant[ num - 8192 ] }[]` : constant[ num ]\n}\nmodule.exports = {\nTypeName,\nVarType,\nType\n}\n",
        "mapping": {},
        "name": "wes/VBScript"
    },
    "version": {
        "source": "const io = require( 'io' )\nconst packageJSON = JSON.parse( io.readFileSync( 'package.json' ) )\nmodule.exports = packageJSON.version",
        "mapping": {},
        "name": "wes/version"
    }
}
        )
        function require(id) {
            if (graph[id] != null) {
                if (!id.startsWith('{')) stack.push([null, null])
                var code = graph[id].code
                var source = graph[id].source
                var mapping = graph[id].mapping
                function localRequire(name) {
                    var res = mapping[name]
                    if (res == null)
                        return require(name)
                    else
                        return require(res)
                }
                localRequire.stack = stack
                localRequire.graph = graph
                var module = {
                    exports: {}
                }
                var global = global || {}
                var process = {
                    env: {
                        NODE_DEBUG: 'semver'
                    },
                    argv: ['wes'].concat( WScriptArguments ),
                    versions: { node: '4.0.0' },
                    platform: 'win32'
                }
                var fn =
                    typeof code === 'function'
                        ? code
                        : new Function(
                              'require',
                              'module',
                              'exports',
                              'console',
                              '__filename',
                              '__dirname',
                              'global',
                              'process',
                              '"use strict"\n' + source
                          )
                fn(
                    localRequire,
                    module,
                    module.exports,
                    console,
                    graph[id].name || graph[id],
                    ( stack[ stack.length - 1 ][0] + '' ).replace( /\/[^\/]+$/, ''),
                    global,
                    process
                )
                graph[id].code = fn
                stack.pop()
                return module.exports
            }
            try {
                return WScript.CreateObject(id)
            } catch (e) {}
            var io = require('io')
            var curr = (function() {
                var res
                if (stack.length) {
                    if ((res = stack[stack.length - 1])) {
                        if (res[0]) {
                            return io.dirname(res[0])
                        }
                    }
                }
                return io.toPosixSep(WShell.CurrentDirectory)
            })()
            var points = []
            if (id.startsWith(io.posixSep)) curr = FSO.GetDriveName(curr)
            if (
                id.startsWith(io.posixSep) ||
                id.startsWith('.' + io.posixSep) ||
                id.startsWith('..' + io.posixSep)
            ) {
                points.push(io.join(curr, id))
            } else {
                points.push(io.join(curr, id))
                var hierarchy = io.split(curr)
                while (hierarchy.length) {
                    points.push(
                        io.absolute(
                            hierarchy.join(io.posixSep) +
                                io.posixSep +
                                'node_modules' +
                                io.posixSep +
                                id
                        )
                    )
                    hierarchy.pop()
                }
            }
            var entry = null
            points.some(function(value) {
                var res = null
                var pack = null
                if (((res = value), io.fileExists(res))) return (entry = res)
                if (((res = value + '.js'), io.fileExists(res)))
                    return (entry = res)
                if (((res = value + '.json'), io.fileExists(res)))
                    return (entry = res)
                if (((res = value + '/index.js'), io.fileExists(res)))
                    return (entry = res)
                if (
                    ((pack = value + '/pack.json'),
                    io.fileExists(pack))
                ) {
                    var temp = JSON.parse(
                        io.readFileSync( pack )
                    ).main
                    if (temp != null) {
                        if (((res = io.join(value, temp)), io.fileExists(res)))
                            return (entry = res)
                        else if (
                            ((res = io.join(value, temp + '.js')),
                            io.fileExists(res))
                        )
                            return (entry = res)
                    }
                }
            })
            if (entry == null)
                throw new Error(
                    "module not found\ncaller: '" +
                        curr +
                        "' => require: '" +
                        id +
                        "'"
                )
            var loaded = history.find(function(val) {
                return val[0] === entry
            })
            if (!!loaded) {
                graph[stack[stack.length - 1][1]].mapping[id] = loaded[1]
                stack.push([entry, loaded[1]])
                return require(loaded[1])
            }
            var uuid = genUUID()
            graph[stack[stack.length - 1][1]].mapping[id] = uuid
            stack.push([entry, uuid])
            graph[uuid] = {
                source: entry.endsWith( '.json' ) ?
                    "module.exports = " + io
                        .readFileSync(entry)
                        .replace(/\r/g, '') :
                    io
                        .readFileSync(entry)
                        .replace(/\r/g, '')
                        .replace( /^#![^\n]+$/m, '' ),
                name: entry.match(/([^\/]+)$/)[0] + '',
                mapping: {}
            }
            history.push([entry, uuid])
            return require(uuid)
        }
        var FSO = require('Scripting.FileSystemObject')
        var genUUID = function() {
            var typelib = require('Scriptlet.Typelib')
            return typelib.GUID.replace(/[^\}]+$/, '')
        }
        var Guid = genUUID()
        if (!stack.length) {
            stack.push([null, Guid])
            graph[Guid] = {
                code: function() {
                    return require(WScript.Arguments(0))
                },
                mapping: {}
            }
        }
        require(Guid)
    }
} catch ( error ) {
    var errorStack = error.stack
    if (console) console.log( errorStack )
    else WScript.StdErr.WriteLine( errorStack )
}